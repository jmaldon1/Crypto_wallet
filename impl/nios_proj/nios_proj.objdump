
nios_proj.elf:     file format elf32-littlenios2
nios_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00016bdc memsz 0x00016bdc flags r-x
    LOAD off    0x00017bfc vaddr 0x00016bfc paddr 0x00017fec align 2**12
         filesz 0x000013f0 memsz 0x000013f0 flags rw-
    LOAD off    0x000193dc vaddr 0x000193dc paddr 0x000193dc align 2**12
         filesz 0x00000000 memsz 0x00000ce0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e074  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00008958  0000e2a4  0000e2a4  0000f2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013f0  00016bfc  00017fec  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000ce0  000193dc  000193dc  000193dc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0001a0bc  0001a0bc  00018fec  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  02000000  02000000  00018fec  2**0
                  CONTENTS
  8 .epcs_flash_controller 00000000  02009000  02009000  00018fec  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00018fec  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a58  00000000  00000000  00019010  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000119d6  00000000  00000000  00019a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000547d  00000000  00000000  0002b43e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006dcd  00000000  00000000  000308bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002094  00000000  00000000  00037688  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003534  00000000  00000000  0003971c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002edb  00000000  00000000  0003cc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0003fb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000578  00000000  00000000  0003fb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000432cd  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000432d0  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000432d3  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000432d4  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000432d5  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000432d9  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000432dd  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000432e1  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000432ea  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000432f3  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000d  00000000  00000000  000432fc  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  00043309  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00054373  00000000  00000000  00043346  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000e2a4 l    d  .rodata	00000000 .rodata
00016bfc l    d  .rwdata	00000000 .rwdata
000193dc l    d  .bss	00000000 .bss
0001a0bc l    d  .sdram	00000000 .sdram
02000000 l    d  .onchip_memory2	00000000 .onchip_memory2
02009000 l    d  .epcs_flash_controller	00000000 .epcs_flash_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Class2018/Documents/Projects/Crypto_wallet/impl/nios_proj_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bip32.c
00000000 l    df *ABS*	00000000 bip39.c
00012284 l     O .rodata	00002004 wordlist
000193dc l     O .bss	00000004 bip39_cache_index
00019424 l     O .bss	00000604 bip39_cache
00019a28 l     O .bss	000000f0 mnemo.3384
00019b18 l     O .bss	00000144 pctx.3412
00000000 l    df *ABS*	00000000 chainparams.c
00000000 l    df *ABS*	00000000 commontools.c
00000000 l    df *ABS*	00000000 hmac.c
00019c5c l     O .bss	00000040 i_key_pad.2093
00019c9c l     O .bss	000000a8 hctx.2125
00019d44 l     O .bss	00000040 key_pad.2132
00019d84 l     O .bss	00000068 context.2133
00019dec l     O .bss	00000080 i_key_pad.2154
00019e6c l     O .bss	00000080 key_pad.2193
00019eec l     O .bss	000000d0 context.2194
00000000 l    df *ABS*	00000000 memzero.c
00000000 l    df *ABS*	00000000 pbkdf2.c
00000000 l    df *ABS*	00000000 rand.c
000193e0 l     O .bss	00000004 initialized.3065
00000000 l    df *ABS*	00000000 sha2.c
00016248 l     O .rodata	00000100 K256
00016348 l     O .rodata	00000020 sha256_initial_hash_value
00016368 l     O .rodata	00000280 K512
000165e8 l     O .rodata	00000040 sha512_initial_hash_value
00000000 l    df *ABS*	00000000 sha2mnemonic.c
0001663c l     O .rodata	00000100 K256
0001675c l     O .rodata	00000280 K512
00017fb0 l     O .rwdata	00000004 sha2_hex_digits
00008b30 l     F .text	0000050c trezor_sha512_Last
00000000 l    df *ABS*	00000000 wallet_main.c
00000000 l    df *ABS*	00000000 wallet_system.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
000193ec l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009b10 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00016bfc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
0000a6dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017fbc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000aa98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000abd4 l     F .text	00000034 alt_dev_reg
00016cdc l     O .rwdata	000000cc epcs_flash_controller
00016da8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0000ac98 l     F .text	00000034 alt_flash_device_register
0000ad20 l     F .text	000003f8 alt_epcs_flash_query
0000b118 l     F .text	000000ec alt_epcs_flash_memcmp
0000b4f0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b9b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000bbc4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0000c258 l     F .text	00000038 epcs_test_wip
0000c290 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c964 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000ca98 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000cac4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000cfe0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000d140 l     F .text	0000003c alt_get_errno
0000d17c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019420 g     O .bss	00000004 alt_instruction_exception_handler
000082c0 g     F .text	00000870 trezor_sha512_Update
0000b464 g     F .text	0000008c alt_epcs_flash_get_info
0000a7c8 g     F .text	0000007c alt_main
00009a78 g     F .text	0000002c strcpy
00015328 g     O .rodata	0000083c btc_chainparams_regtest
000098e8 g     F .text	00000080 _puts_r
00019fbc g     O .bss	00000100 alt_irq
00017fec g       *ABS*	00000000 __flash_rwdata_start
0000a17c g     F .text	00000054 _gettimeofday_r
0001a0bc g       *ABS*	00000000 __alt_heap_start
0000989c g     F .text	0000004c printf
00001dac g     F .text	00000374 pbkdf2_hmac_sha512_Init
000063f4 g     F .text	00000070 trezor_sha256_Init
0000726c g     F .text	00000058 trezor_sha256_Raw
000048a4 g     F .text	00000490 sha512_Last
000169dc g     O .rodata	00000040 sha512_initial_hash_value
00006a2c g     F .text	00000408 trezor_sha256_Update
00004f88 g     F .text	00000058 sha512_Raw
0000d448 g     F .text	00000024 altera_nios2_gen2_irq_init
0000c2cc g     F .text	000000fc epcs_sector_erase
00000000 g     F .entry	0000000c __reset
000052f8 g     F .text	00000064 trezor_sha1_Init
00000020 g       *ABS*	00000000 __flash_exceptions_start
000193f4 g     O .bss	00000004 errno
0001940c g     O .bss	00000004 alt_argv
0001ffb0 g       *ABS*	00000000 _gp
000073a0 g     F .text	00000f20 trezor_sha512_Transform
00017e30 g     O .rwdata	00000180 alt_fd_list
0000c510 g     F .text	0000006c epcs_write_status_register
0000d668 g     F .text	00000090 alt_find_dev
000095dc g     F .text	00000028 memcpy
00003314 g     F .text	00000058 sha256_Raw
0000d0c4 g     F .text	0000007c alt_io_redirect
0000e2a4 g       *ABS*	00000000 __DTOR_END__
00009968 g     F .text	00000014 puts
0000d8c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000903c g     F .text	00000230 trezor_sha512_Final
0000b5fc g     F .text	00000100 alt_epcs_flash_write_block
0000bdbc g     F .text	0000021c altera_avalon_jtag_uart_read
000095b4 g     F .text	00000014 malloc
00009860 g     F .text	0000003c _printf_r
0000a42c g     F .text	00000064 .hidden __udivsi3
00001358 g     F .text	000000a8 trezor_hmac_sha512_Final
00000d4c g     F .text	00000138 trezor_hmac_sha256_Init
000193f8 g     O .bss	00000008 alt_timezone
00001464 g     F .text	00000360 trezor_hmac_sha512_prepare
00006e34 g     F .text	00000338 trezor_sha256_Final
00007318 g     F .text	00000088 trezor_sha512_Init
000099f0 g     F .text	00000050 _sbrk_r
00002120 g     F .text	00000144 pbkdf2_hmac_sha512_Update
0000535c g     F .text	000007ac trezor_sha1_Transform
00017fd8 g     O .rwdata	00000004 alt_max_fd
00006348 g     F .text	00000058 trezor_sha1_Raw
0000b584 g     F .text	00000078 alt_epcs_flash_erase_block
0000dcac g     F .text	000005c4 .hidden __umoddi3
00017fb4 g     O .rwdata	00000004 _global_impure_ptr
0000c7dc g     F .text	0000005c epcs_exit_4_bytes_mode
0001a0bc g       *ABS*	00000000 __bss_end
0000cef0 g     F .text	000000f0 alt_iic_isr_register
0000a990 g     F .text	00000108 alt_tick
0000cea4 g     F .text	0000004c alt_ic_irq_enabled
00005b08 g     F .text	00000408 trezor_sha1_Update
0000a8f4 g     F .text	0000009c alt_alarm_stop
000017c4 g     F .text	00000040 memzero
0000026c g     F .text	000000f0 btc_hdnode_from_seed
0001941c g     O .bss	00000004 alt_irq_active
000072c4 g     F .text	00000054 sha256_Data
000000fc g     F .exceptions	000000d4 alt_irq_handler
00017e08 g     O .rwdata	00000028 alt_dev_null
00004fe0 g     F .text	0000018c hmac_sha256
0000ca78 g     F .text	00000020 alt_dcache_flush_all
00017fec g       *ABS*	00000000 __ram_rwdata_end
00017fd0 g     O .rwdata	00000008 alt_dev_list
0000aad4 g     F .text	00000100 write
00000ed0 g     F .text	000000a8 trezor_hmac_sha256_Final
00016bfc g       *ABS*	00000000 __ram_rodata_end
0000a490 g     F .text	00000058 .hidden __umodsi3
0000c698 g     F .text	00000068 epcs_read_electronic_signature
0001a0bc g       *ABS*	00000000 end
00002614  w    F .text	0000008c random_buffer
00001400 g     F .text	00000064 trezor_hmac_sha512
000026a0 g     F .text	00000074 sha256_Init
0000b8f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000e2a4 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00004d34 g     F .text	00000254 sha512_Final
0000bfd8 g     F .text	00000224 altera_avalon_jtag_uart_write
00009b7c g     F .text	0000052c ___vfprintf_internal_r
00009624 g     F .text	000000e4 _free_r
00005f10 g     F .text	00000338 trezor_sha1_Final
0000db1c g     F .text	00000190 __call_exitprocs
00002420 g     F .text	00000170 pbkdf2_hmac_sha512
00000230 g     F .text	0000003c _start
00019414 g     O .bss	00000004 _alt_tick_rate
00009990 g     F .text	00000060 rand
0000d46c g     F .text	000001fc alt_avalon_spi_command
00019418 g     O .bss	00000004 _alt_nticks
0000ac40 g     F .text	00000058 alt_sys_init
0000d9c4 g     F .text	00000158 __register_exitproc
000160f8 g     O .rodata	00000150 btc_mainnet_checkpoint_array
0000bc64 g     F .text	00000068 altera_avalon_jtag_uart_close
0000958c g     F .text	00000028 .hidden __mulsi3
00016bfc g       *ABS*	00000000 __ram_rwdata_start
0000e2a4 g       *ABS*	00000000 __ram_rodata_start
0000c1fc g     F .text	0000005c epcs_read_status_register
00002714 g     F .text	000005c0 sha256_Transform
0000b794 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d800 g     F .text	000000c4 alt_get_fd
0000716c g     F .text	00000100 trezor_sha256_End
00001804 g     F .text	00000220 pbkdf2_hmac_sha256_Init
00001b54 g     F .text	000000e8 pbkdf2_hmac_sha256_Final
0000c700 g     F .text	00000080 epcs_read_device_id
0000d994 g     F .text	00000030 memcmp
0000b854 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a0bc g       *ABS*	00000000 __alt_stack_base
0000b8a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000926c g     F .text	00000100 trezor_sha512_End
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
000063a0 g     F .text	00000054 trezor_sha1_Data
0000d6f8 g     F .text	00000108 alt_find_file
00002590 g     F .text	00000084 random32
0000cb00 g     F .text	000000a4 alt_dev_llist_insert
0000a844 g     F .text	000000b0 sbrk
00017fe0 g     O .rwdata	00000008 alt_flash_dev_list
0000a0c4 g     F .text	000000b8 __sfvwrite_small_dev
0000a4e8 g     F .text	000001f4 gettimeofday
000193dc g       *ABS*	00000000 __bss_start
00009604 g     F .text	00000020 memset
00009418 g     F .text	00000174 main
00002f7c g     F .text	00000398 sha256_Final
00019410 g     O .bss	00000004 alt_envp
0000b7f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000997c g     F .text	00000014 srand
0000035c g     F .text	000000a0 mnemonic_generate
02000000 g       *ABS*	00000000 __alt_heap_limit
00009708 g     F .text	00000158 _malloc_r
00009ac0 g     F .text	00000050 time
00017fdc g     O .rwdata	00000004 alt_errno
0001429c g     O .rodata	0000083c btc_chainparams_main
0000a334 g     F .text	00000084 .hidden __divsi3
0000e2a4 g       *ABS*	00000000 __CTOR_END__
0000b204 g     F .text	00000260 alt_epcs_flash_write
00009a40 g     F .text	00000038 strcmp
0000e2a4 g       *ABS*	00000000 __flash_rodata_start
0000e2a4 g       *ABS*	00000000 __DTOR_LIST__
00004458 g     F .text	0000044c sha512_Update
0000ac08 g     F .text	00000038 alt_irq_init
0000d3c4 g     F .text	00000084 alt_release_fd
0000336c g     F .text	0000008c sha512_Init
00016afa g     O .rodata	00000100 .hidden __clz_tab
000003fc g     F .text	0000025c mnemonic_from_data
0000d960 g     F .text	00000014 atexit
0000a1d0 g     F .text	00000058 _write_r
00000cf4 g     F .text	00000058 hd_gen_master
00017fb8 g     O .rwdata	00000004 _impure_ptr
00019408 g     O .bss	00000004 alt_argc
0000cc04 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00016628 g     O .rodata	00000014 sha1_initial_hash_value
00017fc8 g     O .rwdata	00000008 alt_fs_list
00019400 g     O .bss	00000008 alt_resettime
00006464 g     F .text	000005c8 trezor_sha256_Transform
000033f8 g     F .text	00001060 sha512_Transform
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000c3c8 g     F .text	000000f4 epcs_read_buffer
02000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0001673c g     O .rodata	00000020 sha256_initial_hash_value
0000accc g     F .text	00000054 alt_epcs_flash_init
00000f78 g     F .text	00000070 trezor_hmac_sha256
0000cd40 g     F .text	00000050 alt_ic_isr_register
00017fec g       *ABS*	00000000 _edata
00006248 g     F .text	00000100 trezor_sha1_End
0001a0bc g       *ABS*	00000000 _end
0000cc64 g     F .text	00000068 alt_flash_open_dev
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000bccc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000ce18 g     F .text	0000008c alt_ic_irq_disable
0000c780 g     F .text	0000005c epcs_enter_4_bytes_mode
00001a24 g     F .text	00000130 pbkdf2_hmac_sha256_Update
00002cd4 g     F .text	000002a8 sha256_Update
0000d974 g     F .text	00000020 exit
0000cccc g     F .text	00000054 alt_flash_close_dev
0000a3b8 g     F .text	00000074 .hidden __modsi3
00002264 g     F .text	000001bc pbkdf2_hmac_sha512_Final
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000009c0 g     F .text	00000334 mnemonic_to_entropy
0000e270 g     F .text	00000034 _exit
0000c838 g     F .text	0000012c alt_alarm_start
0000a228 g     F .text	0000010c .hidden __muldi3
00014ae4 g     O .rodata	0000083c btc_chainparams_test
00009aa4 g     F .text	0000001c strlen
0000c4bc g     F .text	00000054 epcs_write_enable
0000d268 g     F .text	0000015c open
00001c3c g     F .text	00000170 pbkdf2_hmac_sha256
000193e4 g     O .bss	00000004 __malloc_sbrk_start
000011d4 g     F .text	00000138 trezor_hmac_sha512_Init
000093c4 g     F .text	00000054 trezor_sha512_Data
0000cd20 g     F .text	00000020 alt_icache_flush_all
00000658 g     F .text	00000368 mnemonic_to_seed
0000516c g     F .text	0000018c hmac_sha512
0000130c g     F .text	0000004c trezor_hmac_sha512_Update
00017fe8 g     O .rwdata	00000004 alt_priority_mask
000193e8 g     O .bss	00000004 __malloc_free_list
0000936c g     F .text	00000058 trezor_sha512_Raw
0000cd90 g     F .text	00000088 alt_ic_irq_enable
0000a0a8 g     F .text	0000001c __vfprintf_internal
0000b6fc g     F .text	00000098 alt_epcs_flash_read
00017fc0 g     O .rwdata	00000008 alt_alarm_list
0000cba4 g     F .text	00000060 _do_ctors
00000e84 g     F .text	0000004c trezor_hmac_sha256_Update
0000c9a0 g     F .text	000000d8 close
0000a744 g     F .text	00000084 alt_load
00000fe8 g     F .text	000001ec trezor_hmac_sha256_prepare
000095c8 g     F .text	00000014 free
0000c57c g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a7ef04 	addi	r2,r2,-24644
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a7ef04 	addi	r2,r2,-24644
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_epcs_flash_controller+0xfdff712c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_epcs_flash_controller+0xfdff7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a51c17 	ldw	r2,-27536(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a51c17 	ldw	r2,-27536(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6bfec14 	ori	gp,gp,65456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10a4f714 	ori	r2,r2,37852

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18e82f14 	ori	r3,r3,41148

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_epcs_flash_controller+0xfdff7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000a7440 	call	a744 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000a7c80 	call	a7c8 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_epcs_flash_controller+0xfdff7268>

0000026c <btc_hdnode_from_seed>:
//    memset(hdnode->public_key, 0, sizeof(hdnode->public_key));
//    btc_free(hdnode);
//}
//
btc_bool btc_hdnode_from_seed(const uint8_t* seed, int seed_len, btc_hdnode* out)
{
     26c:	deffe904 	addi	sp,sp,-92
     270:	dfc01615 	stw	ra,88(sp)
     274:	df001515 	stw	fp,84(sp)
     278:	df001504 	addi	fp,sp,84
     27c:	e13ffd15 	stw	r4,-12(fp)
     280:	e17ffe15 	stw	r5,-8(fp)
     284:	e1bfff15 	stw	r6,-4(fp)
    uint8_t I[BTC_ECKEY_PKEY_LENGTH + BTC_BIP32_CHAINCODE_SIZE];
    memset(out, 0, sizeof(btc_hdnode));
     288:	01805c04 	movi	r6,368
     28c:	000b883a 	mov	r5,zero
     290:	e13fff17 	ldw	r4,-4(fp)
     294:	00096040 	call	9604 <memset>
    out->depth = 0;
     298:	e0bfff17 	ldw	r2,-4(fp)
     29c:	10000015 	stw	zero,0(r2)
    out->fingerprint = 0x00000000;
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	10000115 	stw	zero,4(r2)
    out->child_num = 0;
     2a8:	e0bfff17 	ldw	r2,-4(fp)
     2ac:	10000215 	stw	zero,8(r2)
    hmac_sha512((const uint8_t*)"Bitcoin seed", 12, seed, seed_len, I);
     2b0:	e0fffe17 	ldw	r3,-8(fp)
     2b4:	e0bfed04 	addi	r2,fp,-76
     2b8:	d8800015 	stw	r2,0(sp)
     2bc:	180f883a 	mov	r7,r3
     2c0:	e1bffd17 	ldw	r6,-12(fp)
     2c4:	01400304 	movi	r5,12
     2c8:	01000074 	movhi	r4,1
     2cc:	2138a904 	addi	r4,r4,-7516
     2d0:	000516c0 	call	516c <hmac_sha512>
    memcpy(out->private_key, I, BTC_ECKEY_PKEY_LENGTH);
     2d4:	e0bfff17 	ldw	r2,-4(fp)
     2d8:	10800b04 	addi	r2,r2,44
     2dc:	e0ffed04 	addi	r3,fp,-76
     2e0:	01800804 	movi	r6,32
     2e4:	180b883a 	mov	r5,r3
     2e8:	1009883a 	mov	r4,r2
     2ec:	00095dc0 	call	95dc <memcpy>

	printf("Seed: ");
     2f0:	01000074 	movhi	r4,1
     2f4:	2138ad04 	addi	r4,r4,-7500
     2f8:	000989c0 	call	989c <printf>
		for(int i = 0; i < BTC_ECKEY_PKEY_LENGTH; i++){
     2fc:	e03fec15 	stw	zero,-80(fp)
     300:	00000d06 	br	338 <btc_hdnode_from_seed+0xcc>
		printf("%x", out->private_key[i]);
     304:	e0ffff17 	ldw	r3,-4(fp)
     308:	e0bfec17 	ldw	r2,-80(fp)
     30c:	1885883a 	add	r2,r3,r2
     310:	10800b04 	addi	r2,r2,44
     314:	10800003 	ldbu	r2,0(r2)
     318:	10803fcc 	andi	r2,r2,255
     31c:	100b883a 	mov	r5,r2
     320:	01000074 	movhi	r4,1
     324:	2138af04 	addi	r4,r4,-7492
     328:	000989c0 	call	989c <printf>
    out->child_num = 0;
    hmac_sha512((const uint8_t*)"Bitcoin seed", 12, seed, seed_len, I);
    memcpy(out->private_key, I, BTC_ECKEY_PKEY_LENGTH);

	printf("Seed: ");
		for(int i = 0; i < BTC_ECKEY_PKEY_LENGTH; i++){
     32c:	e0bfec17 	ldw	r2,-80(fp)
     330:	10800044 	addi	r2,r2,1
     334:	e0bfec15 	stw	r2,-80(fp)
     338:	e0bfec17 	ldw	r2,-80(fp)
     33c:	10800810 	cmplti	r2,r2,32
     340:	103ff01e 	bne	r2,zero,304 <__alt_mem_epcs_flash_controller+0xfdff7304>
//    }
//
//    memcpy(out->chain_code, I + BTC_ECKEY_PKEY_LENGTH, BTC_BIP32_CHAINCODE_SIZE);
//    btc_hdnode_fill_public_key(out);
//    memset(I, 0, sizeof(I));
    return true;
     344:	00800044 	movi	r2,1
}
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <mnemonic_generate>:
} bip39_cache[BIP39_CACHE_SIZE];

#endif

const char *mnemonic_generate(int strength)
{
     35c:	defff404 	addi	sp,sp,-48
     360:	dfc00b15 	stw	ra,44(sp)
     364:	df000a15 	stw	fp,40(sp)
     368:	df000a04 	addi	fp,sp,40
     36c:	e13fff15 	stw	r4,-4(fp)
	if (strength % 32 || strength < 128 || strength > 256) {
     370:	e0bfff17 	ldw	r2,-4(fp)
     374:	108007cc 	andi	r2,r2,31
     378:	1000061e 	bne	r2,zero,394 <mnemonic_generate+0x38>
     37c:	e0bfff17 	ldw	r2,-4(fp)
     380:	10802010 	cmplti	r2,r2,128
     384:	1000031e 	bne	r2,zero,394 <mnemonic_generate+0x38>
     388:	e0bfff17 	ldw	r2,-4(fp)
     38c:	10804050 	cmplti	r2,r2,257
     390:	1000021e 	bne	r2,zero,39c <mnemonic_generate+0x40>
		return 0;
     394:	0005883a 	mov	r2,zero
     398:	00001306 	br	3e8 <mnemonic_generate+0x8c>
	}
	uint8_t data[32];
	random_buffer(data, 32);
     39c:	e0bff704 	addi	r2,fp,-36
     3a0:	01400804 	movi	r5,32
     3a4:	1009883a 	mov	r4,r2
     3a8:	00026140 	call	2614 <random_buffer>
//	btc_random_bytes(data, BTC_ECKEY_PKEY_LENGTH, 0);
	// for(int i = 0; i < 32; i++){
	// 	printf("%x\n", data[i]);
	// }
	const char *r = mnemonic_from_data(data, strength / 8);
     3ac:	e0bfff17 	ldw	r2,-4(fp)
     3b0:	1000010e 	bge	r2,zero,3b8 <mnemonic_generate+0x5c>
     3b4:	108001c4 	addi	r2,r2,7
     3b8:	1005d0fa 	srai	r2,r2,3
     3bc:	1007883a 	mov	r3,r2
     3c0:	e0bff704 	addi	r2,fp,-36
     3c4:	180b883a 	mov	r5,r3
     3c8:	1009883a 	mov	r4,r2
     3cc:	00003fc0 	call	3fc <mnemonic_from_data>
     3d0:	e0bff615 	stw	r2,-40(fp)
	memzero(data, sizeof(data));
     3d4:	e0bff704 	addi	r2,fp,-36
     3d8:	01400804 	movi	r5,32
     3dc:	1009883a 	mov	r4,r2
     3e0:	00017c40 	call	17c4 <memzero>
	return r;
     3e4:	e0bff617 	ldw	r2,-40(fp)
}
     3e8:	e037883a 	mov	sp,fp
     3ec:	dfc00117 	ldw	ra,4(sp)
     3f0:	df000017 	ldw	fp,0(sp)
     3f4:	dec00204 	addi	sp,sp,8
     3f8:	f800283a 	ret

000003fc <mnemonic_from_data>:

char *mnemonic_from_data(const uint8_t *data, int len)
{
     3fc:	deffed04 	addi	sp,sp,-76
     400:	dfc01215 	stw	ra,72(sp)
     404:	df001115 	stw	fp,68(sp)
     408:	dc001015 	stw	r16,64(sp)
     40c:	df001104 	addi	fp,sp,68
     410:	e13ffd15 	stw	r4,-12(fp)
     414:	e17ffe15 	stw	r5,-8(fp)
	if (len % 4 || len < 16 || len > 32) {
     418:	e0bffe17 	ldw	r2,-8(fp)
     41c:	108000cc 	andi	r2,r2,3
     420:	1000061e 	bne	r2,zero,43c <mnemonic_from_data+0x40>
     424:	e0bffe17 	ldw	r2,-8(fp)
     428:	10800410 	cmplti	r2,r2,16
     42c:	1000031e 	bne	r2,zero,43c <mnemonic_from_data+0x40>
     430:	e0bffe17 	ldw	r2,-8(fp)
     434:	10800850 	cmplti	r2,r2,33
     438:	1000021e 	bne	r2,zero,444 <mnemonic_from_data+0x48>
		return 0;
     43c:	0005883a 	mov	r2,zero
     440:	00007f06 	br	640 <mnemonic_from_data+0x244>
	}

	uint8_t bits[32 + 1];

	trezor_sha256_Raw(data, len, bits);
     444:	e0bff404 	addi	r2,fp,-48
     448:	100d883a 	mov	r6,r2
     44c:	e17ffe17 	ldw	r5,-8(fp)
     450:	e13ffd17 	ldw	r4,-12(fp)
     454:	000726c0 	call	726c <trezor_sha256_Raw>
	// checksum
	bits[len] = bits[0];
     458:	e0fff403 	ldbu	r3,-48(fp)
     45c:	e13ff404 	addi	r4,fp,-48
     460:	e0bffe17 	ldw	r2,-8(fp)
     464:	2085883a 	add	r2,r4,r2
     468:	10c00005 	stb	r3,0(r2)
	// data
	memcpy(bits, data, len);
     46c:	e0fffe17 	ldw	r3,-8(fp)
     470:	e0bff404 	addi	r2,fp,-48
     474:	180d883a 	mov	r6,r3
     478:	e17ffd17 	ldw	r5,-12(fp)
     47c:	1009883a 	mov	r4,r2
     480:	00095dc0 	call	95dc <memcpy>

	int mlen = len * 3 / 4;
     484:	e0fffe17 	ldw	r3,-8(fp)
     488:	1805883a 	mov	r2,r3
     48c:	1085883a 	add	r2,r2,r2
     490:	10c5883a 	add	r2,r2,r3
     494:	1000010e 	bge	r2,zero,49c <mnemonic_from_data+0xa0>
     498:	108000c4 	addi	r2,r2,3
     49c:	1005d0ba 	srai	r2,r2,2
     4a0:	e0bff315 	stw	r2,-52(fp)
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
     4a4:	008000b4 	movhi	r2,2
     4a8:	10a68a04 	addi	r2,r2,-26072
     4ac:	e0bff215 	stw	r2,-56(fp)
	for (i = 0; i < mlen; i++) {
     4b0:	e03fef15 	stw	zero,-68(fp)
     4b4:	00005906 	br	61c <mnemonic_from_data+0x220>
		idx = 0;
     4b8:	e03ff115 	stw	zero,-60(fp)
		for (j = 0; j < 11; j++) {
     4bc:	e03ff015 	stw	zero,-64(fp)
     4c0:	00002d06 	br	578 <mnemonic_from_data+0x17c>
			idx <<= 1;
     4c4:	e0bff117 	ldw	r2,-60(fp)
     4c8:	1085883a 	add	r2,r2,r2
     4cc:	e0bff115 	stw	r2,-60(fp)
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
     4d0:	014002c4 	movi	r5,11
     4d4:	e13fef17 	ldw	r4,-68(fp)
     4d8:	000958c0 	call	958c <__mulsi3>
     4dc:	1007883a 	mov	r3,r2
     4e0:	e0bff017 	ldw	r2,-64(fp)
     4e4:	1885883a 	add	r2,r3,r2
     4e8:	1000010e 	bge	r2,zero,4f0 <mnemonic_from_data+0xf4>
     4ec:	108001c4 	addi	r2,r2,7
     4f0:	1005d0fa 	srai	r2,r2,3
     4f4:	1007883a 	mov	r3,r2
     4f8:	e0bff404 	addi	r2,fp,-48
     4fc:	10c5883a 	add	r2,r2,r3
     500:	10800003 	ldbu	r2,0(r2)
     504:	14003fcc 	andi	r16,r2,255
     508:	014002c4 	movi	r5,11
     50c:	e13fef17 	ldw	r4,-68(fp)
     510:	000958c0 	call	958c <__mulsi3>
     514:	1007883a 	mov	r3,r2
     518:	e0bff017 	ldw	r2,-64(fp)
     51c:	1887883a 	add	r3,r3,r2
     520:	00a00034 	movhi	r2,32768
     524:	108001c4 	addi	r2,r2,7
     528:	1884703a 	and	r2,r3,r2
     52c:	1000040e 	bge	r2,zero,540 <mnemonic_from_data+0x144>
     530:	10bfffc4 	addi	r2,r2,-1
     534:	00fffe04 	movi	r3,-8
     538:	10c4b03a 	or	r2,r2,r3
     53c:	10800044 	addi	r2,r2,1
     540:	1007883a 	mov	r3,r2
     544:	008001c4 	movi	r2,7
     548:	10c5c83a 	sub	r2,r2,r3
     54c:	00c00044 	movi	r3,1
     550:	1884983a 	sll	r2,r3,r2
     554:	8084703a 	and	r2,r16,r2
     558:	0084803a 	cmplt	r2,zero,r2
     55c:	10803fcc 	andi	r2,r2,255
     560:	e0fff117 	ldw	r3,-60(fp)
     564:	1885883a 	add	r2,r3,r2
     568:	e0bff115 	stw	r2,-60(fp)

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
		idx = 0;
		for (j = 0; j < 11; j++) {
     56c:	e0bff017 	ldw	r2,-64(fp)
     570:	10800044 	addi	r2,r2,1
     574:	e0bff015 	stw	r2,-64(fp)
     578:	e0bff017 	ldw	r2,-64(fp)
     57c:	108002d0 	cmplti	r2,r2,11
     580:	103fd01e 	bne	r2,zero,4c4 <__alt_mem_epcs_flash_controller+0xfdff74c4>
			idx <<= 1;
			idx += (bits[(i * 11 + j) / 8] & (1 << (7 - ((i * 11 + j) % 8)))) > 0;
		}
		strcpy(p, wordlist[idx]);
     584:	00800074 	movhi	r2,1
     588:	1088a104 	addi	r2,r2,8836
     58c:	e0fff117 	ldw	r3,-60(fp)
     590:	18c7883a 	add	r3,r3,r3
     594:	18c7883a 	add	r3,r3,r3
     598:	10c5883a 	add	r2,r2,r3
     59c:	10800017 	ldw	r2,0(r2)
     5a0:	100b883a 	mov	r5,r2
     5a4:	e13ff217 	ldw	r4,-56(fp)
     5a8:	0009a780 	call	9a78 <strcpy>
		p += strlen(wordlist[idx]);
     5ac:	00800074 	movhi	r2,1
     5b0:	1088a104 	addi	r2,r2,8836
     5b4:	e0fff117 	ldw	r3,-60(fp)
     5b8:	18c7883a 	add	r3,r3,r3
     5bc:	18c7883a 	add	r3,r3,r3
     5c0:	10c5883a 	add	r2,r2,r3
     5c4:	10800017 	ldw	r2,0(r2)
     5c8:	1009883a 	mov	r4,r2
     5cc:	0009aa40 	call	9aa4 <strlen>
     5d0:	1007883a 	mov	r3,r2
     5d4:	e0bff217 	ldw	r2,-56(fp)
     5d8:	10c5883a 	add	r2,r2,r3
     5dc:	e0bff215 	stw	r2,-56(fp)
		*p = (i < mlen - 1) ? ' ' : 0;
     5e0:	e0bff317 	ldw	r2,-52(fp)
     5e4:	10bfffc4 	addi	r2,r2,-1
     5e8:	e0ffef17 	ldw	r3,-68(fp)
     5ec:	1880020e 	bge	r3,r2,5f8 <mnemonic_from_data+0x1fc>
     5f0:	00800804 	movi	r2,32
     5f4:	00000106 	br	5fc <mnemonic_from_data+0x200>
     5f8:	0005883a 	mov	r2,zero
     5fc:	e0fff217 	ldw	r3,-56(fp)
     600:	18800005 	stb	r2,0(r3)
		p++;
     604:	e0bff217 	ldw	r2,-56(fp)
     608:	10800044 	addi	r2,r2,1
     60c:	e0bff215 	stw	r2,-56(fp)
	int mlen = len * 3 / 4;
	static CONFIDENTIAL char mnemo[24 * 10];

	int i, j, idx;
	char *p = mnemo;
	for (i = 0; i < mlen; i++) {
     610:	e0bfef17 	ldw	r2,-68(fp)
     614:	10800044 	addi	r2,r2,1
     618:	e0bfef15 	stw	r2,-68(fp)
     61c:	e0ffef17 	ldw	r3,-68(fp)
     620:	e0bff317 	ldw	r2,-52(fp)
     624:	18bfa416 	blt	r3,r2,4b8 <__alt_mem_epcs_flash_controller+0xfdff74b8>
		strcpy(p, wordlist[idx]);
		p += strlen(wordlist[idx]);
		*p = (i < mlen - 1) ? ' ' : 0;
		p++;
	}
	memzero(bits, sizeof(bits));
     628:	e0bff404 	addi	r2,fp,-48
     62c:	01400844 	movi	r5,33
     630:	1009883a 	mov	r4,r2
     634:	00017c40 	call	17c4 <memzero>

	return mnemo;
     638:	008000b4 	movhi	r2,2
     63c:	10a68a04 	addi	r2,r2,-26072
}
     640:	e6ffff04 	addi	sp,fp,-4
     644:	dfc00217 	ldw	ra,8(sp)
     648:	df000117 	ldw	fp,4(sp)
     64c:	dc000017 	ldw	r16,0(sp)
     650:	dec00304 	addi	sp,sp,12
     654:	f800283a 	ret

00000658 <mnemonic_to_seed>:

// passphrase must be at most 256 characters or code may crash
void mnemonic_to_seed(const char *mnemonic, const char *passphrase, uint8_t seed[512 / 8], void (*progress_callback)(uint32_t current, uint32_t total))
{
     658:	deffb104 	addi	sp,sp,-316
     65c:	dfc04e15 	stw	ra,312(sp)
     660:	df004d15 	stw	fp,308(sp)
     664:	dc004c15 	stw	r16,304(sp)
     668:	df004d04 	addi	fp,sp,308
     66c:	e13ffb15 	stw	r4,-20(fp)
     670:	e17ffc15 	stw	r5,-16(fp)
     674:	e1bffd15 	stw	r6,-12(fp)
     678:	e1fffe15 	stw	r7,-8(fp)
	int passphraselen = strlen(passphrase);
     67c:	e13ffc17 	ldw	r4,-16(fp)
     680:	0009aa40 	call	9aa4 <strlen>
     684:	e0bfb715 	stw	r2,-292(fp)
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
     688:	e13ffb17 	ldw	r4,-20(fp)
     68c:	0009aa40 	call	9aa4 <strlen>
     690:	e0bfb815 	stw	r2,-288(fp)
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     694:	e0bfb817 	ldw	r2,-288(fp)
     698:	10804008 	cmpgei	r2,r2,256
     69c:	1000401e 	bne	r2,zero,7a0 <mnemonic_to_seed+0x148>
     6a0:	e0bfb717 	ldw	r2,-292(fp)
     6a4:	10801008 	cmpgei	r2,r2,64
     6a8:	10003d1e 	bne	r2,zero,7a0 <mnemonic_to_seed+0x148>
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     6ac:	e03fb515 	stw	zero,-300(fp)
     6b0:	00003806 	br	794 <mnemonic_to_seed+0x13c>
			if (!bip39_cache[i].set) continue;
     6b4:	040000b4 	movhi	r16,2
     6b8:	84250904 	addi	r16,r16,-27612
     6bc:	e0bfb517 	ldw	r2,-300(fp)
     6c0:	01406044 	movi	r5,385
     6c4:	1009883a 	mov	r4,r2
     6c8:	000958c0 	call	958c <__mulsi3>
     6cc:	8085883a 	add	r2,r16,r2
     6d0:	10800003 	ldbu	r2,0(r2)
     6d4:	1080005c 	xori	r2,r2,1
     6d8:	10803fcc 	andi	r2,r2,255
     6dc:	1000251e 	bne	r2,zero,774 <mnemonic_to_seed+0x11c>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     6e0:	01406044 	movi	r5,385
     6e4:	e13fb517 	ldw	r4,-300(fp)
     6e8:	000958c0 	call	958c <__mulsi3>
     6ec:	1007883a 	mov	r3,r2
     6f0:	008000b4 	movhi	r2,2
     6f4:	10a50904 	addi	r2,r2,-27612
     6f8:	1885883a 	add	r2,r3,r2
     6fc:	10800044 	addi	r2,r2,1
     700:	e17ffb17 	ldw	r5,-20(fp)
     704:	1009883a 	mov	r4,r2
     708:	0009a400 	call	9a40 <strcmp>
     70c:	10001b1e 	bne	r2,zero,77c <mnemonic_to_seed+0x124>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     710:	01406044 	movi	r5,385
     714:	e13fb517 	ldw	r4,-300(fp)
     718:	000958c0 	call	958c <__mulsi3>
     71c:	10c04004 	addi	r3,r2,256
     720:	008000b4 	movhi	r2,2
     724:	10a50904 	addi	r2,r2,-27612
     728:	1885883a 	add	r2,r3,r2
     72c:	10800044 	addi	r2,r2,1
     730:	e17ffc17 	ldw	r5,-16(fp)
     734:	1009883a 	mov	r4,r2
     738:	0009a400 	call	9a40 <strcmp>
     73c:	1000111e 	bne	r2,zero,784 <mnemonic_to_seed+0x12c>
			// found the correct entry
			memcpy(seed, bip39_cache[i].seed, 512 / 8);
     740:	01406044 	movi	r5,385
     744:	e13fb517 	ldw	r4,-300(fp)
     748:	000958c0 	call	958c <__mulsi3>
     74c:	10c05004 	addi	r3,r2,320
     750:	008000b4 	movhi	r2,2
     754:	10a50904 	addi	r2,r2,-27612
     758:	1885883a 	add	r2,r3,r2
     75c:	10800044 	addi	r2,r2,1
     760:	01801004 	movi	r6,64
     764:	100b883a 	mov	r5,r2
     768:	e13ffd17 	ldw	r4,-12(fp)
     76c:	00095dc0 	call	95dc <memcpy>
			return;
     770:	00008d06 	br	9a8 <mnemonic_to_seed+0x350>
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
			if (!bip39_cache[i].set) continue;
     774:	0001883a 	nop
     778:	00000306 	br	788 <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].mnemonic, mnemonic) != 0) continue;
     77c:	0001883a 	nop
     780:	00000106 	br	788 <mnemonic_to_seed+0x130>
			if (strcmp(bip39_cache[i].passphrase, passphrase) != 0) continue;
     784:	0001883a 	nop
	int passphraselen = strlen(passphrase);
#if USE_BIP39_CACHE
	int mnemoniclen = strlen(mnemonic);
	// check cache
	if (mnemoniclen < 256 && passphraselen < 64) {
		for (int i = 0; i < BIP39_CACHE_SIZE; i++) {
     788:	e0bfb517 	ldw	r2,-300(fp)
     78c:	10800044 	addi	r2,r2,1
     790:	e0bfb515 	stw	r2,-300(fp)
     794:	e0bfb517 	ldw	r2,-300(fp)
     798:	10800110 	cmplti	r2,r2,4
     79c:	103fc51e 	bne	r2,zero,6b4 <__alt_mem_epcs_flash_controller+0xfdff76b4>
			return;
		}
	}
#endif
	uint8_t salt[8 + 256];
	memcpy(salt, "mnemonic", 8);
     7a0:	e0bfb904 	addi	r2,fp,-284
     7a4:	01800204 	movi	r6,8
     7a8:	01400074 	movhi	r5,1
     7ac:	2950a204 	addi	r5,r5,17032
     7b0:	1009883a 	mov	r4,r2
     7b4:	00095dc0 	call	95dc <memcpy>
	memcpy(salt + 8, passphrase, passphraselen);
     7b8:	e0bfb904 	addi	r2,fp,-284
     7bc:	10800204 	addi	r2,r2,8
     7c0:	e0ffb717 	ldw	r3,-292(fp)
     7c4:	180d883a 	mov	r6,r3
     7c8:	e17ffc17 	ldw	r5,-16(fp)
     7cc:	1009883a 	mov	r4,r2
     7d0:	00095dc0 	call	95dc <memcpy>
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
     7d4:	e13ffb17 	ldw	r4,-20(fp)
     7d8:	0009aa40 	call	9aa4 <strlen>
     7dc:	100b883a 	mov	r5,r2
     7e0:	e0bfb717 	ldw	r2,-292(fp)
     7e4:	10800204 	addi	r2,r2,8
     7e8:	e13fb904 	addi	r4,fp,-284
     7ec:	00c00044 	movi	r3,1
     7f0:	d8c00115 	stw	r3,4(sp)
     7f4:	d8800015 	stw	r2,0(sp)
     7f8:	200f883a 	mov	r7,r4
     7fc:	280d883a 	mov	r6,r5
     800:	e17ffb17 	ldw	r5,-20(fp)
     804:	010000b4 	movhi	r4,2
     808:	2126c604 	addi	r4,r4,-25832
     80c:	0001dac0 	call	1dac <pbkdf2_hmac_sha512_Init>
	if (progress_callback) {
     810:	e0bffe17 	ldw	r2,-8(fp)
     814:	10000426 	beq	r2,zero,828 <mnemonic_to_seed+0x1d0>
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
     818:	e0bffe17 	ldw	r2,-8(fp)
     81c:	01420004 	movi	r5,2048
     820:	0009883a 	mov	r4,zero
     824:	103ee83a 	callr	r2
	}
	for (int i = 0; i < 16; i++) {
     828:	e03fb615 	stw	zero,-296(fp)
     82c:	00001406 	br	880 <mnemonic_to_seed+0x228>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
     830:	01402004 	movi	r5,128
     834:	010000b4 	movhi	r4,2
     838:	2126c604 	addi	r4,r4,-25832
     83c:	00021200 	call	2120 <pbkdf2_hmac_sha512_Update>
		if (progress_callback) {
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	10000b26 	beq	r2,zero,874 <mnemonic_to_seed+0x21c>
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
     848:	e0bfb617 	ldw	r2,-296(fp)
     84c:	10800044 	addi	r2,r2,1
     850:	100492fa 	slli	r2,r2,11
     854:	1000010e 	bge	r2,zero,85c <mnemonic_to_seed+0x204>
     858:	108003c4 	addi	r2,r2,15
     85c:	1005d13a 	srai	r2,r2,4
     860:	1007883a 	mov	r3,r2
     864:	e0bffe17 	ldw	r2,-8(fp)
     868:	01420004 	movi	r5,2048
     86c:	1809883a 	mov	r4,r3
     870:	103ee83a 	callr	r2
	static CONFIDENTIAL PBKDF2_HMAC_SHA512_CTX pctx;
	pbkdf2_hmac_sha512_Init(&pctx, (const uint8_t *)mnemonic, strlen(mnemonic), salt, passphraselen + 8, 1);
	if (progress_callback) {
		progress_callback(0, BIP39_PBKDF2_ROUNDS);
	}
	for (int i = 0; i < 16; i++) {
     874:	e0bfb617 	ldw	r2,-296(fp)
     878:	10800044 	addi	r2,r2,1
     87c:	e0bfb615 	stw	r2,-296(fp)
     880:	e0bfb617 	ldw	r2,-296(fp)
     884:	10800410 	cmplti	r2,r2,16
     888:	103fe91e 	bne	r2,zero,830 <__alt_mem_epcs_flash_controller+0xfdff7830>
		pbkdf2_hmac_sha512_Update(&pctx, BIP39_PBKDF2_ROUNDS / 16);
		if (progress_callback) {
			progress_callback((i + 1) * BIP39_PBKDF2_ROUNDS / 16, BIP39_PBKDF2_ROUNDS);
		}
	}
	pbkdf2_hmac_sha512_Final(&pctx, seed);
     88c:	e17ffd17 	ldw	r5,-12(fp)
     890:	010000b4 	movhi	r4,2
     894:	2126c604 	addi	r4,r4,-25832
     898:	00022640 	call	2264 <pbkdf2_hmac_sha512_Final>
	memzero(salt, sizeof(salt));
     89c:	e0bfb904 	addi	r2,fp,-284
     8a0:	01404204 	movi	r5,264
     8a4:	1009883a 	mov	r4,r2
     8a8:	00017c40 	call	17c4 <memzero>
#if USE_BIP39_CACHE
	// store to cache
	if (mnemoniclen < 256 && passphraselen < 64) {
     8ac:	e0bfb817 	ldw	r2,-288(fp)
     8b0:	10804008 	cmpgei	r2,r2,256
     8b4:	10003c1e 	bne	r2,zero,9a8 <mnemonic_to_seed+0x350>
     8b8:	e0bfb717 	ldw	r2,-292(fp)
     8bc:	10801008 	cmpgei	r2,r2,64
     8c0:	1000391e 	bne	r2,zero,9a8 <mnemonic_to_seed+0x350>
		bip39_cache[bip39_cache_index].set = true;
     8c4:	d0a50b17 	ldw	r2,-27604(gp)
     8c8:	040000b4 	movhi	r16,2
     8cc:	84250904 	addi	r16,r16,-27612
     8d0:	01406044 	movi	r5,385
     8d4:	1009883a 	mov	r4,r2
     8d8:	000958c0 	call	958c <__mulsi3>
     8dc:	8085883a 	add	r2,r16,r2
     8e0:	00c00044 	movi	r3,1
     8e4:	10c00005 	stb	r3,0(r2)
		strcpy(bip39_cache[bip39_cache_index].mnemonic, mnemonic);
     8e8:	d0a50b17 	ldw	r2,-27604(gp)
     8ec:	01406044 	movi	r5,385
     8f0:	1009883a 	mov	r4,r2
     8f4:	000958c0 	call	958c <__mulsi3>
     8f8:	1007883a 	mov	r3,r2
     8fc:	008000b4 	movhi	r2,2
     900:	10a50904 	addi	r2,r2,-27612
     904:	1885883a 	add	r2,r3,r2
     908:	10800044 	addi	r2,r2,1
     90c:	e17ffb17 	ldw	r5,-20(fp)
     910:	1009883a 	mov	r4,r2
     914:	0009a780 	call	9a78 <strcpy>
		strcpy(bip39_cache[bip39_cache_index].passphrase, passphrase);
     918:	d0a50b17 	ldw	r2,-27604(gp)
     91c:	01406044 	movi	r5,385
     920:	1009883a 	mov	r4,r2
     924:	000958c0 	call	958c <__mulsi3>
     928:	10c04004 	addi	r3,r2,256
     92c:	008000b4 	movhi	r2,2
     930:	10a50904 	addi	r2,r2,-27612
     934:	1885883a 	add	r2,r3,r2
     938:	10800044 	addi	r2,r2,1
     93c:	e17ffc17 	ldw	r5,-16(fp)
     940:	1009883a 	mov	r4,r2
     944:	0009a780 	call	9a78 <strcpy>
		memcpy(bip39_cache[bip39_cache_index].seed, seed, 512 / 8);
     948:	d0a50b17 	ldw	r2,-27604(gp)
     94c:	01406044 	movi	r5,385
     950:	1009883a 	mov	r4,r2
     954:	000958c0 	call	958c <__mulsi3>
     958:	10c05004 	addi	r3,r2,320
     95c:	008000b4 	movhi	r2,2
     960:	10a50904 	addi	r2,r2,-27612
     964:	1885883a 	add	r2,r3,r2
     968:	10800044 	addi	r2,r2,1
     96c:	01801004 	movi	r6,64
     970:	e17ffd17 	ldw	r5,-12(fp)
     974:	1009883a 	mov	r4,r2
     978:	00095dc0 	call	95dc <memcpy>
		bip39_cache_index = (bip39_cache_index + 1) % BIP39_CACHE_SIZE;
     97c:	d0a50b17 	ldw	r2,-27604(gp)
     980:	10c00044 	addi	r3,r2,1
     984:	00a00034 	movhi	r2,32768
     988:	108000c4 	addi	r2,r2,3
     98c:	1884703a 	and	r2,r3,r2
     990:	1000040e 	bge	r2,zero,9a4 <mnemonic_to_seed+0x34c>
     994:	10bfffc4 	addi	r2,r2,-1
     998:	00ffff04 	movi	r3,-4
     99c:	10c4b03a 	or	r2,r2,r3
     9a0:	10800044 	addi	r2,r2,1
     9a4:	d0a50b15 	stw	r2,-27604(gp)
	}
#endif
}
     9a8:	e6ffff04 	addi	sp,fp,-4
     9ac:	dfc00217 	ldw	ra,8(sp)
     9b0:	df000117 	ldw	fp,4(sp)
     9b4:	dc000017 	ldw	r16,0(sp)
     9b8:	dec00304 	addi	sp,sp,12
     9bc:	f800283a 	ret

000009c0 <mnemonic_to_entropy>:

int mnemonic_to_entropy(const char *mnemonic, uint8_t* entropy)
{
     9c0:	deffeb04 	addi	sp,sp,-84
     9c4:	dfc01415 	stw	ra,80(sp)
     9c8:	df001315 	stw	fp,76(sp)
     9cc:	df001304 	addi	fp,sp,76
     9d0:	e13ffe15 	stw	r4,-8(fp)
     9d4:	e17fff15 	stw	r5,-4(fp)
	if (!mnemonic) {
     9d8:	e0bffe17 	ldw	r2,-8(fp)
     9dc:	1000021e 	bne	r2,zero,9e8 <mnemonic_to_entropy+0x28>
		return 0;
     9e0:	0005883a 	mov	r2,zero
     9e4:	0000be06 	br	ce0 <mnemonic_to_entropy+0x320>
	}

	uint32_t i = 0, n = 0;
     9e8:	e03fed15 	stw	zero,-76(fp)
     9ec:	e03fee15 	stw	zero,-72(fp)

	while (mnemonic[i]) {
     9f0:	00000f06 	br	a30 <mnemonic_to_entropy+0x70>
		if (mnemonic[i] == ' ') {
     9f4:	e0fffe17 	ldw	r3,-8(fp)
     9f8:	e0bfed17 	ldw	r2,-76(fp)
     9fc:	1885883a 	add	r2,r3,r2
     a00:	10800003 	ldbu	r2,0(r2)
     a04:	10803fcc 	andi	r2,r2,255
     a08:	1080201c 	xori	r2,r2,128
     a0c:	10bfe004 	addi	r2,r2,-128
     a10:	10800818 	cmpnei	r2,r2,32
     a14:	1000031e 	bne	r2,zero,a24 <mnemonic_to_entropy+0x64>
			n++;
     a18:	e0bfee17 	ldw	r2,-72(fp)
     a1c:	10800044 	addi	r2,r2,1
     a20:	e0bfee15 	stw	r2,-72(fp)
		}
		i++;
     a24:	e0bfed17 	ldw	r2,-76(fp)
     a28:	10800044 	addi	r2,r2,1
     a2c:	e0bfed15 	stw	r2,-76(fp)
		return 0;
	}

	uint32_t i = 0, n = 0;

	while (mnemonic[i]) {
     a30:	e0fffe17 	ldw	r3,-8(fp)
     a34:	e0bfed17 	ldw	r2,-76(fp)
     a38:	1885883a 	add	r2,r3,r2
     a3c:	10800003 	ldbu	r2,0(r2)
     a40:	10803fcc 	andi	r2,r2,255
     a44:	1080201c 	xori	r2,r2,128
     a48:	10bfe004 	addi	r2,r2,-128
     a4c:	103fe91e 	bne	r2,zero,9f4 <__alt_mem_epcs_flash_controller+0xfdff79f4>
		if (mnemonic[i] == ' ') {
			n++;
		}
		i++;
	}
	n++;
     a50:	e0bfee17 	ldw	r2,-72(fp)
     a54:	10800044 	addi	r2,r2,1
     a58:	e0bfee15 	stw	r2,-72(fp)

	// check number of words
	if (n != 12 && n != 18 && n != 24) {
     a5c:	e0bfee17 	ldw	r2,-72(fp)
     a60:	10800320 	cmpeqi	r2,r2,12
     a64:	1000081e 	bne	r2,zero,a88 <mnemonic_to_entropy+0xc8>
     a68:	e0bfee17 	ldw	r2,-72(fp)
     a6c:	108004a0 	cmpeqi	r2,r2,18
     a70:	1000051e 	bne	r2,zero,a88 <mnemonic_to_entropy+0xc8>
     a74:	e0bfee17 	ldw	r2,-72(fp)
     a78:	10800620 	cmpeqi	r2,r2,24
     a7c:	1000021e 	bne	r2,zero,a88 <mnemonic_to_entropy+0xc8>
		return 0;
     a80:	0005883a 	mov	r2,zero
     a84:	00009606 	br	ce0 <mnemonic_to_entropy+0x320>
	}

	char current_word[10];
	uint32_t j, k, ki, bi = 0;
     a88:	e03ff215 	stw	zero,-56(fp)
	uint8_t bits[32 + 1];

	memzero(bits, sizeof(bits));
     a8c:	e0bff584 	addi	r2,fp,-42
     a90:	01400844 	movi	r5,33
     a94:	1009883a 	mov	r4,r2
     a98:	00017c40 	call	17c4 <memzero>
	i = 0;
     a9c:	e03fed15 	stw	zero,-76(fp)
	while (mnemonic[i]) {
     aa0:	00007506 	br	c78 <mnemonic_to_entropy+0x2b8>
		j = 0;
     aa4:	e03fef15 	stw	zero,-68(fp)
		while (mnemonic[i] != ' ' && mnemonic[i] != 0) {
     aa8:	00001306 	br	af8 <mnemonic_to_entropy+0x138>
			if (j >= sizeof(current_word) - 1) {
     aac:	e0bfef17 	ldw	r2,-68(fp)
     ab0:	10800270 	cmpltui	r2,r2,9
     ab4:	1000021e 	bne	r2,zero,ac0 <mnemonic_to_entropy+0x100>
				return 0;
     ab8:	0005883a 	mov	r2,zero
     abc:	00008806 	br	ce0 <mnemonic_to_entropy+0x320>
			}
			current_word[j] = mnemonic[i];
     ac0:	e0fffe17 	ldw	r3,-8(fp)
     ac4:	e0bfed17 	ldw	r2,-76(fp)
     ac8:	1885883a 	add	r2,r3,r2
     acc:	10c00003 	ldbu	r3,0(r2)
     ad0:	e13ff304 	addi	r4,fp,-52
     ad4:	e0bfef17 	ldw	r2,-68(fp)
     ad8:	2085883a 	add	r2,r4,r2
     adc:	10c00005 	stb	r3,0(r2)
			i++; j++;
     ae0:	e0bfed17 	ldw	r2,-76(fp)
     ae4:	10800044 	addi	r2,r2,1
     ae8:	e0bfed15 	stw	r2,-76(fp)
     aec:	e0bfef17 	ldw	r2,-68(fp)
     af0:	10800044 	addi	r2,r2,1
     af4:	e0bfef15 	stw	r2,-68(fp)

	memzero(bits, sizeof(bits));
	i = 0;
	while (mnemonic[i]) {
		j = 0;
		while (mnemonic[i] != ' ' && mnemonic[i] != 0) {
     af8:	e0fffe17 	ldw	r3,-8(fp)
     afc:	e0bfed17 	ldw	r2,-76(fp)
     b00:	1885883a 	add	r2,r3,r2
     b04:	10800003 	ldbu	r2,0(r2)
     b08:	10803fcc 	andi	r2,r2,255
     b0c:	1080201c 	xori	r2,r2,128
     b10:	10bfe004 	addi	r2,r2,-128
     b14:	10800820 	cmpeqi	r2,r2,32
     b18:	1000081e 	bne	r2,zero,b3c <mnemonic_to_entropy+0x17c>
     b1c:	e0fffe17 	ldw	r3,-8(fp)
     b20:	e0bfed17 	ldw	r2,-76(fp)
     b24:	1885883a 	add	r2,r3,r2
     b28:	10800003 	ldbu	r2,0(r2)
     b2c:	10803fcc 	andi	r2,r2,255
     b30:	1080201c 	xori	r2,r2,128
     b34:	10bfe004 	addi	r2,r2,-128
     b38:	103fdc1e 	bne	r2,zero,aac <__alt_mem_epcs_flash_controller+0xfdff7aac>
				return 0;
			}
			current_word[j] = mnemonic[i];
			i++; j++;
		}
		current_word[j] = 0;
     b3c:	e0fff304 	addi	r3,fp,-52
     b40:	e0bfef17 	ldw	r2,-68(fp)
     b44:	1885883a 	add	r2,r3,r2
     b48:	10000005 	stb	zero,0(r2)
		if (mnemonic[i] != 0) {
     b4c:	e0fffe17 	ldw	r3,-8(fp)
     b50:	e0bfed17 	ldw	r2,-76(fp)
     b54:	1885883a 	add	r2,r3,r2
     b58:	10800003 	ldbu	r2,0(r2)
     b5c:	10803fcc 	andi	r2,r2,255
     b60:	1080201c 	xori	r2,r2,128
     b64:	10bfe004 	addi	r2,r2,-128
     b68:	10000326 	beq	r2,zero,b78 <mnemonic_to_entropy+0x1b8>
			i++;
     b6c:	e0bfed17 	ldw	r2,-76(fp)
     b70:	10800044 	addi	r2,r2,1
     b74:	e0bfed15 	stw	r2,-76(fp)
		}
		k = 0;
     b78:	e03ff015 	stw	zero,-64(fp)
		for (;;) {
			if (!wordlist[k]) { // word not found
     b7c:	00800074 	movhi	r2,1
     b80:	1088a104 	addi	r2,r2,8836
     b84:	e0fff017 	ldw	r3,-64(fp)
     b88:	18c7883a 	add	r3,r3,r3
     b8c:	18c7883a 	add	r3,r3,r3
     b90:	10c5883a 	add	r2,r2,r3
     b94:	10800017 	ldw	r2,0(r2)
     b98:	1000021e 	bne	r2,zero,ba4 <mnemonic_to_entropy+0x1e4>
				return 0;
     b9c:	0005883a 	mov	r2,zero
     ba0:	00004f06 	br	ce0 <mnemonic_to_entropy+0x320>
			}
			if (strcmp(current_word, wordlist[k]) == 0) { // word found on index k
     ba4:	00800074 	movhi	r2,1
     ba8:	1088a104 	addi	r2,r2,8836
     bac:	e0fff017 	ldw	r3,-64(fp)
     bb0:	18c7883a 	add	r3,r3,r3
     bb4:	18c7883a 	add	r3,r3,r3
     bb8:	10c5883a 	add	r2,r2,r3
     bbc:	10c00017 	ldw	r3,0(r2)
     bc0:	e0bff304 	addi	r2,fp,-52
     bc4:	180b883a 	mov	r5,r3
     bc8:	1009883a 	mov	r4,r2
     bcc:	0009a400 	call	9a40 <strcmp>
     bd0:	1000251e 	bne	r2,zero,c68 <mnemonic_to_entropy+0x2a8>
				for (ki = 0; ki < 11; ki++) {
     bd4:	e03ff115 	stw	zero,-60(fp)
     bd8:	00001f06 	br	c58 <mnemonic_to_entropy+0x298>
					if (k & (1 << (10 - ki))) {
     bdc:	00c00284 	movi	r3,10
     be0:	e0bff117 	ldw	r2,-60(fp)
     be4:	1885c83a 	sub	r2,r3,r2
     be8:	00c00044 	movi	r3,1
     bec:	1884983a 	sll	r2,r3,r2
     bf0:	1007883a 	mov	r3,r2
     bf4:	e0bff017 	ldw	r2,-64(fp)
     bf8:	1884703a 	and	r2,r3,r2
     bfc:	10001026 	beq	r2,zero,c40 <mnemonic_to_entropy+0x280>
						bits[bi / 8] |= 1 << (7 - (bi % 8));
     c00:	e0bff217 	ldw	r2,-56(fp)
     c04:	1004d0fa 	srli	r2,r2,3
     c08:	e0fff584 	addi	r3,fp,-42
     c0c:	1887883a 	add	r3,r3,r2
     c10:	18c00003 	ldbu	r3,0(r3)
     c14:	180b883a 	mov	r5,r3
     c18:	e0fff217 	ldw	r3,-56(fp)
     c1c:	00c6303a 	nor	r3,zero,r3
     c20:	18c001cc 	andi	r3,r3,7
     c24:	01000044 	movi	r4,1
     c28:	20c6983a 	sll	r3,r4,r3
     c2c:	28c6b03a 	or	r3,r5,r3
     c30:	1809883a 	mov	r4,r3
     c34:	e0fff584 	addi	r3,fp,-42
     c38:	1885883a 	add	r2,r3,r2
     c3c:	11000005 	stb	r4,0(r2)
					}
					bi++;
     c40:	e0bff217 	ldw	r2,-56(fp)
     c44:	10800044 	addi	r2,r2,1
     c48:	e0bff215 	stw	r2,-56(fp)
		for (;;) {
			if (!wordlist[k]) { // word not found
				return 0;
			}
			if (strcmp(current_word, wordlist[k]) == 0) { // word found on index k
				for (ki = 0; ki < 11; ki++) {
     c4c:	e0bff117 	ldw	r2,-60(fp)
     c50:	10800044 	addi	r2,r2,1
     c54:	e0bff115 	stw	r2,-60(fp)
     c58:	e0bff117 	ldw	r2,-60(fp)
     c5c:	108002f0 	cmpltui	r2,r2,11
     c60:	103fde1e 	bne	r2,zero,bdc <__alt_mem_epcs_flash_controller+0xfdff7bdc>
					if (k & (1 << (10 - ki))) {
						bits[bi / 8] |= 1 << (7 - (bi % 8));
					}
					bi++;
				}
				break;
     c64:	00000406 	br	c78 <mnemonic_to_entropy+0x2b8>
			}
			k++;
     c68:	e0bff017 	ldw	r2,-64(fp)
     c6c:	10800044 	addi	r2,r2,1
     c70:	e0bff015 	stw	r2,-64(fp)
		}
     c74:	003fc106 	br	b7c <__alt_mem_epcs_flash_controller+0xfdff7b7c>
	uint32_t j, k, ki, bi = 0;
	uint8_t bits[32 + 1];

	memzero(bits, sizeof(bits));
	i = 0;
	while (mnemonic[i]) {
     c78:	e0fffe17 	ldw	r3,-8(fp)
     c7c:	e0bfed17 	ldw	r2,-76(fp)
     c80:	1885883a 	add	r2,r3,r2
     c84:	10800003 	ldbu	r2,0(r2)
     c88:	10803fcc 	andi	r2,r2,255
     c8c:	1080201c 	xori	r2,r2,128
     c90:	10bfe004 	addi	r2,r2,-128
     c94:	103f831e 	bne	r2,zero,aa4 <__alt_mem_epcs_flash_controller+0xfdff7aa4>
				break;
			}
			k++;
		}
	}
	if (bi != n * 11) {
     c98:	014002c4 	movi	r5,11
     c9c:	e13fee17 	ldw	r4,-72(fp)
     ca0:	000958c0 	call	958c <__mulsi3>
     ca4:	1007883a 	mov	r3,r2
     ca8:	e0bff217 	ldw	r2,-56(fp)
     cac:	18800226 	beq	r3,r2,cb8 <mnemonic_to_entropy+0x2f8>
		return 0;
     cb0:	0005883a 	mov	r2,zero
     cb4:	00000a06 	br	ce0 <mnemonic_to_entropy+0x320>
	}
	memcpy(entropy, bits, sizeof(bits));
     cb8:	e0bfff17 	ldw	r2,-4(fp)
     cbc:	1009883a 	mov	r4,r2
     cc0:	e0bff584 	addi	r2,fp,-42
     cc4:	00c00844 	movi	r3,33
     cc8:	180d883a 	mov	r6,r3
     ccc:	100b883a 	mov	r5,r2
     cd0:	00095dc0 	call	95dc <memcpy>
	return n * 11;
     cd4:	014002c4 	movi	r5,11
     cd8:	e13fee17 	ldw	r4,-72(fp)
     cdc:	000958c0 	call	958c <__mulsi3>
}
     ce0:	e037883a 	mov	sp,fp
     ce4:	dfc00117 	ldw	ra,4(sp)
     ce8:	df000017 	ldw	fp,0(sp)
     cec:	dec00204 	addi	sp,sp,8
     cf0:	f800283a 	ret

00000cf4 <hd_gen_master>:
//    btc_privkey_cleanse(&key);
//    return true;
//}

btc_bool hd_gen_master(const btc_chainparams* chain, char* masterkeyhex, size_t strsize)
{
     cf4:	deff9704 	addi	sp,sp,-420
     cf8:	dfc06815 	stw	ra,416(sp)
     cfc:	df006715 	stw	fp,412(sp)
     d00:	df006704 	addi	fp,sp,412
     d04:	e13ffd15 	stw	r4,-12(fp)
     d08:	e17ffe15 	stw	r5,-8(fp)
     d0c:	e1bfff15 	stw	r6,-4(fp)
    btc_hdnode node;
    uint8_t seed[32];
    random_buffer(seed, 32); // I REMOVED ASSERT FROM HERE
     d10:	e0bff504 	addi	r2,fp,-44
     d14:	01400804 	movi	r5,32
     d18:	1009883a 	mov	r4,r2
     d1c:	00026140 	call	2614 <random_buffer>
    btc_hdnode_from_seed(seed, 32, &node);
     d20:	e0bff504 	addi	r2,fp,-44
     d24:	e1bf9904 	addi	r6,fp,-412
     d28:	01400804 	movi	r5,32
     d2c:	1009883a 	mov	r4,r2
     d30:	000026c0 	call	26c <btc_hdnode_from_seed>
//    memset(seed, 0, 32);
//    btc_hdnode_serialize_private(&node, chain, masterkeyhex, strsize);
//    memset(&node, 0, sizeof(node));
    return true;
     d34:	00800044 	movi	r2,1
}
     d38:	e037883a 	mov	sp,fp
     d3c:	dfc00117 	ldw	ra,4(sp)
     d40:	df000017 	ldw	fp,0(sp)
     d44:	dec00204 	addi	sp,sp,8
     d48:	f800283a 	ret

00000d4c <trezor_hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\options.h"
#include "..\Include\memzero.h"

void trezor_hmac_sha256_Init(HMAC_SHA256_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
     d4c:	defffa04 	addi	sp,sp,-24
     d50:	dfc00515 	stw	ra,20(sp)
     d54:	df000415 	stw	fp,16(sp)
     d58:	df000404 	addi	fp,sp,16
     d5c:	e13ffd15 	stw	r4,-12(fp)
     d60:	e17ffe15 	stw	r5,-8(fp)
     d64:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA256_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA256_BLOCK_LENGTH);
     d68:	01801004 	movi	r6,64
     d6c:	000b883a 	mov	r5,zero
     d70:	010000b4 	movhi	r4,2
     d74:	21271704 	addi	r4,r4,-25508
     d78:	00096040 	call	9604 <memset>
	if (keylen > SHA256_BLOCK_LENGTH) {
     d7c:	e0bfff17 	ldw	r2,-4(fp)
     d80:	10801070 	cmpltui	r2,r2,65
     d84:	1000061e 	bne	r2,zero,da0 <trezor_hmac_sha256_Init+0x54>
		trezor_sha256_Raw(key, keylen, i_key_pad);
     d88:	018000b4 	movhi	r6,2
     d8c:	31a71704 	addi	r6,r6,-25508
     d90:	e17fff17 	ldw	r5,-4(fp)
     d94:	e13ffe17 	ldw	r4,-8(fp)
     d98:	000726c0 	call	726c <trezor_sha256_Raw>
     d9c:	00000506 	br	db4 <trezor_hmac_sha256_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
     da0:	e1bfff17 	ldw	r6,-4(fp)
     da4:	e17ffe17 	ldw	r5,-8(fp)
     da8:	010000b4 	movhi	r4,2
     dac:	21271704 	addi	r4,r4,-25508
     db0:	00095dc0 	call	95dc <memcpy>
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     db4:	e03ffc15 	stw	zero,-16(fp)
     db8:	00001a06 	br	e24 <trezor_hmac_sha256_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
     dbc:	008000b4 	movhi	r2,2
     dc0:	10a71704 	addi	r2,r2,-25508
     dc4:	e0fffc17 	ldw	r3,-16(fp)
     dc8:	10c5883a 	add	r2,r2,r3
     dcc:	10800003 	ldbu	r2,0(r2)
     dd0:	1080171c 	xori	r2,r2,92
     dd4:	1009883a 	mov	r4,r2
     dd8:	e0fffd17 	ldw	r3,-12(fp)
     ddc:	e0bffc17 	ldw	r2,-16(fp)
     de0:	1885883a 	add	r2,r3,r2
     de4:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
     de8:	008000b4 	movhi	r2,2
     dec:	10a71704 	addi	r2,r2,-25508
     df0:	e0fffc17 	ldw	r3,-16(fp)
     df4:	10c5883a 	add	r2,r2,r3
     df8:	10800003 	ldbu	r2,0(r2)
     dfc:	10800d9c 	xori	r2,r2,54
     e00:	1009883a 	mov	r4,r2
     e04:	008000b4 	movhi	r2,2
     e08:	10a71704 	addi	r2,r2,-25508
     e0c:	e0fffc17 	ldw	r3,-16(fp)
     e10:	10c5883a 	add	r2,r2,r3
     e14:	11000005 	stb	r4,0(r2)
	if (keylen > SHA256_BLOCK_LENGTH) {
		trezor_sha256_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA256_BLOCK_LENGTH; i++) {
     e18:	e0bffc17 	ldw	r2,-16(fp)
     e1c:	10800044 	addi	r2,r2,1
     e20:	e0bffc15 	stw	r2,-16(fp)
     e24:	e0bffc17 	ldw	r2,-16(fp)
     e28:	10801010 	cmplti	r2,r2,64
     e2c:	103fe31e 	bne	r2,zero,dbc <__alt_mem_epcs_flash_controller+0xfdff7dbc>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	trezor_sha256_Init(&(hctx->ctx));
     e30:	e0bffd17 	ldw	r2,-12(fp)
     e34:	10801004 	addi	r2,r2,64
     e38:	1009883a 	mov	r4,r2
     e3c:	00063f40 	call	63f4 <trezor_sha256_Init>
	trezor_sha256_Update(&(hctx->ctx), i_key_pad, SHA256_BLOCK_LENGTH);
     e40:	e0bffd17 	ldw	r2,-12(fp)
     e44:	10801004 	addi	r2,r2,64
     e48:	01801004 	movi	r6,64
     e4c:	014000b4 	movhi	r5,2
     e50:	29671704 	addi	r5,r5,-25508
     e54:	1009883a 	mov	r4,r2
     e58:	0006a2c0 	call	6a2c <trezor_sha256_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
     e5c:	01401004 	movi	r5,64
     e60:	010000b4 	movhi	r4,2
     e64:	21271704 	addi	r4,r4,-25508
     e68:	00017c40 	call	17c4 <memzero>
}
     e6c:	0001883a 	nop
     e70:	e037883a 	mov	sp,fp
     e74:	dfc00117 	ldw	ra,4(sp)
     e78:	df000017 	ldw	fp,0(sp)
     e7c:	dec00204 	addi	sp,sp,8
     e80:	f800283a 	ret

00000e84 <trezor_hmac_sha256_Update>:

void trezor_hmac_sha256_Update(HMAC_SHA256_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
     e84:	defffb04 	addi	sp,sp,-20
     e88:	dfc00415 	stw	ra,16(sp)
     e8c:	df000315 	stw	fp,12(sp)
     e90:	df000304 	addi	fp,sp,12
     e94:	e13ffd15 	stw	r4,-12(fp)
     e98:	e17ffe15 	stw	r5,-8(fp)
     e9c:	e1bfff15 	stw	r6,-4(fp)
	trezor_sha256_Update(&(hctx->ctx), msg, msglen);
     ea0:	e0bffd17 	ldw	r2,-12(fp)
     ea4:	10801004 	addi	r2,r2,64
     ea8:	e1bfff17 	ldw	r6,-4(fp)
     eac:	e17ffe17 	ldw	r5,-8(fp)
     eb0:	1009883a 	mov	r4,r2
     eb4:	0006a2c0 	call	6a2c <trezor_sha256_Update>
}
     eb8:	0001883a 	nop
     ebc:	e037883a 	mov	sp,fp
     ec0:	dfc00117 	ldw	ra,4(sp)
     ec4:	df000017 	ldw	fp,0(sp)
     ec8:	dec00204 	addi	sp,sp,8
     ecc:	f800283a 	ret

00000ed0 <trezor_hmac_sha256_Final>:

void trezor_hmac_sha256_Final(HMAC_SHA256_CTX *hctx, uint8_t *hmac)
{
     ed0:	defffc04 	addi	sp,sp,-16
     ed4:	dfc00315 	stw	ra,12(sp)
     ed8:	df000215 	stw	fp,8(sp)
     edc:	df000204 	addi	fp,sp,8
     ee0:	e13ffe15 	stw	r4,-8(fp)
     ee4:	e17fff15 	stw	r5,-4(fp)
	trezor_sha256_Final(&(hctx->ctx), hmac);
     ee8:	e0bffe17 	ldw	r2,-8(fp)
     eec:	10801004 	addi	r2,r2,64
     ef0:	e17fff17 	ldw	r5,-4(fp)
     ef4:	1009883a 	mov	r4,r2
     ef8:	0006e340 	call	6e34 <trezor_sha256_Final>
	trezor_sha256_Init(&(hctx->ctx));
     efc:	e0bffe17 	ldw	r2,-8(fp)
     f00:	10801004 	addi	r2,r2,64
     f04:	1009883a 	mov	r4,r2
     f08:	00063f40 	call	63f4 <trezor_sha256_Init>
	trezor_sha256_Update(&(hctx->ctx), hctx->o_key_pad, SHA256_BLOCK_LENGTH);
     f0c:	e0bffe17 	ldw	r2,-8(fp)
     f10:	10801004 	addi	r2,r2,64
     f14:	e0fffe17 	ldw	r3,-8(fp)
     f18:	01801004 	movi	r6,64
     f1c:	180b883a 	mov	r5,r3
     f20:	1009883a 	mov	r4,r2
     f24:	0006a2c0 	call	6a2c <trezor_sha256_Update>
	trezor_sha256_Update(&(hctx->ctx), hmac, SHA256_DIGEST_LENGTH);
     f28:	e0bffe17 	ldw	r2,-8(fp)
     f2c:	10801004 	addi	r2,r2,64
     f30:	01800804 	movi	r6,32
     f34:	e17fff17 	ldw	r5,-4(fp)
     f38:	1009883a 	mov	r4,r2
     f3c:	0006a2c0 	call	6a2c <trezor_sha256_Update>
	trezor_sha256_Final(&(hctx->ctx), hmac);
     f40:	e0bffe17 	ldw	r2,-8(fp)
     f44:	10801004 	addi	r2,r2,64
     f48:	e17fff17 	ldw	r5,-4(fp)
     f4c:	1009883a 	mov	r4,r2
     f50:	0006e340 	call	6e34 <trezor_sha256_Final>
	memzero(hctx, sizeof(HMAC_SHA256_CTX));
     f54:	01402a04 	movi	r5,168
     f58:	e13ffe17 	ldw	r4,-8(fp)
     f5c:	00017c40 	call	17c4 <memzero>
}
     f60:	0001883a 	nop
     f64:	e037883a 	mov	sp,fp
     f68:	dfc00117 	ldw	ra,4(sp)
     f6c:	df000017 	ldw	fp,0(sp)
     f70:	dec00204 	addi	sp,sp,8
     f74:	f800283a 	ret

00000f78 <trezor_hmac_sha256>:

void trezor_hmac_sha256(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
     f78:	defffa04 	addi	sp,sp,-24
     f7c:	dfc00515 	stw	ra,20(sp)
     f80:	df000415 	stw	fp,16(sp)
     f84:	df000404 	addi	fp,sp,16
     f88:	e13ffc15 	stw	r4,-16(fp)
     f8c:	e17ffd15 	stw	r5,-12(fp)
     f90:	e1bffe15 	stw	r6,-8(fp)
     f94:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL HMAC_SHA256_CTX hctx;
	trezor_hmac_sha256_Init(&hctx, key, keylen);
     f98:	e1bffd17 	ldw	r6,-12(fp)
     f9c:	e17ffc17 	ldw	r5,-16(fp)
     fa0:	010000b4 	movhi	r4,2
     fa4:	21272704 	addi	r4,r4,-25444
     fa8:	0000d4c0 	call	d4c <trezor_hmac_sha256_Init>
	trezor_hmac_sha256_Update(&hctx, msg, msglen);
     fac:	e1bfff17 	ldw	r6,-4(fp)
     fb0:	e17ffe17 	ldw	r5,-8(fp)
     fb4:	010000b4 	movhi	r4,2
     fb8:	21272704 	addi	r4,r4,-25444
     fbc:	0000e840 	call	e84 <trezor_hmac_sha256_Update>
	trezor_hmac_sha256_Final(&hctx, hmac);
     fc0:	e1400217 	ldw	r5,8(fp)
     fc4:	010000b4 	movhi	r4,2
     fc8:	21272704 	addi	r4,r4,-25444
     fcc:	0000ed00 	call	ed0 <trezor_hmac_sha256_Final>
}
     fd0:	0001883a 	nop
     fd4:	e037883a 	mov	sp,fp
     fd8:	dfc00117 	ldw	ra,4(sp)
     fdc:	df000017 	ldw	fp,0(sp)
     fe0:	dec00204 	addi	sp,sp,8
     fe4:	f800283a 	ret

00000fe8 <trezor_hmac_sha256_prepare>:

void trezor_hmac_sha256_prepare(const uint8_t *key, const uint32_t keylen, uint32_t *opad_digest, uint32_t *ipad_digest)
{
     fe8:	defff604 	addi	sp,sp,-40
     fec:	dfc00915 	stw	ra,36(sp)
     ff0:	df000815 	stw	fp,32(sp)
     ff4:	df000804 	addi	fp,sp,32
     ff8:	e13ffc15 	stw	r4,-16(fp)
     ffc:	e17ffd15 	stw	r5,-12(fp)
    1000:	e1bffe15 	stw	r6,-8(fp)
    1004:	e1ffff15 	stw	r7,-4(fp)
	static CONFIDENTIAL uint32_t key_pad[SHA256_BLOCK_LENGTH/sizeof(uint32_t)];

	memzero(key_pad, sizeof(key_pad));
    1008:	01401004 	movi	r5,64
    100c:	010000b4 	movhi	r4,2
    1010:	21275104 	addi	r4,r4,-25276
    1014:	00017c40 	call	17c4 <memzero>
	if (keylen > SHA256_BLOCK_LENGTH) {
    1018:	e0bffd17 	ldw	r2,-12(fp)
    101c:	10801070 	cmpltui	r2,r2,65
    1020:	10000e1e 	bne	r2,zero,105c <trezor_hmac_sha256_prepare+0x74>
		static CONFIDENTIAL SHA256_CTX context;
		trezor_sha256_Init(&context);
    1024:	010000b4 	movhi	r4,2
    1028:	21276104 	addi	r4,r4,-25212
    102c:	00063f40 	call	63f4 <trezor_sha256_Init>
		trezor_sha256_Update(&context, key, keylen);
    1030:	e1bffd17 	ldw	r6,-12(fp)
    1034:	e17ffc17 	ldw	r5,-16(fp)
    1038:	010000b4 	movhi	r4,2
    103c:	21276104 	addi	r4,r4,-25212
    1040:	0006a2c0 	call	6a2c <trezor_sha256_Update>
		trezor_sha256_Final(&context, (uint8_t*)key_pad);
    1044:	014000b4 	movhi	r5,2
    1048:	29675104 	addi	r5,r5,-25276
    104c:	010000b4 	movhi	r4,2
    1050:	21276104 	addi	r4,r4,-25212
    1054:	0006e340 	call	6e34 <trezor_sha256_Final>
    1058:	00000506 	br	1070 <trezor_hmac_sha256_prepare+0x88>
	} else {
		memcpy(key_pad, key, keylen);
    105c:	e1bffd17 	ldw	r6,-12(fp)
    1060:	e17ffc17 	ldw	r5,-16(fp)
    1064:	010000b4 	movhi	r4,2
    1068:	21275104 	addi	r4,r4,-25276
    106c:	00095dc0 	call	95dc <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    1070:	e03ff815 	stw	zero,-32(fp)
    1074:	00002506 	br	110c <trezor_hmac_sha256_prepare+0x124>
		uint32_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE32(key_pad[i], data);
    1078:	008000b4 	movhi	r2,2
    107c:	10a75104 	addi	r2,r2,-25276
    1080:	e0fff817 	ldw	r3,-32(fp)
    1084:	18c7883a 	add	r3,r3,r3
    1088:	18c7883a 	add	r3,r3,r3
    108c:	10c5883a 	add	r2,r2,r3
    1090:	10800017 	ldw	r2,0(r2)
    1094:	e0bffa15 	stw	r2,-24(fp)
    1098:	e0bffa17 	ldw	r2,-24(fp)
    109c:	1004143a 	roli	r2,r2,16
    10a0:	e0bffa15 	stw	r2,-24(fp)
    10a4:	e0fffa17 	ldw	r3,-24(fp)
    10a8:	00bfc074 	movhi	r2,65281
    10ac:	10bfc004 	addi	r2,r2,-256
    10b0:	1884703a 	and	r2,r3,r2
    10b4:	1006d23a 	srli	r3,r2,8
    10b8:	e13ffa17 	ldw	r4,-24(fp)
    10bc:	00803ff4 	movhi	r2,255
    10c0:	10803fc4 	addi	r2,r2,255
    10c4:	2084703a 	and	r2,r4,r2
    10c8:	1004923a 	slli	r2,r2,8
    10cc:	1884b03a 	or	r2,r3,r2
    10d0:	e0bffb15 	stw	r2,-20(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
    10d4:	e0fffb17 	ldw	r3,-20(fp)
    10d8:	00971734 	movhi	r2,23644
    10dc:	10971704 	addi	r2,r2,23644
    10e0:	1888f03a 	xor	r4,r3,r2
    10e4:	008000b4 	movhi	r2,2
    10e8:	10a75104 	addi	r2,r2,-25276
    10ec:	e0fff817 	ldw	r3,-32(fp)
    10f0:	18c7883a 	add	r3,r3,r3
    10f4:	18c7883a 	add	r3,r3,r3
    10f8:	10c5883a 	add	r2,r2,r3
    10fc:	11000015 	stw	r4,0(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    1100:	e0bff817 	ldw	r2,-32(fp)
    1104:	10800044 	addi	r2,r2,1
    1108:	e0bff815 	stw	r2,-32(fp)
    110c:	e0bff817 	ldw	r2,-32(fp)
    1110:	10800410 	cmplti	r2,r2,16
    1114:	103fd81e 	bne	r2,zero,1078 <__alt_mem_epcs_flash_controller+0xfdff8078>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	trezor_sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);
    1118:	e1bffe17 	ldw	r6,-8(fp)
    111c:	014000b4 	movhi	r5,2
    1120:	29675104 	addi	r5,r5,-25276
    1124:	01000074 	movhi	r4,1
    1128:	2119cf04 	addi	r4,r4,26428
    112c:	00064640 	call	6464 <trezor_sha256_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    1130:	e03ff915 	stw	zero,-28(fp)
    1134:	00001406 	br	1188 <trezor_hmac_sha256_prepare+0x1a0>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
    1138:	008000b4 	movhi	r2,2
    113c:	10a75104 	addi	r2,r2,-25276
    1140:	e0fff917 	ldw	r3,-28(fp)
    1144:	18c7883a 	add	r3,r3,r3
    1148:	18c7883a 	add	r3,r3,r3
    114c:	10c5883a 	add	r2,r2,r3
    1150:	10c00017 	ldw	r3,0(r2)
    1154:	009a9ab4 	movhi	r2,27242
    1158:	109a9a84 	addi	r2,r2,27242
    115c:	1888f03a 	xor	r4,r3,r2
    1160:	008000b4 	movhi	r2,2
    1164:	10a75104 	addi	r2,r2,-25276
    1168:	e0fff917 	ldw	r3,-28(fp)
    116c:	18c7883a 	add	r3,r3,r3
    1170:	18c7883a 	add	r3,r3,r3
    1174:	10c5883a 	add	r2,r2,r3
    1178:	11000015 	stw	r4,0(r2)
		key_pad[i] = data ^ 0x5c5c5c5c;
	}
	trezor_sha256_Transform(sha256_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA256_BLOCK_LENGTH/(int)sizeof(uint32_t); i++) {
    117c:	e0bff917 	ldw	r2,-28(fp)
    1180:	10800044 	addi	r2,r2,1
    1184:	e0bff915 	stw	r2,-28(fp)
    1188:	e0bff917 	ldw	r2,-28(fp)
    118c:	10800410 	cmplti	r2,r2,16
    1190:	103fe91e 	bne	r2,zero,1138 <__alt_mem_epcs_flash_controller+0xfdff8138>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c ^ 0x36363636;
	}
	trezor_sha256_Transform(sha256_initial_hash_value, key_pad, ipad_digest);
    1194:	e1bfff17 	ldw	r6,-4(fp)
    1198:	014000b4 	movhi	r5,2
    119c:	29675104 	addi	r5,r5,-25276
    11a0:	01000074 	movhi	r4,1
    11a4:	2119cf04 	addi	r4,r4,26428
    11a8:	00064640 	call	6464 <trezor_sha256_Transform>
	memzero(key_pad, sizeof(key_pad));
    11ac:	01401004 	movi	r5,64
    11b0:	010000b4 	movhi	r4,2
    11b4:	21275104 	addi	r4,r4,-25276
    11b8:	00017c40 	call	17c4 <memzero>
}
    11bc:	0001883a 	nop
    11c0:	e037883a 	mov	sp,fp
    11c4:	dfc00117 	ldw	ra,4(sp)
    11c8:	df000017 	ldw	fp,0(sp)
    11cc:	dec00204 	addi	sp,sp,8
    11d0:	f800283a 	ret

000011d4 <trezor_hmac_sha512_Init>:

void trezor_hmac_sha512_Init(HMAC_SHA512_CTX *hctx, const uint8_t *key, const uint32_t keylen)
{
    11d4:	defffa04 	addi	sp,sp,-24
    11d8:	dfc00515 	stw	ra,20(sp)
    11dc:	df000415 	stw	fp,16(sp)
    11e0:	df000404 	addi	fp,sp,16
    11e4:	e13ffd15 	stw	r4,-12(fp)
    11e8:	e17ffe15 	stw	r5,-8(fp)
    11ec:	e1bfff15 	stw	r6,-4(fp)
	static CONFIDENTIAL uint8_t i_key_pad[SHA512_BLOCK_LENGTH];
	memset(i_key_pad, 0, SHA512_BLOCK_LENGTH);
    11f0:	01802004 	movi	r6,128
    11f4:	000b883a 	mov	r5,zero
    11f8:	010000b4 	movhi	r4,2
    11fc:	21277b04 	addi	r4,r4,-25108
    1200:	00096040 	call	9604 <memset>
	if (keylen > SHA512_BLOCK_LENGTH) {
    1204:	e0bfff17 	ldw	r2,-4(fp)
    1208:	10802070 	cmpltui	r2,r2,129
    120c:	1000061e 	bne	r2,zero,1228 <trezor_hmac_sha512_Init+0x54>
		trezor_sha512_Raw(key, keylen, i_key_pad);
    1210:	018000b4 	movhi	r6,2
    1214:	31a77b04 	addi	r6,r6,-25108
    1218:	e17fff17 	ldw	r5,-4(fp)
    121c:	e13ffe17 	ldw	r4,-8(fp)
    1220:	000936c0 	call	936c <trezor_sha512_Raw>
    1224:	00000506 	br	123c <trezor_hmac_sha512_Init+0x68>
	} else {
		memcpy(i_key_pad, key, keylen);
    1228:	e1bfff17 	ldw	r6,-4(fp)
    122c:	e17ffe17 	ldw	r5,-8(fp)
    1230:	010000b4 	movhi	r4,2
    1234:	21277b04 	addi	r4,r4,-25108
    1238:	00095dc0 	call	95dc <memcpy>
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    123c:	e03ffc15 	stw	zero,-16(fp)
    1240:	00001a06 	br	12ac <trezor_hmac_sha512_Init+0xd8>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
    1244:	008000b4 	movhi	r2,2
    1248:	10a77b04 	addi	r2,r2,-25108
    124c:	e0fffc17 	ldw	r3,-16(fp)
    1250:	10c5883a 	add	r2,r2,r3
    1254:	10800003 	ldbu	r2,0(r2)
    1258:	1080171c 	xori	r2,r2,92
    125c:	1009883a 	mov	r4,r2
    1260:	e0fffd17 	ldw	r3,-12(fp)
    1264:	e0bffc17 	ldw	r2,-16(fp)
    1268:	1885883a 	add	r2,r3,r2
    126c:	11000005 	stb	r4,0(r2)
		i_key_pad[i] ^= 0x36;
    1270:	008000b4 	movhi	r2,2
    1274:	10a77b04 	addi	r2,r2,-25108
    1278:	e0fffc17 	ldw	r3,-16(fp)
    127c:	10c5883a 	add	r2,r2,r3
    1280:	10800003 	ldbu	r2,0(r2)
    1284:	10800d9c 	xori	r2,r2,54
    1288:	1009883a 	mov	r4,r2
    128c:	008000b4 	movhi	r2,2
    1290:	10a77b04 	addi	r2,r2,-25108
    1294:	e0fffc17 	ldw	r3,-16(fp)
    1298:	10c5883a 	add	r2,r2,r3
    129c:	11000005 	stb	r4,0(r2)
	if (keylen > SHA512_BLOCK_LENGTH) {
		trezor_sha512_Raw(key, keylen, i_key_pad);
	} else {
		memcpy(i_key_pad, key, keylen);
	}
	for (int i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    12a0:	e0bffc17 	ldw	r2,-16(fp)
    12a4:	10800044 	addi	r2,r2,1
    12a8:	e0bffc15 	stw	r2,-16(fp)
    12ac:	e0bffc17 	ldw	r2,-16(fp)
    12b0:	10802010 	cmplti	r2,r2,128
    12b4:	103fe31e 	bne	r2,zero,1244 <__alt_mem_epcs_flash_controller+0xfdff8244>
		hctx->o_key_pad[i] = i_key_pad[i] ^ 0x5c;
		i_key_pad[i] ^= 0x36;
	}
	trezor_sha512_Init(&(hctx->ctx));
    12b8:	e0bffd17 	ldw	r2,-12(fp)
    12bc:	10802004 	addi	r2,r2,128
    12c0:	1009883a 	mov	r4,r2
    12c4:	00073180 	call	7318 <trezor_sha512_Init>
	trezor_sha512_Update(&(hctx->ctx), i_key_pad, SHA512_BLOCK_LENGTH);
    12c8:	e0bffd17 	ldw	r2,-12(fp)
    12cc:	10802004 	addi	r2,r2,128
    12d0:	01802004 	movi	r6,128
    12d4:	014000b4 	movhi	r5,2
    12d8:	29677b04 	addi	r5,r5,-25108
    12dc:	1009883a 	mov	r4,r2
    12e0:	00082c00 	call	82c0 <trezor_sha512_Update>
	memzero(i_key_pad, sizeof(i_key_pad));
    12e4:	01402004 	movi	r5,128
    12e8:	010000b4 	movhi	r4,2
    12ec:	21277b04 	addi	r4,r4,-25108
    12f0:	00017c40 	call	17c4 <memzero>
}
    12f4:	0001883a 	nop
    12f8:	e037883a 	mov	sp,fp
    12fc:	dfc00117 	ldw	ra,4(sp)
    1300:	df000017 	ldw	fp,0(sp)
    1304:	dec00204 	addi	sp,sp,8
    1308:	f800283a 	ret

0000130c <trezor_hmac_sha512_Update>:

void trezor_hmac_sha512_Update(HMAC_SHA512_CTX *hctx, const uint8_t *msg, const uint32_t msglen)
{
    130c:	defffb04 	addi	sp,sp,-20
    1310:	dfc00415 	stw	ra,16(sp)
    1314:	df000315 	stw	fp,12(sp)
    1318:	df000304 	addi	fp,sp,12
    131c:	e13ffd15 	stw	r4,-12(fp)
    1320:	e17ffe15 	stw	r5,-8(fp)
    1324:	e1bfff15 	stw	r6,-4(fp)
	trezor_sha512_Update(&(hctx->ctx), msg, msglen);
    1328:	e0bffd17 	ldw	r2,-12(fp)
    132c:	10802004 	addi	r2,r2,128
    1330:	e1bfff17 	ldw	r6,-4(fp)
    1334:	e17ffe17 	ldw	r5,-8(fp)
    1338:	1009883a 	mov	r4,r2
    133c:	00082c00 	call	82c0 <trezor_sha512_Update>
}
    1340:	0001883a 	nop
    1344:	e037883a 	mov	sp,fp
    1348:	dfc00117 	ldw	ra,4(sp)
    134c:	df000017 	ldw	fp,0(sp)
    1350:	dec00204 	addi	sp,sp,8
    1354:	f800283a 	ret

00001358 <trezor_hmac_sha512_Final>:

void trezor_hmac_sha512_Final(HMAC_SHA512_CTX *hctx, uint8_t *hmac)
{
    1358:	defffc04 	addi	sp,sp,-16
    135c:	dfc00315 	stw	ra,12(sp)
    1360:	df000215 	stw	fp,8(sp)
    1364:	df000204 	addi	fp,sp,8
    1368:	e13ffe15 	stw	r4,-8(fp)
    136c:	e17fff15 	stw	r5,-4(fp)
	trezor_sha512_Final(&(hctx->ctx), hmac);
    1370:	e0bffe17 	ldw	r2,-8(fp)
    1374:	10802004 	addi	r2,r2,128
    1378:	e17fff17 	ldw	r5,-4(fp)
    137c:	1009883a 	mov	r4,r2
    1380:	000903c0 	call	903c <trezor_sha512_Final>
	trezor_sha512_Init(&(hctx->ctx));
    1384:	e0bffe17 	ldw	r2,-8(fp)
    1388:	10802004 	addi	r2,r2,128
    138c:	1009883a 	mov	r4,r2
    1390:	00073180 	call	7318 <trezor_sha512_Init>
	trezor_sha512_Update(&(hctx->ctx), hctx->o_key_pad, SHA512_BLOCK_LENGTH);
    1394:	e0bffe17 	ldw	r2,-8(fp)
    1398:	10802004 	addi	r2,r2,128
    139c:	e0fffe17 	ldw	r3,-8(fp)
    13a0:	01802004 	movi	r6,128
    13a4:	180b883a 	mov	r5,r3
    13a8:	1009883a 	mov	r4,r2
    13ac:	00082c00 	call	82c0 <trezor_sha512_Update>
	trezor_sha512_Update(&(hctx->ctx), hmac, SHA512_DIGEST_LENGTH);
    13b0:	e0bffe17 	ldw	r2,-8(fp)
    13b4:	10802004 	addi	r2,r2,128
    13b8:	01801004 	movi	r6,64
    13bc:	e17fff17 	ldw	r5,-4(fp)
    13c0:	1009883a 	mov	r4,r2
    13c4:	00082c00 	call	82c0 <trezor_sha512_Update>
	trezor_sha512_Final(&(hctx->ctx), hmac);
    13c8:	e0bffe17 	ldw	r2,-8(fp)
    13cc:	10802004 	addi	r2,r2,128
    13d0:	e17fff17 	ldw	r5,-4(fp)
    13d4:	1009883a 	mov	r4,r2
    13d8:	000903c0 	call	903c <trezor_sha512_Final>
	memzero(hctx, sizeof(HMAC_SHA512_CTX));
    13dc:	01405404 	movi	r5,336
    13e0:	e13ffe17 	ldw	r4,-8(fp)
    13e4:	00017c40 	call	17c4 <memzero>
}
    13e8:	0001883a 	nop
    13ec:	e037883a 	mov	sp,fp
    13f0:	dfc00117 	ldw	ra,4(sp)
    13f4:	df000017 	ldw	fp,0(sp)
    13f8:	dec00204 	addi	sp,sp,8
    13fc:	f800283a 	ret

00001400 <trezor_hmac_sha512>:

void trezor_hmac_sha512(const uint8_t *key, const uint32_t keylen, const uint8_t *msg, const uint32_t msglen, uint8_t *hmac)
{
    1400:	deffa604 	addi	sp,sp,-360
    1404:	dfc05915 	stw	ra,356(sp)
    1408:	df005815 	stw	fp,352(sp)
    140c:	df005804 	addi	fp,sp,352
    1410:	e13ffc15 	stw	r4,-16(fp)
    1414:	e17ffd15 	stw	r5,-12(fp)
    1418:	e1bffe15 	stw	r6,-8(fp)
    141c:	e1ffff15 	stw	r7,-4(fp)
	HMAC_SHA512_CTX hctx;
	trezor_hmac_sha512_Init(&hctx, key, keylen);
    1420:	e1bffd17 	ldw	r6,-12(fp)
    1424:	e17ffc17 	ldw	r5,-16(fp)
    1428:	e13fa804 	addi	r4,fp,-352
    142c:	00011d40 	call	11d4 <trezor_hmac_sha512_Init>
	trezor_hmac_sha512_Update(&hctx, msg, msglen);
    1430:	e1bfff17 	ldw	r6,-4(fp)
    1434:	e17ffe17 	ldw	r5,-8(fp)
    1438:	e13fa804 	addi	r4,fp,-352
    143c:	000130c0 	call	130c <trezor_hmac_sha512_Update>
	trezor_hmac_sha512_Final(&hctx, hmac);
    1440:	e1400217 	ldw	r5,8(fp)
    1444:	e13fa804 	addi	r4,fp,-352
    1448:	00013580 	call	1358 <trezor_hmac_sha512_Final>
}
    144c:	0001883a 	nop
    1450:	e037883a 	mov	sp,fp
    1454:	dfc00117 	ldw	ra,4(sp)
    1458:	df000017 	ldw	fp,0(sp)
    145c:	dec00204 	addi	sp,sp,8
    1460:	f800283a 	ret

00001464 <trezor_hmac_sha512_prepare>:

void trezor_hmac_sha512_prepare(const uint8_t *key, const uint32_t keylen, uint64_t *opad_digest, uint64_t *ipad_digest)
{
    1464:	deffde04 	addi	sp,sp,-136
    1468:	dfc02115 	stw	ra,132(sp)
    146c:	df002015 	stw	fp,128(sp)
    1470:	ddc01f15 	stw	r23,124(sp)
    1474:	dd801e15 	stw	r22,120(sp)
    1478:	dd401d15 	stw	r21,116(sp)
    147c:	dd001c15 	stw	r20,112(sp)
    1480:	dcc01b15 	stw	r19,108(sp)
    1484:	dc801a15 	stw	r18,104(sp)
    1488:	dc401915 	stw	r17,100(sp)
    148c:	dc001815 	stw	r16,96(sp)
    1490:	df002004 	addi	fp,sp,128
    1494:	e13fe615 	stw	r4,-104(fp)
    1498:	e17fe715 	stw	r5,-100(fp)
    149c:	e1bfe815 	stw	r6,-96(fp)
    14a0:	e1ffe915 	stw	r7,-92(fp)
	static CONFIDENTIAL uint64_t key_pad[SHA512_BLOCK_LENGTH/sizeof(uint64_t)];

	memzero(key_pad, sizeof(key_pad));
    14a4:	01402004 	movi	r5,128
    14a8:	010000b4 	movhi	r4,2
    14ac:	21279b04 	addi	r4,r4,-24980
    14b0:	00017c40 	call	17c4 <memzero>
	if (keylen > SHA512_BLOCK_LENGTH) {
    14b4:	e0bfe717 	ldw	r2,-100(fp)
    14b8:	10802070 	cmpltui	r2,r2,129
    14bc:	10000e1e 	bne	r2,zero,14f8 <trezor_hmac_sha512_prepare+0x94>
		static CONFIDENTIAL SHA512_CTX context;
		trezor_sha512_Init(&context);
    14c0:	010000b4 	movhi	r4,2
    14c4:	2127bb04 	addi	r4,r4,-24852
    14c8:	00073180 	call	7318 <trezor_sha512_Init>
		trezor_sha512_Update(&context, key, keylen);
    14cc:	e1bfe717 	ldw	r6,-100(fp)
    14d0:	e17fe617 	ldw	r5,-104(fp)
    14d4:	010000b4 	movhi	r4,2
    14d8:	2127bb04 	addi	r4,r4,-24852
    14dc:	00082c00 	call	82c0 <trezor_sha512_Update>
		trezor_sha512_Final(&context, (uint8_t*)key_pad);
    14e0:	014000b4 	movhi	r5,2
    14e4:	29679b04 	addi	r5,r5,-24980
    14e8:	010000b4 	movhi	r4,2
    14ec:	2127bb04 	addi	r4,r4,-24852
    14f0:	000903c0 	call	903c <trezor_sha512_Final>
    14f4:	00000506 	br	150c <trezor_hmac_sha512_prepare+0xa8>
	} else {
		memcpy(key_pad, key, keylen);
    14f8:	e1bfe717 	ldw	r6,-100(fp)
    14fc:	e17fe617 	ldw	r5,-104(fp)
    1500:	010000b4 	movhi	r4,2
    1504:	21279b04 	addi	r4,r4,-24980
    1508:	00095dc0 	call	95dc <memcpy>
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    150c:	e03fe015 	stw	zero,-128(fp)
    1510:	00006b06 	br	16c0 <trezor_hmac_sha512_prepare+0x25c>
		uint64_t data;
#if BYTE_ORDER == LITTLE_ENDIAN
		REVERSE64(key_pad[i], data);
    1514:	008000b4 	movhi	r2,2
    1518:	10a79b04 	addi	r2,r2,-24980
    151c:	e0ffe017 	ldw	r3,-128(fp)
    1520:	180690fa 	slli	r3,r3,3
    1524:	10c5883a 	add	r2,r2,r3
    1528:	10c00017 	ldw	r3,0(r2)
    152c:	e0ffe215 	stw	r3,-120(fp)
    1530:	10800117 	ldw	r2,4(r2)
    1534:	e0bfe315 	stw	r2,-116(fp)
    1538:	e0bfe317 	ldw	r2,-116(fp)
    153c:	e0bff615 	stw	r2,-40(fp)
    1540:	e0ffe217 	ldw	r3,-120(fp)
    1544:	e0fff715 	stw	r3,-36(fp)
    1548:	e0bff617 	ldw	r2,-40(fp)
    154c:	e0bfe215 	stw	r2,-120(fp)
    1550:	e0fff717 	ldw	r3,-36(fp)
    1554:	e0ffe315 	stw	r3,-116(fp)
    1558:	e0ffe217 	ldw	r3,-120(fp)
    155c:	00bfc074 	movhi	r2,65281
    1560:	10bfc004 	addi	r2,r2,-256
    1564:	1884703a 	and	r2,r3,r2
    1568:	e0bfea15 	stw	r2,-88(fp)
    156c:	e0ffe317 	ldw	r3,-116(fp)
    1570:	00bfc074 	movhi	r2,65281
    1574:	10bfc004 	addi	r2,r2,-256
    1578:	1884703a 	and	r2,r3,r2
    157c:	e0bfeb15 	stw	r2,-84(fp)
    1580:	e0ffeb17 	ldw	r3,-84(fp)
    1584:	1804963a 	slli	r2,r3,24
    1588:	e0ffea17 	ldw	r3,-88(fp)
    158c:	1820d23a 	srli	r16,r3,8
    1590:	1420b03a 	or	r16,r2,r16
    1594:	e0bfeb17 	ldw	r2,-84(fp)
    1598:	1022d23a 	srli	r17,r2,8
    159c:	e0ffe217 	ldw	r3,-120(fp)
    15a0:	00803ff4 	movhi	r2,255
    15a4:	10803fc4 	addi	r2,r2,255
    15a8:	1884703a 	and	r2,r3,r2
    15ac:	e0bfec15 	stw	r2,-80(fp)
    15b0:	e0ffe317 	ldw	r3,-116(fp)
    15b4:	00803ff4 	movhi	r2,255
    15b8:	10803fc4 	addi	r2,r2,255
    15bc:	1884703a 	and	r2,r3,r2
    15c0:	e0bfed15 	stw	r2,-76(fp)
    15c4:	e0ffec17 	ldw	r3,-80(fp)
    15c8:	1804d63a 	srli	r2,r3,24
    15cc:	e0ffed17 	ldw	r3,-76(fp)
    15d0:	1826923a 	slli	r19,r3,8
    15d4:	14e6b03a 	or	r19,r2,r19
    15d8:	e0bfec17 	ldw	r2,-80(fp)
    15dc:	1024923a 	slli	r18,r2,8
    15e0:	8484b03a 	or	r2,r16,r18
    15e4:	e0bfe215 	stw	r2,-120(fp)
    15e8:	8cc4b03a 	or	r2,r17,r19
    15ec:	e0bfe315 	stw	r2,-116(fp)
    15f0:	e0bfe217 	ldw	r2,-120(fp)
    15f4:	10bfffec 	andhi	r2,r2,65535
    15f8:	e0bfee15 	stw	r2,-72(fp)
    15fc:	e0bfe317 	ldw	r2,-116(fp)
    1600:	10bfffec 	andhi	r2,r2,65535
    1604:	e0bfef15 	stw	r2,-68(fp)
    1608:	e0ffef17 	ldw	r3,-68(fp)
    160c:	1804943a 	slli	r2,r3,16
    1610:	e0ffee17 	ldw	r3,-72(fp)
    1614:	1828d43a 	srli	r20,r3,16
    1618:	1528b03a 	or	r20,r2,r20
    161c:	e0bfef17 	ldw	r2,-68(fp)
    1620:	102ad43a 	srli	r21,r2,16
    1624:	e0bfe217 	ldw	r2,-120(fp)
    1628:	10bfffcc 	andi	r2,r2,65535
    162c:	e0bff015 	stw	r2,-64(fp)
    1630:	e0bfe317 	ldw	r2,-116(fp)
    1634:	10bfffcc 	andi	r2,r2,65535
    1638:	e0bff115 	stw	r2,-60(fp)
    163c:	e0fff017 	ldw	r3,-64(fp)
    1640:	1804d43a 	srli	r2,r3,16
    1644:	e0fff117 	ldw	r3,-60(fp)
    1648:	182e943a 	slli	r23,r3,16
    164c:	15eeb03a 	or	r23,r2,r23
    1650:	e0bff017 	ldw	r2,-64(fp)
    1654:	102c943a 	slli	r22,r2,16
    1658:	a584b03a 	or	r2,r20,r22
    165c:	e0bfe415 	stw	r2,-112(fp)
    1660:	adc4b03a 	or	r2,r21,r23
    1664:	e0bfe515 	stw	r2,-108(fp)
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
    1668:	e0ffe417 	ldw	r3,-112(fp)
    166c:	00971734 	movhi	r2,23644
    1670:	10971704 	addi	r2,r2,23644
    1674:	1884f03a 	xor	r2,r3,r2
    1678:	e0bff215 	stw	r2,-56(fp)
    167c:	e0ffe517 	ldw	r3,-108(fp)
    1680:	00971734 	movhi	r2,23644
    1684:	10971704 	addi	r2,r2,23644
    1688:	1884f03a 	xor	r2,r3,r2
    168c:	e0bff315 	stw	r2,-52(fp)
    1690:	008000b4 	movhi	r2,2
    1694:	10a79b04 	addi	r2,r2,-24980
    1698:	e0ffe017 	ldw	r3,-128(fp)
    169c:	180690fa 	slli	r3,r3,3
    16a0:	10c5883a 	add	r2,r2,r3
    16a4:	e0fff217 	ldw	r3,-56(fp)
    16a8:	10c00015 	stw	r3,0(r2)
    16ac:	e0fff317 	ldw	r3,-52(fp)
    16b0:	10c00115 	stw	r3,4(r2)
	} else {
		memcpy(key_pad, key, keylen);
	}

	/* compute o_key_pad and its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    16b4:	e0bfe017 	ldw	r2,-128(fp)
    16b8:	10800044 	addi	r2,r2,1
    16bc:	e0bfe015 	stw	r2,-128(fp)
    16c0:	e0bfe017 	ldw	r2,-128(fp)
    16c4:	10800410 	cmplti	r2,r2,16
    16c8:	103f921e 	bne	r2,zero,1514 <__alt_mem_epcs_flash_controller+0xfdff8514>
#else
		data = key_pad[i];
#endif
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	trezor_sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);
    16cc:	e1bfe817 	ldw	r6,-96(fp)
    16d0:	014000b4 	movhi	r5,2
    16d4:	29679b04 	addi	r5,r5,-24980
    16d8:	01000074 	movhi	r4,1
    16dc:	211a7704 	addi	r4,r4,27100
    16e0:	00073a00 	call	73a0 <trezor_sha512_Transform>

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    16e4:	e03fe115 	stw	zero,-124(fp)
    16e8:	00001b06 	br	1758 <trezor_hmac_sha512_prepare+0x2f4>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
    16ec:	008000b4 	movhi	r2,2
    16f0:	10a79b04 	addi	r2,r2,-24980
    16f4:	e0ffe117 	ldw	r3,-124(fp)
    16f8:	180690fa 	slli	r3,r3,3
    16fc:	10c9883a 	add	r4,r2,r3
    1700:	20800017 	ldw	r2,0(r4)
    1704:	20c00117 	ldw	r3,4(r4)
    1708:	011a9ab4 	movhi	r4,27242
    170c:	211a9a84 	addi	r4,r4,27242
    1710:	1108f03a 	xor	r4,r2,r4
    1714:	e13ff415 	stw	r4,-48(fp)
    1718:	011a9ab4 	movhi	r4,27242
    171c:	211a9a84 	addi	r4,r4,27242
    1720:	1908f03a 	xor	r4,r3,r4
    1724:	e13ff515 	stw	r4,-44(fp)
    1728:	008000b4 	movhi	r2,2
    172c:	10a79b04 	addi	r2,r2,-24980
    1730:	e0ffe117 	ldw	r3,-124(fp)
    1734:	180690fa 	slli	r3,r3,3
    1738:	10c5883a 	add	r2,r2,r3
    173c:	e0fff417 	ldw	r3,-48(fp)
    1740:	10c00015 	stw	r3,0(r2)
    1744:	e0fff517 	ldw	r3,-44(fp)
    1748:	10c00115 	stw	r3,4(r2)
		key_pad[i] = data ^ 0x5c5c5c5c5c5c5c5c;
	}
	trezor_sha512_Transform(sha512_initial_hash_value, key_pad, opad_digest);

	/* convert o_key_pad to i_key_pad and compute its digest */
	for (int i = 0; i < SHA512_BLOCK_LENGTH/(int)sizeof(uint64_t); i++) {
    174c:	e0bfe117 	ldw	r2,-124(fp)
    1750:	10800044 	addi	r2,r2,1
    1754:	e0bfe115 	stw	r2,-124(fp)
    1758:	e0bfe117 	ldw	r2,-124(fp)
    175c:	10800410 	cmplti	r2,r2,16
    1760:	103fe21e 	bne	r2,zero,16ec <__alt_mem_epcs_flash_controller+0xfdff86ec>
		key_pad[i] = key_pad[i] ^ 0x5c5c5c5c5c5c5c5c ^ 0x3636363636363636;
	}
	trezor_sha512_Transform(sha512_initial_hash_value, key_pad, ipad_digest);
    1764:	e1bfe917 	ldw	r6,-92(fp)
    1768:	014000b4 	movhi	r5,2
    176c:	29679b04 	addi	r5,r5,-24980
    1770:	01000074 	movhi	r4,1
    1774:	211a7704 	addi	r4,r4,27100
    1778:	00073a00 	call	73a0 <trezor_sha512_Transform>
	memzero(key_pad, sizeof(key_pad));
    177c:	01402004 	movi	r5,128
    1780:	010000b4 	movhi	r4,2
    1784:	21279b04 	addi	r4,r4,-24980
    1788:	00017c40 	call	17c4 <memzero>
}
    178c:	0001883a 	nop
    1790:	e6fff804 	addi	sp,fp,-32
    1794:	dfc00917 	ldw	ra,36(sp)
    1798:	df000817 	ldw	fp,32(sp)
    179c:	ddc00717 	ldw	r23,28(sp)
    17a0:	dd800617 	ldw	r22,24(sp)
    17a4:	dd400517 	ldw	r21,20(sp)
    17a8:	dd000417 	ldw	r20,16(sp)
    17ac:	dcc00317 	ldw	r19,12(sp)
    17b0:	dc800217 	ldw	r18,8(sp)
    17b4:	dc400117 	ldw	r17,4(sp)
    17b8:	dc000017 	ldw	r16,0(sp)
    17bc:	dec00a04 	addi	sp,sp,40
    17c0:	f800283a 	ret

000017c4 <memzero>:
#include <string.h>

void memzero(void *s, size_t n)
{
    17c4:	defffc04 	addi	sp,sp,-16
    17c8:	dfc00315 	stw	ra,12(sp)
    17cc:	df000215 	stw	fp,8(sp)
    17d0:	df000204 	addi	fp,sp,8
    17d4:	e13ffe15 	stw	r4,-8(fp)
    17d8:	e17fff15 	stw	r5,-4(fp)
	memset(s, 0, n);
    17dc:	e1bfff17 	ldw	r6,-4(fp)
    17e0:	000b883a 	mov	r5,zero
    17e4:	e13ffe17 	ldw	r4,-8(fp)
    17e8:	00096040 	call	9604 <memset>
}
    17ec:	0001883a 	nop
    17f0:	e037883a 	mov	sp,fp
    17f4:	dfc00117 	ldw	ra,4(sp)
    17f8:	df000017 	ldw	fp,0(sp)
    17fc:	dec00204 	addi	sp,sp,8
    1800:	f800283a 	ret

00001804 <pbkdf2_hmac_sha256_Init>:
#include "..\Include\hmac.h"
#include "..\Include\sha2mnemonic.h"
#include "..\Include\memzero.h"

void pbkdf2_hmac_sha256_Init(PBKDF2_HMAC_SHA256_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    1804:	deffdd04 	addi	sp,sp,-140
    1808:	dfc02215 	stw	ra,136(sp)
    180c:	df002115 	stw	fp,132(sp)
    1810:	df002104 	addi	fp,sp,132
    1814:	e13ffc15 	stw	r4,-16(fp)
    1818:	e17ffd15 	stw	r5,-12(fp)
    181c:	e1bffe15 	stw	r6,-8(fp)
    1820:	e1ffff15 	stw	r7,-4(fp)
	SHA256_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    1824:	e0800317 	ldw	r2,12(fp)
    1828:	e0bfe015 	stw	r2,-128(fp)
    182c:	e0bfe017 	ldw	r2,-128(fp)
    1830:	1004143a 	roli	r2,r2,16
    1834:	e0bfe015 	stw	r2,-128(fp)
    1838:	e0ffe017 	ldw	r3,-128(fp)
    183c:	00bfc074 	movhi	r2,65281
    1840:	10bfc004 	addi	r2,r2,-256
    1844:	1884703a 	and	r2,r3,r2
    1848:	1006d23a 	srli	r3,r2,8
    184c:	e13fe017 	ldw	r4,-128(fp)
    1850:	00803ff4 	movhi	r2,255
    1854:	10803fc4 	addi	r2,r2,255
    1858:	2084703a 	and	r2,r4,r2
    185c:	1004923a 	slli	r2,r2,8
    1860:	1884b03a 	or	r2,r3,r2
    1864:	e0800315 	stw	r2,12(fp)
#endif

	trezor_hmac_sha256_prepare(pass, passlen, pctx->odig, pctx->idig);
    1868:	e0fffe17 	ldw	r3,-8(fp)
    186c:	e13ffc17 	ldw	r4,-16(fp)
    1870:	e0bffc17 	ldw	r2,-16(fp)
    1874:	10800804 	addi	r2,r2,32
    1878:	100f883a 	mov	r7,r2
    187c:	200d883a 	mov	r6,r4
    1880:	180b883a 	mov	r5,r3
    1884:	e13ffd17 	ldw	r4,-12(fp)
    1888:	0000fe80 	call	fe8 <trezor_hmac_sha256_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    188c:	e0bffc17 	ldw	r2,-16(fp)
    1890:	10801804 	addi	r2,r2,96
    1894:	01801004 	movi	r6,64
    1898:	000b883a 	mov	r5,zero
    189c:	1009883a 	mov	r4,r2
    18a0:	00096040 	call	9604 <memset>
	pctx->g[8] = 0x80000000;
    18a4:	e0bffc17 	ldw	r2,-16(fp)
    18a8:	00e00034 	movhi	r3,32768
    18ac:	10c02015 	stw	r3,128(r2)
	pctx->g[15] = (SHA256_BLOCK_LENGTH + SHA256_DIGEST_LENGTH) * 8;
    18b0:	e0bffc17 	ldw	r2,-16(fp)
    18b4:	00c0c004 	movi	r3,768
    18b8:	10c02715 	stw	r3,156(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    18bc:	e0bffc17 	ldw	r2,-16(fp)
    18c0:	10c00804 	addi	r3,r2,32
    18c4:	e0bfe204 	addi	r2,fp,-120
    18c8:	01800804 	movi	r6,32
    18cc:	180b883a 	mov	r5,r3
    18d0:	1009883a 	mov	r4,r2
    18d4:	00095dc0 	call	95dc <memcpy>
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
    18d8:	00808004 	movi	r2,512
    18dc:	e0bfea15 	stw	r2,-88(fp)
    18e0:	e03feb15 	stw	zero,-84(fp)
	trezor_sha256_Update(&ctx, salt, saltlen);
    18e4:	e0bfe204 	addi	r2,fp,-120
    18e8:	e1800217 	ldw	r6,8(fp)
    18ec:	e17fff17 	ldw	r5,-4(fp)
    18f0:	1009883a 	mov	r4,r2
    18f4:	0006a2c0 	call	6a2c <trezor_sha256_Update>
	trezor_sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    18f8:	e0c00304 	addi	r3,fp,12
    18fc:	e0bfe204 	addi	r2,fp,-120
    1900:	01800104 	movi	r6,4
    1904:	180b883a 	mov	r5,r3
    1908:	1009883a 	mov	r4,r2
    190c:	0006a2c0 	call	6a2c <trezor_sha256_Update>
	trezor_sha256_Final(&ctx, (uint8_t*)pctx->g);
    1910:	e0bffc17 	ldw	r2,-16(fp)
    1914:	10c01804 	addi	r3,r2,96
    1918:	e0bfe204 	addi	r2,fp,-120
    191c:	180b883a 	mov	r5,r3
    1920:	1009883a 	mov	r4,r2
    1924:	0006e340 	call	6e34 <trezor_sha256_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    1928:	e03fdf15 	stw	zero,-132(fp)
    192c:	00002006 	br	19b0 <pbkdf2_hmac_sha256_Init+0x1ac>
		REVERSE32(pctx->g[k], pctx->g[k]);
    1930:	e0fffc17 	ldw	r3,-16(fp)
    1934:	e0bfdf17 	ldw	r2,-132(fp)
    1938:	10800604 	addi	r2,r2,24
    193c:	1085883a 	add	r2,r2,r2
    1940:	1085883a 	add	r2,r2,r2
    1944:	1885883a 	add	r2,r3,r2
    1948:	10800017 	ldw	r2,0(r2)
    194c:	e0bfe115 	stw	r2,-124(fp)
    1950:	e0bfe117 	ldw	r2,-124(fp)
    1954:	1004143a 	roli	r2,r2,16
    1958:	e0bfe115 	stw	r2,-124(fp)
    195c:	e0ffe117 	ldw	r3,-124(fp)
    1960:	00bfc074 	movhi	r2,65281
    1964:	10bfc004 	addi	r2,r2,-256
    1968:	1884703a 	and	r2,r3,r2
    196c:	1006d23a 	srli	r3,r2,8
    1970:	e13fe117 	ldw	r4,-124(fp)
    1974:	00803ff4 	movhi	r2,255
    1978:	10803fc4 	addi	r2,r2,255
    197c:	2084703a 	and	r2,r4,r2
    1980:	1004923a 	slli	r2,r2,8
    1984:	1886b03a 	or	r3,r3,r2
    1988:	e13ffc17 	ldw	r4,-16(fp)
    198c:	e0bfdf17 	ldw	r2,-132(fp)
    1990:	10800604 	addi	r2,r2,24
    1994:	1085883a 	add	r2,r2,r2
    1998:	1085883a 	add	r2,r2,r2
    199c:	2085883a 	add	r2,r4,r2
    19a0:	10c00015 	stw	r3,0(r2)
	ctx.bitcount = SHA256_BLOCK_LENGTH * 8;
	trezor_sha256_Update(&ctx, salt, saltlen);
	trezor_sha256_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	trezor_sha256_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH / sizeof(uint32_t); k++) {
    19a4:	e0bfdf17 	ldw	r2,-132(fp)
    19a8:	10800044 	addi	r2,r2,1
    19ac:	e0bfdf15 	stw	r2,-132(fp)
    19b0:	e0bfdf17 	ldw	r2,-132(fp)
    19b4:	10800230 	cmpltui	r2,r2,8
    19b8:	103fdd1e 	bne	r2,zero,1930 <__alt_mem_epcs_flash_controller+0xfdff8930>
		REVERSE32(pctx->g[k], pctx->g[k]);
	}
#endif
	trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
    19bc:	e0fffc17 	ldw	r3,-16(fp)
    19c0:	e0bffc17 	ldw	r2,-16(fp)
    19c4:	11001804 	addi	r4,r2,96
    19c8:	e0bffc17 	ldw	r2,-16(fp)
    19cc:	10801804 	addi	r2,r2,96
    19d0:	100d883a 	mov	r6,r2
    19d4:	200b883a 	mov	r5,r4
    19d8:	1809883a 	mov	r4,r3
    19dc:	00064640 	call	6464 <trezor_sha256_Transform>
	memcpy(pctx->f, pctx->g, SHA256_DIGEST_LENGTH);
    19e0:	e0bffc17 	ldw	r2,-16(fp)
    19e4:	10c01004 	addi	r3,r2,64
    19e8:	e0bffc17 	ldw	r2,-16(fp)
    19ec:	10801804 	addi	r2,r2,96
    19f0:	01800804 	movi	r6,32
    19f4:	100b883a 	mov	r5,r2
    19f8:	1809883a 	mov	r4,r3
    19fc:	00095dc0 	call	95dc <memcpy>
	pctx->first = 1;
    1a00:	e0bffc17 	ldw	r2,-16(fp)
    1a04:	00c00044 	movi	r3,1
    1a08:	10c02805 	stb	r3,160(r2)
}
    1a0c:	0001883a 	nop
    1a10:	e037883a 	mov	sp,fp
    1a14:	dfc00117 	ldw	ra,4(sp)
    1a18:	df000017 	ldw	fp,0(sp)
    1a1c:	dec00204 	addi	sp,sp,8
    1a20:	f800283a 	ret

00001a24 <pbkdf2_hmac_sha256_Update>:

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
    1a24:	defffa04 	addi	sp,sp,-24
    1a28:	dfc00515 	stw	ra,20(sp)
    1a2c:	df000415 	stw	fp,16(sp)
    1a30:	df000404 	addi	fp,sp,16
    1a34:	e13ffe15 	stw	r4,-8(fp)
    1a38:	e17fff15 	stw	r5,-4(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1a3c:	e0bffe17 	ldw	r2,-8(fp)
    1a40:	10802803 	ldbu	r2,160(r2)
    1a44:	10803fcc 	andi	r2,r2,255
    1a48:	1080201c 	xori	r2,r2,128
    1a4c:	10bfe004 	addi	r2,r2,-128
    1a50:	e0bffc15 	stw	r2,-16(fp)
    1a54:	00003406 	br	1b28 <pbkdf2_hmac_sha256_Update+0x104>
		trezor_sha256_Transform(pctx->idig, pctx->g, pctx->g);
    1a58:	e0bffe17 	ldw	r2,-8(fp)
    1a5c:	10c00804 	addi	r3,r2,32
    1a60:	e0bffe17 	ldw	r2,-8(fp)
    1a64:	11001804 	addi	r4,r2,96
    1a68:	e0bffe17 	ldw	r2,-8(fp)
    1a6c:	10801804 	addi	r2,r2,96
    1a70:	100d883a 	mov	r6,r2
    1a74:	200b883a 	mov	r5,r4
    1a78:	1809883a 	mov	r4,r3
    1a7c:	00064640 	call	6464 <trezor_sha256_Transform>
		trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
    1a80:	e0fffe17 	ldw	r3,-8(fp)
    1a84:	e0bffe17 	ldw	r2,-8(fp)
    1a88:	11001804 	addi	r4,r2,96
    1a8c:	e0bffe17 	ldw	r2,-8(fp)
    1a90:	10801804 	addi	r2,r2,96
    1a94:	100d883a 	mov	r6,r2
    1a98:	200b883a 	mov	r5,r4
    1a9c:	1809883a 	mov	r4,r3
    1aa0:	00064640 	call	6464 <trezor_sha256_Transform>
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    1aa4:	e03ffd15 	stw	zero,-12(fp)
    1aa8:	00001906 	br	1b10 <pbkdf2_hmac_sha256_Update+0xec>
			pctx->f[j] ^= pctx->g[j];
    1aac:	e0fffe17 	ldw	r3,-8(fp)
    1ab0:	e0bffd17 	ldw	r2,-12(fp)
    1ab4:	10800404 	addi	r2,r2,16
    1ab8:	1085883a 	add	r2,r2,r2
    1abc:	1085883a 	add	r2,r2,r2
    1ac0:	1885883a 	add	r2,r3,r2
    1ac4:	10c00017 	ldw	r3,0(r2)
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	e0bffd17 	ldw	r2,-12(fp)
    1ad0:	10800604 	addi	r2,r2,24
    1ad4:	1085883a 	add	r2,r2,r2
    1ad8:	1085883a 	add	r2,r2,r2
    1adc:	2085883a 	add	r2,r4,r2
    1ae0:	10800017 	ldw	r2,0(r2)
    1ae4:	1886f03a 	xor	r3,r3,r2
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	e0bffd17 	ldw	r2,-12(fp)
    1af0:	10800404 	addi	r2,r2,16
    1af4:	1085883a 	add	r2,r2,r2
    1af8:	1085883a 	add	r2,r2,r2
    1afc:	2085883a 	add	r2,r4,r2
    1b00:	10c00015 	stw	r3,0(r2)
void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		trezor_sha256_Transform(pctx->idig, pctx->g, pctx->g);
		trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
    1b04:	e0bffd17 	ldw	r2,-12(fp)
    1b08:	10800044 	addi	r2,r2,1
    1b0c:	e0bffd15 	stw	r2,-12(fp)
    1b10:	e0bffd17 	ldw	r2,-12(fp)
    1b14:	10800230 	cmpltui	r2,r2,8
    1b18:	103fe41e 	bne	r2,zero,1aac <__alt_mem_epcs_flash_controller+0xfdff8aac>
	pctx->first = 1;
}

void pbkdf2_hmac_sha256_Update(PBKDF2_HMAC_SHA256_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    1b1c:	e0bffc17 	ldw	r2,-16(fp)
    1b20:	10800044 	addi	r2,r2,1
    1b24:	e0bffc15 	stw	r2,-16(fp)
    1b28:	e0fffc17 	ldw	r3,-16(fp)
    1b2c:	e0bfff17 	ldw	r2,-4(fp)
    1b30:	18bfc936 	bltu	r3,r2,1a58 <__alt_mem_epcs_flash_controller+0xfdff8a58>
		trezor_sha256_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA256_DIGEST_LENGTH/sizeof(uint32_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    1b34:	e0bffe17 	ldw	r2,-8(fp)
    1b38:	10002805 	stb	zero,160(r2)
}
    1b3c:	0001883a 	nop
    1b40:	e037883a 	mov	sp,fp
    1b44:	dfc00117 	ldw	ra,4(sp)
    1b48:	df000017 	ldw	fp,0(sp)
    1b4c:	dec00204 	addi	sp,sp,8
    1b50:	f800283a 	ret

00001b54 <pbkdf2_hmac_sha256_Final>:

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
    1b54:	defffa04 	addi	sp,sp,-24
    1b58:	dfc00515 	stw	ra,20(sp)
    1b5c:	df000415 	stw	fp,16(sp)
    1b60:	df000404 	addi	fp,sp,16
    1b64:	e13ffe15 	stw	r4,-8(fp)
    1b68:	e17fff15 	stw	r5,-4(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    1b6c:	e03ffc15 	stw	zero,-16(fp)
    1b70:	00002006 	br	1bf4 <pbkdf2_hmac_sha256_Final+0xa0>
		REVERSE32(pctx->f[k], pctx->f[k]);
    1b74:	e0fffe17 	ldw	r3,-8(fp)
    1b78:	e0bffc17 	ldw	r2,-16(fp)
    1b7c:	10800404 	addi	r2,r2,16
    1b80:	1085883a 	add	r2,r2,r2
    1b84:	1085883a 	add	r2,r2,r2
    1b88:	1885883a 	add	r2,r3,r2
    1b8c:	10800017 	ldw	r2,0(r2)
    1b90:	e0bffd15 	stw	r2,-12(fp)
    1b94:	e0bffd17 	ldw	r2,-12(fp)
    1b98:	1004143a 	roli	r2,r2,16
    1b9c:	e0bffd15 	stw	r2,-12(fp)
    1ba0:	e0fffd17 	ldw	r3,-12(fp)
    1ba4:	00bfc074 	movhi	r2,65281
    1ba8:	10bfc004 	addi	r2,r2,-256
    1bac:	1884703a 	and	r2,r3,r2
    1bb0:	1006d23a 	srli	r3,r2,8
    1bb4:	e13ffd17 	ldw	r4,-12(fp)
    1bb8:	00803ff4 	movhi	r2,255
    1bbc:	10803fc4 	addi	r2,r2,255
    1bc0:	2084703a 	and	r2,r4,r2
    1bc4:	1004923a 	slli	r2,r2,8
    1bc8:	1886b03a 	or	r3,r3,r2
    1bcc:	e13ffe17 	ldw	r4,-8(fp)
    1bd0:	e0bffc17 	ldw	r2,-16(fp)
    1bd4:	10800404 	addi	r2,r2,16
    1bd8:	1085883a 	add	r2,r2,r2
    1bdc:	1085883a 	add	r2,r2,r2
    1be0:	2085883a 	add	r2,r4,r2
    1be4:	10c00015 	stw	r3,0(r2)
}

void pbkdf2_hmac_sha256_Final(PBKDF2_HMAC_SHA256_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA256_DIGEST_LENGTH/sizeof(uint32_t); k++) {
    1be8:	e0bffc17 	ldw	r2,-16(fp)
    1bec:	10800044 	addi	r2,r2,1
    1bf0:	e0bffc15 	stw	r2,-16(fp)
    1bf4:	e0bffc17 	ldw	r2,-16(fp)
    1bf8:	10800230 	cmpltui	r2,r2,8
    1bfc:	103fdd1e 	bne	r2,zero,1b74 <__alt_mem_epcs_flash_controller+0xfdff8b74>
		REVERSE32(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA256_DIGEST_LENGTH);
    1c00:	e0bffe17 	ldw	r2,-8(fp)
    1c04:	10801004 	addi	r2,r2,64
    1c08:	01800804 	movi	r6,32
    1c0c:	100b883a 	mov	r5,r2
    1c10:	e13fff17 	ldw	r4,-4(fp)
    1c14:	00095dc0 	call	95dc <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA256_CTX));
    1c18:	01402904 	movi	r5,164
    1c1c:	e13ffe17 	ldw	r4,-8(fp)
    1c20:	00017c40 	call	17c4 <memzero>
}
    1c24:	0001883a 	nop
    1c28:	e037883a 	mov	sp,fp
    1c2c:	dfc00117 	ldw	ra,4(sp)
    1c30:	df000017 	ldw	fp,0(sp)
    1c34:	dec00204 	addi	sp,sp,8
    1c38:	f800283a 	ret

00001c3c <pbkdf2_hmac_sha256>:

void pbkdf2_hmac_sha256(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    1c3c:	deffc304 	addi	sp,sp,-244
    1c40:	dfc03c15 	stw	ra,240(sp)
    1c44:	df003b15 	stw	fp,236(sp)
    1c48:	df003b04 	addi	fp,sp,236
    1c4c:	e13ffc15 	stw	r4,-16(fp)
    1c50:	e17ffd15 	stw	r5,-12(fp)
    1c54:	e1bffe15 	stw	r6,-8(fp)
    1c58:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA256_DIGEST_LENGTH;
    1c5c:	e0c00417 	ldw	r3,16(fp)
    1c60:	00a00034 	movhi	r2,32768
    1c64:	108007c4 	addi	r2,r2,31
    1c68:	1884703a 	and	r2,r3,r2
    1c6c:	1000040e 	bge	r2,zero,1c80 <pbkdf2_hmac_sha256+0x44>
    1c70:	10bfffc4 	addi	r2,r2,-1
    1c74:	00fff804 	movi	r3,-32
    1c78:	10c4b03a 	or	r2,r2,r3
    1c7c:	10800044 	addi	r2,r2,1
    1c80:	e0bfc715 	stw	r2,-228(fp)
	uint32_t blocks_count = keylen / SHA256_DIGEST_LENGTH;
    1c84:	e0800417 	ldw	r2,16(fp)
    1c88:	1000010e 	bge	r2,zero,1c90 <pbkdf2_hmac_sha256+0x54>
    1c8c:	108007c4 	addi	r2,r2,31
    1c90:	1005d17a 	srai	r2,r2,5
    1c94:	e0bfc815 	stw	r2,-224(fp)
	if (last_block_size) {
    1c98:	e0bfc717 	ldw	r2,-228(fp)
    1c9c:	10000426 	beq	r2,zero,1cb0 <pbkdf2_hmac_sha256+0x74>
		blocks_count++;
    1ca0:	e0bfc817 	ldw	r2,-224(fp)
    1ca4:	10800044 	addi	r2,r2,1
    1ca8:	e0bfc815 	stw	r2,-224(fp)
    1cac:	00000206 	br	1cb8 <pbkdf2_hmac_sha256+0x7c>
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
    1cb0:	00800804 	movi	r2,32
    1cb4:	e0bfc715 	stw	r2,-228(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    1cb8:	00800044 	movi	r2,1
    1cbc:	e0bfc915 	stw	r2,-220(fp)
    1cc0:	00003106 	br	1d88 <pbkdf2_hmac_sha256+0x14c>
		PBKDF2_HMAC_SHA256_CTX pctx;
		pbkdf2_hmac_sha256_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    1cc4:	e0ffcb04 	addi	r3,fp,-212
    1cc8:	e0bfc917 	ldw	r2,-220(fp)
    1ccc:	d8800115 	stw	r2,4(sp)
    1cd0:	e0bfff17 	ldw	r2,-4(fp)
    1cd4:	d8800015 	stw	r2,0(sp)
    1cd8:	e1fffe17 	ldw	r7,-8(fp)
    1cdc:	e1bffd17 	ldw	r6,-12(fp)
    1ce0:	e17ffc17 	ldw	r5,-16(fp)
    1ce4:	1809883a 	mov	r4,r3
    1ce8:	00018040 	call	1804 <pbkdf2_hmac_sha256_Init>
		pbkdf2_hmac_sha256_Update(&pctx, iterations);
    1cec:	e0bfcb04 	addi	r2,fp,-212
    1cf0:	e1400217 	ldw	r5,8(fp)
    1cf4:	1009883a 	mov	r4,r2
    1cf8:	0001a240 	call	1a24 <pbkdf2_hmac_sha256_Update>
		uint8_t digest[SHA256_DIGEST_LENGTH];
		pbkdf2_hmac_sha256_Final(&pctx, digest);
    1cfc:	e0fff404 	addi	r3,fp,-48
    1d00:	e0bfcb04 	addi	r2,fp,-212
    1d04:	180b883a 	mov	r5,r3
    1d08:	1009883a 	mov	r4,r2
    1d0c:	0001b540 	call	1b54 <pbkdf2_hmac_sha256_Final>
		uint32_t key_offset = (blocknr - 1) * SHA256_DIGEST_LENGTH;
    1d10:	e0ffc917 	ldw	r3,-220(fp)
    1d14:	00820034 	movhi	r2,2048
    1d18:	10bfffc4 	addi	r2,r2,-1
    1d1c:	1885883a 	add	r2,r3,r2
    1d20:	1004917a 	slli	r2,r2,5
    1d24:	e0bfca15 	stw	r2,-216(fp)
		if (blocknr < blocks_count) {
    1d28:	e0ffc917 	ldw	r3,-220(fp)
    1d2c:	e0bfc817 	ldw	r2,-224(fp)
    1d30:	18800a2e 	bgeu	r3,r2,1d5c <pbkdf2_hmac_sha256+0x120>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
    1d34:	e0c00317 	ldw	r3,12(fp)
    1d38:	e0bfca17 	ldw	r2,-216(fp)
    1d3c:	1885883a 	add	r2,r3,r2
    1d40:	1009883a 	mov	r4,r2
    1d44:	e0bff404 	addi	r2,fp,-48
    1d48:	00c00804 	movi	r3,32
    1d4c:	180d883a 	mov	r6,r3
    1d50:	100b883a 	mov	r5,r2
    1d54:	00095dc0 	call	95dc <memcpy>
    1d58:	00000806 	br	1d7c <pbkdf2_hmac_sha256+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    1d5c:	e0c00317 	ldw	r3,12(fp)
    1d60:	e0bfca17 	ldw	r2,-216(fp)
    1d64:	1885883a 	add	r2,r3,r2
    1d68:	e0fff404 	addi	r3,fp,-48
    1d6c:	e1bfc717 	ldw	r6,-228(fp)
    1d70:	180b883a 	mov	r5,r3
    1d74:	1009883a 	mov	r4,r2
    1d78:	00095dc0 	call	95dc <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA256_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    1d7c:	e0bfc917 	ldw	r2,-220(fp)
    1d80:	10800044 	addi	r2,r2,1
    1d84:	e0bfc915 	stw	r2,-220(fp)
    1d88:	e0bfc917 	ldw	r2,-220(fp)
    1d8c:	e0ffc817 	ldw	r3,-224(fp)
    1d90:	18bfcc2e 	bgeu	r3,r2,1cc4 <__alt_mem_epcs_flash_controller+0xfdff8cc4>
			memcpy(key + key_offset, digest, SHA256_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    1d94:	0001883a 	nop
    1d98:	e037883a 	mov	sp,fp
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret

00001dac <pbkdf2_hmac_sha512_Init>:

void pbkdf2_hmac_sha512_Init(PBKDF2_HMAC_SHA512_CTX *pctx, const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t blocknr)
{
    1dac:	deffae04 	addi	sp,sp,-328
    1db0:	dfc05115 	stw	ra,324(sp)
    1db4:	df005015 	stw	fp,320(sp)
    1db8:	ddc04f15 	stw	r23,316(sp)
    1dbc:	dd804e15 	stw	r22,312(sp)
    1dc0:	dd404d15 	stw	r21,308(sp)
    1dc4:	dd004c15 	stw	r20,304(sp)
    1dc8:	dcc04b15 	stw	r19,300(sp)
    1dcc:	dc804a15 	stw	r18,296(sp)
    1dd0:	dc404915 	stw	r17,292(sp)
    1dd4:	dc004815 	stw	r16,288(sp)
    1dd8:	df005004 	addi	fp,sp,320
    1ddc:	e13fe815 	stw	r4,-96(fp)
    1de0:	e17fe915 	stw	r5,-92(fp)
    1de4:	e1bfea15 	stw	r6,-88(fp)
    1de8:	e1ffeb15 	stw	r7,-84(fp)
	SHA512_CTX ctx;
#if BYTE_ORDER == LITTLE_ENDIAN
	REVERSE32(blocknr, blocknr);
    1dec:	e0800317 	ldw	r2,12(fp)
    1df0:	e0bfb115 	stw	r2,-316(fp)
    1df4:	e0bfb117 	ldw	r2,-316(fp)
    1df8:	1004143a 	roli	r2,r2,16
    1dfc:	e0bfb115 	stw	r2,-316(fp)
    1e00:	e0ffb117 	ldw	r3,-316(fp)
    1e04:	00bfc074 	movhi	r2,65281
    1e08:	10bfc004 	addi	r2,r2,-256
    1e0c:	1884703a 	and	r2,r3,r2
    1e10:	1006d23a 	srli	r3,r2,8
    1e14:	e13fb117 	ldw	r4,-316(fp)
    1e18:	00803ff4 	movhi	r2,255
    1e1c:	10803fc4 	addi	r2,r2,255
    1e20:	2084703a 	and	r2,r4,r2
    1e24:	1004923a 	slli	r2,r2,8
    1e28:	1884b03a 	or	r2,r3,r2
    1e2c:	e0800315 	stw	r2,12(fp)
#endif

	trezor_hmac_sha512_prepare(pass, passlen, pctx->odig, pctx->idig);
    1e30:	e0ffea17 	ldw	r3,-88(fp)
    1e34:	e13fe817 	ldw	r4,-96(fp)
    1e38:	e0bfe817 	ldw	r2,-96(fp)
    1e3c:	10801004 	addi	r2,r2,64
    1e40:	100f883a 	mov	r7,r2
    1e44:	200d883a 	mov	r6,r4
    1e48:	180b883a 	mov	r5,r3
    1e4c:	e13fe917 	ldw	r4,-92(fp)
    1e50:	00014640 	call	1464 <trezor_hmac_sha512_prepare>
	memset(pctx->g, 0, sizeof(pctx->g));
    1e54:	e0bfe817 	ldw	r2,-96(fp)
    1e58:	10803004 	addi	r2,r2,192
    1e5c:	01802004 	movi	r6,128
    1e60:	000b883a 	mov	r5,zero
    1e64:	1009883a 	mov	r4,r2
    1e68:	00096040 	call	9604 <memset>
	pctx->g[8] = 0x8000000000000000;
    1e6c:	e0bfe817 	ldw	r2,-96(fp)
    1e70:	10004015 	stw	zero,256(r2)
    1e74:	00e00034 	movhi	r3,32768
    1e78:	10c04115 	stw	r3,260(r2)
	pctx->g[15] = (SHA512_BLOCK_LENGTH + SHA512_DIGEST_LENGTH) * 8;
    1e7c:	e0bfe817 	ldw	r2,-96(fp)
    1e80:	00c18004 	movi	r3,1536
    1e84:	10c04e15 	stw	r3,312(r2)
    1e88:	10004f15 	stw	zero,316(r2)

	memcpy (ctx.state, pctx->idig, sizeof(pctx->idig));
    1e8c:	e0bfe817 	ldw	r2,-96(fp)
    1e90:	10c01004 	addi	r3,r2,64
    1e94:	e0bfb404 	addi	r2,fp,-304
    1e98:	01801004 	movi	r6,64
    1e9c:	180b883a 	mov	r5,r3
    1ea0:	1009883a 	mov	r4,r2
    1ea4:	00095dc0 	call	95dc <memcpy>
	ctx.bitcount[0] = SHA512_BLOCK_LENGTH * 8;
    1ea8:	00810004 	movi	r2,1024
    1eac:	e0bfc415 	stw	r2,-240(fp)
    1eb0:	e03fc515 	stw	zero,-236(fp)
	ctx.bitcount[1] = 0;
    1eb4:	e03fc615 	stw	zero,-232(fp)
    1eb8:	e03fc715 	stw	zero,-228(fp)
	trezor_sha512_Update(&ctx, salt, saltlen);
    1ebc:	e0bfb404 	addi	r2,fp,-304
    1ec0:	e1800217 	ldw	r6,8(fp)
    1ec4:	e17feb17 	ldw	r5,-84(fp)
    1ec8:	1009883a 	mov	r4,r2
    1ecc:	00082c00 	call	82c0 <trezor_sha512_Update>
	trezor_sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
    1ed0:	e0c00304 	addi	r3,fp,12
    1ed4:	e0bfb404 	addi	r2,fp,-304
    1ed8:	01800104 	movi	r6,4
    1edc:	180b883a 	mov	r5,r3
    1ee0:	1009883a 	mov	r4,r2
    1ee4:	00082c00 	call	82c0 <trezor_sha512_Update>
	trezor_sha512_Final(&ctx, (uint8_t*)pctx->g);
    1ee8:	e0bfe817 	ldw	r2,-96(fp)
    1eec:	10c03004 	addi	r3,r2,192
    1ef0:	e0bfb404 	addi	r2,fp,-304
    1ef4:	180b883a 	mov	r5,r3
    1ef8:	1009883a 	mov	r4,r2
    1efc:	000903c0 	call	903c <trezor_sha512_Final>
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    1f00:	e03fb015 	stw	zero,-320(fp)
    1f04:	00006106 	br	208c <pbkdf2_hmac_sha512_Init+0x2e0>
		REVERSE64(pctx->g[k], pctx->g[k]);
    1f08:	e0ffe817 	ldw	r3,-96(fp)
    1f0c:	e0bfb017 	ldw	r2,-320(fp)
    1f10:	10800604 	addi	r2,r2,24
    1f14:	100490fa 	slli	r2,r2,3
    1f18:	1885883a 	add	r2,r3,r2
    1f1c:	10c00017 	ldw	r3,0(r2)
    1f20:	e0ffb215 	stw	r3,-312(fp)
    1f24:	10800117 	ldw	r2,4(r2)
    1f28:	e0bfb315 	stw	r2,-308(fp)
    1f2c:	e0bfb317 	ldw	r2,-308(fp)
    1f30:	e0bff615 	stw	r2,-40(fp)
    1f34:	e0ffb217 	ldw	r3,-312(fp)
    1f38:	e0fff715 	stw	r3,-36(fp)
    1f3c:	e0bff617 	ldw	r2,-40(fp)
    1f40:	e0bfb215 	stw	r2,-312(fp)
    1f44:	e0fff717 	ldw	r3,-36(fp)
    1f48:	e0ffb315 	stw	r3,-308(fp)
    1f4c:	e0ffb217 	ldw	r3,-312(fp)
    1f50:	00bfc074 	movhi	r2,65281
    1f54:	10bfc004 	addi	r2,r2,-256
    1f58:	1884703a 	and	r2,r3,r2
    1f5c:	e0bfec15 	stw	r2,-80(fp)
    1f60:	e0ffb317 	ldw	r3,-308(fp)
    1f64:	00bfc074 	movhi	r2,65281
    1f68:	10bfc004 	addi	r2,r2,-256
    1f6c:	1884703a 	and	r2,r3,r2
    1f70:	e0bfed15 	stw	r2,-76(fp)
    1f74:	e0ffed17 	ldw	r3,-76(fp)
    1f78:	1804963a 	slli	r2,r3,24
    1f7c:	e0ffec17 	ldw	r3,-80(fp)
    1f80:	1820d23a 	srli	r16,r3,8
    1f84:	1420b03a 	or	r16,r2,r16
    1f88:	e0bfed17 	ldw	r2,-76(fp)
    1f8c:	1022d23a 	srli	r17,r2,8
    1f90:	e0ffb217 	ldw	r3,-312(fp)
    1f94:	00803ff4 	movhi	r2,255
    1f98:	10803fc4 	addi	r2,r2,255
    1f9c:	1884703a 	and	r2,r3,r2
    1fa0:	e0bfee15 	stw	r2,-72(fp)
    1fa4:	e0ffb317 	ldw	r3,-308(fp)
    1fa8:	00803ff4 	movhi	r2,255
    1fac:	10803fc4 	addi	r2,r2,255
    1fb0:	1884703a 	and	r2,r3,r2
    1fb4:	e0bfef15 	stw	r2,-68(fp)
    1fb8:	e0ffee17 	ldw	r3,-72(fp)
    1fbc:	1804d63a 	srli	r2,r3,24
    1fc0:	e0ffef17 	ldw	r3,-68(fp)
    1fc4:	1826923a 	slli	r19,r3,8
    1fc8:	14e6b03a 	or	r19,r2,r19
    1fcc:	e0bfee17 	ldw	r2,-72(fp)
    1fd0:	1024923a 	slli	r18,r2,8
    1fd4:	8484b03a 	or	r2,r16,r18
    1fd8:	e0bfb215 	stw	r2,-312(fp)
    1fdc:	8cc4b03a 	or	r2,r17,r19
    1fe0:	e0bfb315 	stw	r2,-308(fp)
    1fe4:	e0bfb217 	ldw	r2,-312(fp)
    1fe8:	10bfffec 	andhi	r2,r2,65535
    1fec:	e0bff015 	stw	r2,-64(fp)
    1ff0:	e0bfb317 	ldw	r2,-308(fp)
    1ff4:	10bfffec 	andhi	r2,r2,65535
    1ff8:	e0bff115 	stw	r2,-60(fp)
    1ffc:	e0fff117 	ldw	r3,-60(fp)
    2000:	1804943a 	slli	r2,r3,16
    2004:	e0fff017 	ldw	r3,-64(fp)
    2008:	1828d43a 	srli	r20,r3,16
    200c:	1528b03a 	or	r20,r2,r20
    2010:	e0bff117 	ldw	r2,-60(fp)
    2014:	102ad43a 	srli	r21,r2,16
    2018:	e0bfb217 	ldw	r2,-312(fp)
    201c:	10bfffcc 	andi	r2,r2,65535
    2020:	e0bff215 	stw	r2,-56(fp)
    2024:	e0bfb317 	ldw	r2,-308(fp)
    2028:	10bfffcc 	andi	r2,r2,65535
    202c:	e0bff315 	stw	r2,-52(fp)
    2030:	e0fff217 	ldw	r3,-56(fp)
    2034:	1804d43a 	srli	r2,r3,16
    2038:	e0fff317 	ldw	r3,-52(fp)
    203c:	182e943a 	slli	r23,r3,16
    2040:	15eeb03a 	or	r23,r2,r23
    2044:	e0bff217 	ldw	r2,-56(fp)
    2048:	102c943a 	slli	r22,r2,16
    204c:	a586b03a 	or	r3,r20,r22
    2050:	e0fff415 	stw	r3,-48(fp)
    2054:	adc4b03a 	or	r2,r21,r23
    2058:	e0bff515 	stw	r2,-44(fp)
    205c:	e0ffe817 	ldw	r3,-96(fp)
    2060:	e0bfb017 	ldw	r2,-320(fp)
    2064:	10800604 	addi	r2,r2,24
    2068:	100490fa 	slli	r2,r2,3
    206c:	1885883a 	add	r2,r3,r2
    2070:	e0fff417 	ldw	r3,-48(fp)
    2074:	10c00015 	stw	r3,0(r2)
    2078:	e0fff517 	ldw	r3,-44(fp)
    207c:	10c00115 	stw	r3,4(r2)
	ctx.bitcount[1] = 0;
	trezor_sha512_Update(&ctx, salt, saltlen);
	trezor_sha512_Update(&ctx, (uint8_t*)&blocknr, sizeof(blocknr));
	trezor_sha512_Final(&ctx, (uint8_t*)pctx->g);
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH / sizeof(uint64_t); k++) {
    2080:	e0bfb017 	ldw	r2,-320(fp)
    2084:	10800044 	addi	r2,r2,1
    2088:	e0bfb015 	stw	r2,-320(fp)
    208c:	e0bfb017 	ldw	r2,-320(fp)
    2090:	10800230 	cmpltui	r2,r2,8
    2094:	103f9c1e 	bne	r2,zero,1f08 <__alt_mem_epcs_flash_controller+0xfdff8f08>
		REVERSE64(pctx->g[k], pctx->g[k]);
	}
#endif
	trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
    2098:	e0ffe817 	ldw	r3,-96(fp)
    209c:	e0bfe817 	ldw	r2,-96(fp)
    20a0:	11003004 	addi	r4,r2,192
    20a4:	e0bfe817 	ldw	r2,-96(fp)
    20a8:	10803004 	addi	r2,r2,192
    20ac:	100d883a 	mov	r6,r2
    20b0:	200b883a 	mov	r5,r4
    20b4:	1809883a 	mov	r4,r3
    20b8:	00073a00 	call	73a0 <trezor_sha512_Transform>
	memcpy(pctx->f, pctx->g, SHA512_DIGEST_LENGTH);
    20bc:	e0bfe817 	ldw	r2,-96(fp)
    20c0:	10c02004 	addi	r3,r2,128
    20c4:	e0bfe817 	ldw	r2,-96(fp)
    20c8:	10803004 	addi	r2,r2,192
    20cc:	01801004 	movi	r6,64
    20d0:	100b883a 	mov	r5,r2
    20d4:	1809883a 	mov	r4,r3
    20d8:	00095dc0 	call	95dc <memcpy>
	pctx->first = 1;
    20dc:	e0bfe817 	ldw	r2,-96(fp)
    20e0:	00c00044 	movi	r3,1
    20e4:	10c05005 	stb	r3,320(r2)
}
    20e8:	0001883a 	nop
    20ec:	e6fff804 	addi	sp,fp,-32
    20f0:	dfc00917 	ldw	ra,36(sp)
    20f4:	df000817 	ldw	fp,32(sp)
    20f8:	ddc00717 	ldw	r23,28(sp)
    20fc:	dd800617 	ldw	r22,24(sp)
    2100:	dd400517 	ldw	r21,20(sp)
    2104:	dd000417 	ldw	r20,16(sp)
    2108:	dcc00317 	ldw	r19,12(sp)
    210c:	dc800217 	ldw	r18,8(sp)
    2110:	dc400117 	ldw	r17,4(sp)
    2114:	dc000017 	ldw	r16,0(sp)
    2118:	dec00a04 	addi	sp,sp,40
    211c:	f800283a 	ret

00002120 <pbkdf2_hmac_sha512_Update>:

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
    2120:	defff804 	addi	sp,sp,-32
    2124:	dfc00715 	stw	ra,28(sp)
    2128:	df000615 	stw	fp,24(sp)
    212c:	dc400515 	stw	r17,20(sp)
    2130:	dc000415 	stw	r16,16(sp)
    2134:	df000604 	addi	fp,sp,24
    2138:	e13ffc15 	stw	r4,-16(fp)
    213c:	e17ffd15 	stw	r5,-12(fp)
	for (uint32_t i = pctx->first; i < iterations; i++) {
    2140:	e0bffc17 	ldw	r2,-16(fp)
    2144:	10805003 	ldbu	r2,320(r2)
    2148:	10803fcc 	andi	r2,r2,255
    214c:	1080201c 	xori	r2,r2,128
    2150:	10bfe004 	addi	r2,r2,-128
    2154:	e0bffa15 	stw	r2,-24(fp)
    2158:	00003506 	br	2230 <pbkdf2_hmac_sha512_Update+0x110>
		trezor_sha512_Transform(pctx->idig, pctx->g, pctx->g);
    215c:	e0bffc17 	ldw	r2,-16(fp)
    2160:	10c01004 	addi	r3,r2,64
    2164:	e0bffc17 	ldw	r2,-16(fp)
    2168:	11003004 	addi	r4,r2,192
    216c:	e0bffc17 	ldw	r2,-16(fp)
    2170:	10803004 	addi	r2,r2,192
    2174:	100d883a 	mov	r6,r2
    2178:	200b883a 	mov	r5,r4
    217c:	1809883a 	mov	r4,r3
    2180:	00073a00 	call	73a0 <trezor_sha512_Transform>
		trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
    2184:	e0fffc17 	ldw	r3,-16(fp)
    2188:	e0bffc17 	ldw	r2,-16(fp)
    218c:	11003004 	addi	r4,r2,192
    2190:	e0bffc17 	ldw	r2,-16(fp)
    2194:	10803004 	addi	r2,r2,192
    2198:	100d883a 	mov	r6,r2
    219c:	200b883a 	mov	r5,r4
    21a0:	1809883a 	mov	r4,r3
    21a4:	00073a00 	call	73a0 <trezor_sha512_Transform>
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    21a8:	e03ffb15 	stw	zero,-20(fp)
    21ac:	00001a06 	br	2218 <pbkdf2_hmac_sha512_Update+0xf8>
			pctx->f[j] ^= pctx->g[j];
    21b0:	e0fffc17 	ldw	r3,-16(fp)
    21b4:	e0bffb17 	ldw	r2,-20(fp)
    21b8:	10800404 	addi	r2,r2,16
    21bc:	100490fa 	slli	r2,r2,3
    21c0:	1885883a 	add	r2,r3,r2
    21c4:	11000017 	ldw	r4,0(r2)
    21c8:	11400117 	ldw	r5,4(r2)
    21cc:	e0fffc17 	ldw	r3,-16(fp)
    21d0:	e0bffb17 	ldw	r2,-20(fp)
    21d4:	10800604 	addi	r2,r2,24
    21d8:	100490fa 	slli	r2,r2,3
    21dc:	188d883a 	add	r6,r3,r2
    21e0:	30800017 	ldw	r2,0(r6)
    21e4:	30c00117 	ldw	r3,4(r6)
    21e8:	20a0f03a 	xor	r16,r4,r2
    21ec:	28e2f03a 	xor	r17,r5,r3
    21f0:	e0fffc17 	ldw	r3,-16(fp)
    21f4:	e0bffb17 	ldw	r2,-20(fp)
    21f8:	10800404 	addi	r2,r2,16
    21fc:	100490fa 	slli	r2,r2,3
    2200:	1885883a 	add	r2,r3,r2
    2204:	14000015 	stw	r16,0(r2)
    2208:	14400115 	stw	r17,4(r2)
void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
		trezor_sha512_Transform(pctx->idig, pctx->g, pctx->g);
		trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
    220c:	e0bffb17 	ldw	r2,-20(fp)
    2210:	10800044 	addi	r2,r2,1
    2214:	e0bffb15 	stw	r2,-20(fp)
    2218:	e0bffb17 	ldw	r2,-20(fp)
    221c:	10800230 	cmpltui	r2,r2,8
    2220:	103fe31e 	bne	r2,zero,21b0 <__alt_mem_epcs_flash_controller+0xfdff91b0>
	pctx->first = 1;
}

void pbkdf2_hmac_sha512_Update(PBKDF2_HMAC_SHA512_CTX *pctx, uint32_t iterations)
{
	for (uint32_t i = pctx->first; i < iterations; i++) {
    2224:	e0bffa17 	ldw	r2,-24(fp)
    2228:	10800044 	addi	r2,r2,1
    222c:	e0bffa15 	stw	r2,-24(fp)
    2230:	e0fffa17 	ldw	r3,-24(fp)
    2234:	e0bffd17 	ldw	r2,-12(fp)
    2238:	18bfc836 	bltu	r3,r2,215c <__alt_mem_epcs_flash_controller+0xfdff915c>
		trezor_sha512_Transform(pctx->odig, pctx->g, pctx->g);
		for (uint32_t j = 0; j < SHA512_DIGEST_LENGTH / sizeof(uint64_t); j++) {
			pctx->f[j] ^= pctx->g[j];
		}
	}
	pctx->first = 0;
    223c:	e0bffc17 	ldw	r2,-16(fp)
    2240:	10005005 	stb	zero,320(r2)
}
    2244:	0001883a 	nop
    2248:	e6fffe04 	addi	sp,fp,-8
    224c:	dfc00317 	ldw	ra,12(sp)
    2250:	df000217 	ldw	fp,8(sp)
    2254:	dc400117 	ldw	r17,4(sp)
    2258:	dc000017 	ldw	r16,0(sp)
    225c:	dec00404 	addi	sp,sp,16
    2260:	f800283a 	ret

00002264 <pbkdf2_hmac_sha512_Final>:

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
    2264:	defff104 	addi	sp,sp,-60
    2268:	dfc00e15 	stw	ra,56(sp)
    226c:	df000d15 	stw	fp,52(sp)
    2270:	ddc00c15 	stw	r23,48(sp)
    2274:	dd800b15 	stw	r22,44(sp)
    2278:	dd400a15 	stw	r21,40(sp)
    227c:	dd000915 	stw	r20,36(sp)
    2280:	dcc00815 	stw	r19,32(sp)
    2284:	dc800715 	stw	r18,28(sp)
    2288:	dc400615 	stw	r17,24(sp)
    228c:	dc000515 	stw	r16,20(sp)
    2290:	df000d04 	addi	fp,sp,52
    2294:	e13ff615 	stw	r4,-40(fp)
    2298:	e17ff715 	stw	r5,-36(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    229c:	e03ff315 	stw	zero,-52(fp)
    22a0:	00004506 	br	23b8 <pbkdf2_hmac_sha512_Final+0x154>
		REVERSE64(pctx->f[k], pctx->f[k]);
    22a4:	e17ff617 	ldw	r5,-40(fp)
    22a8:	e13ff317 	ldw	r4,-52(fp)
    22ac:	21000404 	addi	r4,r4,16
    22b0:	200890fa 	slli	r4,r4,3
    22b4:	2909883a 	add	r4,r5,r4
    22b8:	21400017 	ldw	r5,0(r4)
    22bc:	e17ff415 	stw	r5,-48(fp)
    22c0:	21000117 	ldw	r4,4(r4)
    22c4:	e13ff515 	stw	r4,-44(fp)
    22c8:	e5bff517 	ldw	r22,-44(fp)
    22cc:	e5fff417 	ldw	r23,-48(fp)
    22d0:	e5bff415 	stw	r22,-48(fp)
    22d4:	e5fff515 	stw	r23,-44(fp)
    22d8:	e17ff417 	ldw	r5,-48(fp)
    22dc:	013fc074 	movhi	r4,65281
    22e0:	213fc004 	addi	r4,r4,-256
    22e4:	2918703a 	and	r12,r5,r4
    22e8:	e17ff517 	ldw	r5,-44(fp)
    22ec:	013fc074 	movhi	r4,65281
    22f0:	213fc004 	addi	r4,r4,-256
    22f4:	291a703a 	and	r13,r5,r4
    22f8:	6808963a 	slli	r4,r13,24
    22fc:	6004d23a 	srli	r2,r12,8
    2300:	2084b03a 	or	r2,r4,r2
    2304:	6806d23a 	srli	r3,r13,8
    2308:	e17ff417 	ldw	r5,-48(fp)
    230c:	01003ff4 	movhi	r4,255
    2310:	21003fc4 	addi	r4,r4,255
    2314:	291c703a 	and	r14,r5,r4
    2318:	e17ff517 	ldw	r5,-44(fp)
    231c:	01003ff4 	movhi	r4,255
    2320:	21003fc4 	addi	r4,r4,255
    2324:	291e703a 	and	r15,r5,r4
    2328:	7008d63a 	srli	r4,r14,24
    232c:	780e923a 	slli	r7,r15,8
    2330:	21ceb03a 	or	r7,r4,r7
    2334:	700c923a 	slli	r6,r14,8
    2338:	1188b03a 	or	r4,r2,r6
    233c:	e13ff415 	stw	r4,-48(fp)
    2340:	19c8b03a 	or	r4,r3,r7
    2344:	e13ff515 	stw	r4,-44(fp)
    2348:	e13ff417 	ldw	r4,-48(fp)
    234c:	243fffec 	andhi	r16,r4,65535
    2350:	e13ff517 	ldw	r4,-44(fp)
    2354:	247fffec 	andhi	r17,r4,65535
    2358:	8808943a 	slli	r4,r17,16
    235c:	8010d43a 	srli	r8,r16,16
    2360:	2210b03a 	or	r8,r4,r8
    2364:	8812d43a 	srli	r9,r17,16
    2368:	e13ff417 	ldw	r4,-48(fp)
    236c:	24bfffcc 	andi	r18,r4,65535
    2370:	e13ff517 	ldw	r4,-44(fp)
    2374:	24ffffcc 	andi	r19,r4,65535
    2378:	9008d43a 	srli	r4,r18,16
    237c:	9816943a 	slli	r11,r19,16
    2380:	22d6b03a 	or	r11,r4,r11
    2384:	9014943a 	slli	r10,r18,16
    2388:	42a8b03a 	or	r20,r8,r10
    238c:	4aeab03a 	or	r21,r9,r11
    2390:	e17ff617 	ldw	r5,-40(fp)
    2394:	e13ff317 	ldw	r4,-52(fp)
    2398:	21000404 	addi	r4,r4,16
    239c:	200890fa 	slli	r4,r4,3
    23a0:	2909883a 	add	r4,r5,r4
    23a4:	25000015 	stw	r20,0(r4)
    23a8:	25400115 	stw	r21,4(r4)
}

void pbkdf2_hmac_sha512_Final(PBKDF2_HMAC_SHA512_CTX *pctx, uint8_t *key)
{
#if BYTE_ORDER == LITTLE_ENDIAN
	for (uint32_t k = 0; k < SHA512_DIGEST_LENGTH/sizeof(uint64_t); k++) {
    23ac:	e13ff317 	ldw	r4,-52(fp)
    23b0:	21000044 	addi	r4,r4,1
    23b4:	e13ff315 	stw	r4,-52(fp)
    23b8:	e13ff317 	ldw	r4,-52(fp)
    23bc:	21000230 	cmpltui	r4,r4,8
    23c0:	203fb81e 	bne	r4,zero,22a4 <__alt_mem_epcs_flash_controller+0xfdff92a4>
		REVERSE64(pctx->f[k], pctx->f[k]);
	}
#endif
	memcpy(key, pctx->f, SHA512_DIGEST_LENGTH);
    23c4:	e0bff617 	ldw	r2,-40(fp)
    23c8:	10802004 	addi	r2,r2,128
    23cc:	01801004 	movi	r6,64
    23d0:	100b883a 	mov	r5,r2
    23d4:	e13ff717 	ldw	r4,-36(fp)
    23d8:	00095dc0 	call	95dc <memcpy>
	memzero(pctx, sizeof(PBKDF2_HMAC_SHA512_CTX));
    23dc:	01405104 	movi	r5,324
    23e0:	e13ff617 	ldw	r4,-40(fp)
    23e4:	00017c40 	call	17c4 <memzero>
}
    23e8:	0001883a 	nop
    23ec:	e6fff804 	addi	sp,fp,-32
    23f0:	dfc00917 	ldw	ra,36(sp)
    23f4:	df000817 	ldw	fp,32(sp)
    23f8:	ddc00717 	ldw	r23,28(sp)
    23fc:	dd800617 	ldw	r22,24(sp)
    2400:	dd400517 	ldw	r21,20(sp)
    2404:	dd000417 	ldw	r20,16(sp)
    2408:	dcc00317 	ldw	r19,12(sp)
    240c:	dc800217 	ldw	r18,8(sp)
    2410:	dc400117 	ldw	r17,4(sp)
    2414:	dc000017 	ldw	r16,0(sp)
    2418:	dec00a04 	addi	sp,sp,40
    241c:	f800283a 	ret

00002420 <pbkdf2_hmac_sha512>:

void pbkdf2_hmac_sha512(const uint8_t *pass, int passlen, const uint8_t *salt, int saltlen, uint32_t iterations, uint8_t *key, int keylen)
{
    2420:	deff9304 	addi	sp,sp,-436
    2424:	dfc06c15 	stw	ra,432(sp)
    2428:	df006b15 	stw	fp,428(sp)
    242c:	df006b04 	addi	fp,sp,428
    2430:	e13ffc15 	stw	r4,-16(fp)
    2434:	e17ffd15 	stw	r5,-12(fp)
    2438:	e1bffe15 	stw	r6,-8(fp)
    243c:	e1ffff15 	stw	r7,-4(fp)
	uint32_t last_block_size = keylen % SHA512_DIGEST_LENGTH;
    2440:	e0c00417 	ldw	r3,16(fp)
    2444:	00a00034 	movhi	r2,32768
    2448:	10800fc4 	addi	r2,r2,63
    244c:	1884703a 	and	r2,r3,r2
    2450:	1000040e 	bge	r2,zero,2464 <pbkdf2_hmac_sha512+0x44>
    2454:	10bfffc4 	addi	r2,r2,-1
    2458:	00fff004 	movi	r3,-64
    245c:	10c4b03a 	or	r2,r2,r3
    2460:	10800044 	addi	r2,r2,1
    2464:	e0bf9715 	stw	r2,-420(fp)
	uint32_t blocks_count = keylen / SHA512_DIGEST_LENGTH;
    2468:	e0800417 	ldw	r2,16(fp)
    246c:	1000010e 	bge	r2,zero,2474 <pbkdf2_hmac_sha512+0x54>
    2470:	10800fc4 	addi	r2,r2,63
    2474:	1005d1ba 	srai	r2,r2,6
    2478:	e0bf9815 	stw	r2,-416(fp)
	if (last_block_size) {
    247c:	e0bf9717 	ldw	r2,-420(fp)
    2480:	10000426 	beq	r2,zero,2494 <pbkdf2_hmac_sha512+0x74>
		blocks_count++;
    2484:	e0bf9817 	ldw	r2,-416(fp)
    2488:	10800044 	addi	r2,r2,1
    248c:	e0bf9815 	stw	r2,-416(fp)
    2490:	00000206 	br	249c <pbkdf2_hmac_sha512+0x7c>
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
    2494:	00801004 	movi	r2,64
    2498:	e0bf9715 	stw	r2,-420(fp)
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    249c:	00800044 	movi	r2,1
    24a0:	e0bf9915 	stw	r2,-412(fp)
    24a4:	00003106 	br	256c <pbkdf2_hmac_sha512+0x14c>
		PBKDF2_HMAC_SHA512_CTX pctx;
		pbkdf2_hmac_sha512_Init(&pctx, pass, passlen, salt, saltlen, blocknr);
    24a8:	e0ff9b04 	addi	r3,fp,-404
    24ac:	e0bf9917 	ldw	r2,-412(fp)
    24b0:	d8800115 	stw	r2,4(sp)
    24b4:	e0bfff17 	ldw	r2,-4(fp)
    24b8:	d8800015 	stw	r2,0(sp)
    24bc:	e1fffe17 	ldw	r7,-8(fp)
    24c0:	e1bffd17 	ldw	r6,-12(fp)
    24c4:	e17ffc17 	ldw	r5,-16(fp)
    24c8:	1809883a 	mov	r4,r3
    24cc:	0001dac0 	call	1dac <pbkdf2_hmac_sha512_Init>
		pbkdf2_hmac_sha512_Update(&pctx, iterations);
    24d0:	e0bf9b04 	addi	r2,fp,-404
    24d4:	e1400217 	ldw	r5,8(fp)
    24d8:	1009883a 	mov	r4,r2
    24dc:	00021200 	call	2120 <pbkdf2_hmac_sha512_Update>
		uint8_t digest[SHA512_DIGEST_LENGTH];
		pbkdf2_hmac_sha512_Final(&pctx, digest);
    24e0:	e0ffec04 	addi	r3,fp,-80
    24e4:	e0bf9b04 	addi	r2,fp,-404
    24e8:	180b883a 	mov	r5,r3
    24ec:	1009883a 	mov	r4,r2
    24f0:	00022640 	call	2264 <pbkdf2_hmac_sha512_Final>
		uint32_t key_offset = (blocknr - 1) * SHA512_DIGEST_LENGTH;
    24f4:	e0ff9917 	ldw	r3,-412(fp)
    24f8:	00810034 	movhi	r2,1024
    24fc:	10bfffc4 	addi	r2,r2,-1
    2500:	1885883a 	add	r2,r3,r2
    2504:	100491ba 	slli	r2,r2,6
    2508:	e0bf9a15 	stw	r2,-408(fp)
		if (blocknr < blocks_count) {
    250c:	e0ff9917 	ldw	r3,-412(fp)
    2510:	e0bf9817 	ldw	r2,-416(fp)
    2514:	18800a2e 	bgeu	r3,r2,2540 <pbkdf2_hmac_sha512+0x120>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
    2518:	e0c00317 	ldw	r3,12(fp)
    251c:	e0bf9a17 	ldw	r2,-408(fp)
    2520:	1885883a 	add	r2,r3,r2
    2524:	1009883a 	mov	r4,r2
    2528:	e0bfec04 	addi	r2,fp,-80
    252c:	00c01004 	movi	r3,64
    2530:	180d883a 	mov	r6,r3
    2534:	100b883a 	mov	r5,r2
    2538:	00095dc0 	call	95dc <memcpy>
    253c:	00000806 	br	2560 <pbkdf2_hmac_sha512+0x140>
		} else {
			memcpy(key + key_offset, digest, last_block_size);
    2540:	e0c00317 	ldw	r3,12(fp)
    2544:	e0bf9a17 	ldw	r2,-408(fp)
    2548:	1885883a 	add	r2,r3,r2
    254c:	e0ffec04 	addi	r3,fp,-80
    2550:	e1bf9717 	ldw	r6,-420(fp)
    2554:	180b883a 	mov	r5,r3
    2558:	1009883a 	mov	r4,r2
    255c:	00095dc0 	call	95dc <memcpy>
	if (last_block_size) {
		blocks_count++;
	} else {
		last_block_size = SHA512_DIGEST_LENGTH;
	}
	for (uint32_t blocknr = 1; blocknr <= blocks_count; blocknr++) {
    2560:	e0bf9917 	ldw	r2,-412(fp)
    2564:	10800044 	addi	r2,r2,1
    2568:	e0bf9915 	stw	r2,-412(fp)
    256c:	e0bf9917 	ldw	r2,-412(fp)
    2570:	e0ff9817 	ldw	r3,-416(fp)
    2574:	18bfcc2e 	bgeu	r3,r2,24a8 <__alt_mem_epcs_flash_controller+0xfdff94a8>
			memcpy(key + key_offset, digest, SHA512_DIGEST_LENGTH);
		} else {
			memcpy(key + key_offset, digest, last_block_size);
		}
	}
}
    2578:	0001883a 	nop
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <random32>:

#include <stdio.h>
#include <time.h>

uint32_t random32(void)
{
    2590:	defffd04 	addi	sp,sp,-12
    2594:	dfc00215 	stw	ra,8(sp)
    2598:	df000115 	stw	fp,4(sp)
    259c:	dc000015 	stw	r16,0(sp)
    25a0:	df000104 	addi	fp,sp,4
	static int initialized = 0;
	if (!initialized) {
    25a4:	d0a50c17 	ldw	r2,-27600(gp)
    25a8:	1000061e 	bne	r2,zero,25c4 <random32+0x34>
		srand((unsigned)time(NULL));
    25ac:	0009883a 	mov	r4,zero
    25b0:	0009ac00 	call	9ac0 <time>
    25b4:	1009883a 	mov	r4,r2
    25b8:	000997c0 	call	997c <srand>
		initialized = 1;
    25bc:	00800044 	movi	r2,1
    25c0:	d0a50c15 	stw	r2,-27600(gp)
	}
	return ((rand() & 0xFF) | ((rand() & 0xFF) << 8) | ((rand() & 0xFF) << 16) | ((uint32_t) (rand() & 0xFF) << 24));
    25c4:	00099900 	call	9990 <rand>
    25c8:	14003fcc 	andi	r16,r2,255
    25cc:	00099900 	call	9990 <rand>
    25d0:	1004923a 	slli	r2,r2,8
    25d4:	10bfffcc 	andi	r2,r2,65535
    25d8:	80a0b03a 	or	r16,r16,r2
    25dc:	00099900 	call	9990 <rand>
    25e0:	10803fcc 	andi	r2,r2,255
    25e4:	1004943a 	slli	r2,r2,16
    25e8:	8084b03a 	or	r2,r16,r2
    25ec:	1021883a 	mov	r16,r2
    25f0:	00099900 	call	9990 <rand>
    25f4:	1004963a 	slli	r2,r2,24
    25f8:	8084b03a 	or	r2,r16,r2
}
    25fc:	e6ffff04 	addi	sp,fp,-4
    2600:	dfc00217 	ldw	ra,8(sp)
    2604:	df000117 	ldw	fp,4(sp)
    2608:	dc000017 	ldw	r16,0(sp)
    260c:	dec00304 	addi	sp,sp,12
    2610:	f800283a 	ret

00002614 <random_buffer>:
//

//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
    2614:	defffa04 	addi	sp,sp,-24
    2618:	dfc00515 	stw	ra,20(sp)
    261c:	df000415 	stw	fp,16(sp)
    2620:	df000404 	addi	fp,sp,16
    2624:	e13ffe15 	stw	r4,-8(fp)
    2628:	e17fff15 	stw	r5,-4(fp)
	uint32_t r = 0;
    262c:	e03ffc15 	stw	zero,-16(fp)
	for (size_t i = 0; i < len; i++) {
    2630:	e03ffd15 	stw	zero,-12(fp)
    2634:	00001106 	br	267c <random_buffer+0x68>
		if (i % 4 == 0) {
    2638:	e0bffd17 	ldw	r2,-12(fp)
    263c:	108000cc 	andi	r2,r2,3
    2640:	1000021e 	bne	r2,zero,264c <random_buffer+0x38>
			r = random32();
    2644:	00025900 	call	2590 <random32>
    2648:	e0bffc15 	stw	r2,-16(fp)
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
    264c:	e0fffe17 	ldw	r3,-8(fp)
    2650:	e0bffd17 	ldw	r2,-12(fp)
    2654:	1885883a 	add	r2,r3,r2
    2658:	e0fffd17 	ldw	r3,-12(fp)
    265c:	18c000cc 	andi	r3,r3,3
    2660:	180690fa 	slli	r3,r3,3
    2664:	e13ffc17 	ldw	r4,-16(fp)
    2668:	20c6d83a 	srl	r3,r4,r3
    266c:	10c00005 	stb	r3,0(r2)
//With __attribute__((weak)) I can declare a function which will be overridden by a 
// function with the same name, but without __attribute__((weak)) parameter.
void __attribute__((weak)) random_buffer(uint8_t *buf, size_t len)
{
	uint32_t r = 0;
	for (size_t i = 0; i < len; i++) {
    2670:	e0bffd17 	ldw	r2,-12(fp)
    2674:	10800044 	addi	r2,r2,1
    2678:	e0bffd15 	stw	r2,-12(fp)
    267c:	e0fffd17 	ldw	r3,-12(fp)
    2680:	e0bfff17 	ldw	r2,-4(fp)
    2684:	18bfec36 	bltu	r3,r2,2638 <__alt_mem_epcs_flash_controller+0xfdff9638>
		if (i % 4 == 0) {
			r = random32();
		}
		buf[i] = (r >> ((i % 4) * 8)) & 0xFF;
	}
}
    2688:	0001883a 	nop
    268c:	e037883a 	mov	sp,fp
    2690:	dfc00117 	ldw	ra,4(sp)
    2694:	df000017 	ldw	fp,0(sp)
    2698:	dec00204 	addi	sp,sp,8
    269c:	f800283a 	ret

000026a0 <sha256_Init>:
    0x5be0cd19137e2179ULL};


/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context)
{
    26a0:	defffd04 	addi	sp,sp,-12
    26a4:	dfc00215 	stw	ra,8(sp)
    26a8:	df000115 	stw	fp,4(sp)
    26ac:	df000104 	addi	fp,sp,4
    26b0:	e13fff15 	stw	r4,-4(fp)
    if (context == (SHA256_CTX*)0) {
    26b4:	e0bfff17 	ldw	r2,-4(fp)
    26b8:	10001026 	beq	r2,zero,26fc <sha256_Init+0x5c>
        return;
    }
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    26bc:	e0bfff17 	ldw	r2,-4(fp)
    26c0:	01800804 	movi	r6,32
    26c4:	01400074 	movhi	r5,1
    26c8:	2958d204 	addi	r5,r5,25416
    26cc:	1009883a 	mov	r4,r2
    26d0:	00095dc0 	call	95dc <memcpy>
    MEMSET_BZERO(context->buffer, SHA256_BLOCK_LENGTH);
    26d4:	e0bfff17 	ldw	r2,-4(fp)
    26d8:	10800a04 	addi	r2,r2,40
    26dc:	01801004 	movi	r6,64
    26e0:	000b883a 	mov	r5,zero
    26e4:	1009883a 	mov	r4,r2
    26e8:	00096040 	call	9604 <memset>
    context->bitcount = 0;
    26ec:	e0bfff17 	ldw	r2,-4(fp)
    26f0:	10000815 	stw	zero,32(r2)
    26f4:	10000915 	stw	zero,36(r2)
    26f8:	00000106 	br	2700 <sha256_Init+0x60>

/*** SHA-256: *********************************************************/
void sha256_Init(SHA256_CTX* context)
{
    if (context == (SHA256_CTX*)0) {
        return;
    26fc:	0001883a 	nop
    }
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    MEMSET_BZERO(context->buffer, SHA256_BLOCK_LENGTH);
    context->bitcount = 0;
}
    2700:	e037883a 	mov	sp,fp
    2704:	dfc00117 	ldw	ra,4(sp)
    2708:	df000017 	ldw	fp,0(sp)
    270c:	dec00204 	addi	sp,sp,8
    2710:	f800283a 	ret

00002714 <sha256_Transform>:
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha256_Transform(SHA256_CTX* context, const sha2_word32* data)
{
    2714:	deffee04 	addi	sp,sp,-72
    2718:	df001115 	stw	fp,68(sp)
    271c:	df001104 	addi	fp,sp,68
    2720:	e13ffe15 	stw	r4,-8(fp)
    2724:	e17fff15 	stw	r5,-4(fp)
    sha2_word32 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word32 T1, T2, *W256;
    int j;

    W256 = (sha2_word32*)context->buffer;
    2728:	e0bffe17 	ldw	r2,-8(fp)
    272c:	10800a04 	addi	r2,r2,40
    2730:	e0bff815 	stw	r2,-32(fp)

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
    2734:	e0bffe17 	ldw	r2,-8(fp)
    2738:	10800017 	ldw	r2,0(r2)
    273c:	e0bfef15 	stw	r2,-68(fp)
    b = context->state[1];
    2740:	e0bffe17 	ldw	r2,-8(fp)
    2744:	10800117 	ldw	r2,4(r2)
    2748:	e0bff015 	stw	r2,-64(fp)
    c = context->state[2];
    274c:	e0bffe17 	ldw	r2,-8(fp)
    2750:	10800217 	ldw	r2,8(r2)
    2754:	e0bff115 	stw	r2,-60(fp)
    d = context->state[3];
    2758:	e0bffe17 	ldw	r2,-8(fp)
    275c:	10800317 	ldw	r2,12(r2)
    2760:	e0bff215 	stw	r2,-56(fp)
    e = context->state[4];
    2764:	e0bffe17 	ldw	r2,-8(fp)
    2768:	10800417 	ldw	r2,16(r2)
    276c:	e0bff315 	stw	r2,-52(fp)
    f = context->state[5];
    2770:	e0bffe17 	ldw	r2,-8(fp)
    2774:	10800517 	ldw	r2,20(r2)
    2778:	e0bff415 	stw	r2,-48(fp)
    g = context->state[6];
    277c:	e0bffe17 	ldw	r2,-8(fp)
    2780:	10800617 	ldw	r2,24(r2)
    2784:	e0bff515 	stw	r2,-44(fp)
    h = context->state[7];
    2788:	e0bffe17 	ldw	r2,-8(fp)
    278c:	10800717 	ldw	r2,28(r2)
    2790:	e0bff615 	stw	r2,-40(fp)

    j = 0;
    2794:	e03ff715 	stw	zero,-36(fp)
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Copy data while converting to host byte order */
        REVERSE32(*data++, W256[j]);
    2798:	e0bfff17 	ldw	r2,-4(fp)
    279c:	10c00104 	addi	r3,r2,4
    27a0:	e0ffff15 	stw	r3,-4(fp)
    27a4:	10800017 	ldw	r2,0(r2)
    27a8:	e0bff915 	stw	r2,-28(fp)
    27ac:	e0bff917 	ldw	r2,-28(fp)
    27b0:	1004143a 	roli	r2,r2,16
    27b4:	e0bff915 	stw	r2,-28(fp)
    27b8:	e0bff717 	ldw	r2,-36(fp)
    27bc:	1085883a 	add	r2,r2,r2
    27c0:	1085883a 	add	r2,r2,r2
    27c4:	1007883a 	mov	r3,r2
    27c8:	e0bff817 	ldw	r2,-32(fp)
    27cc:	10c7883a 	add	r3,r2,r3
    27d0:	e13ff917 	ldw	r4,-28(fp)
    27d4:	00bfc074 	movhi	r2,65281
    27d8:	10bfc004 	addi	r2,r2,-256
    27dc:	2084703a 	and	r2,r4,r2
    27e0:	1008d23a 	srli	r4,r2,8
    27e4:	e17ff917 	ldw	r5,-28(fp)
    27e8:	00803ff4 	movhi	r2,255
    27ec:	10803fc4 	addi	r2,r2,255
    27f0:	2884703a 	and	r2,r5,r2
    27f4:	1004923a 	slli	r2,r2,8
    27f8:	2084b03a 	or	r2,r4,r2
    27fc:	18800015 	stw	r2,0(r3)
        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + W256[j];
    2800:	e0fff317 	ldw	r3,-52(fp)
    2804:	00800184 	movi	r2,6
    2808:	1886583a 	ror	r3,r3,r2
    280c:	e13ff317 	ldw	r4,-52(fp)
    2810:	008002c4 	movi	r2,11
    2814:	2084583a 	ror	r2,r4,r2
    2818:	1886f03a 	xor	r3,r3,r2
    281c:	e0bff317 	ldw	r2,-52(fp)
    2820:	100411fa 	roli	r2,r2,7
    2824:	1886f03a 	xor	r3,r3,r2
    2828:	e0bff617 	ldw	r2,-40(fp)
    282c:	1887883a 	add	r3,r3,r2
    2830:	e13ff317 	ldw	r4,-52(fp)
    2834:	e0bff417 	ldw	r2,-48(fp)
    2838:	2088703a 	and	r4,r4,r2
    283c:	e0bff317 	ldw	r2,-52(fp)
    2840:	008a303a 	nor	r5,zero,r2
    2844:	e0bff517 	ldw	r2,-44(fp)
    2848:	2884703a 	and	r2,r5,r2
    284c:	2084f03a 	xor	r2,r4,r2
    2850:	1889883a 	add	r4,r3,r2
    2854:	00800074 	movhi	r2,1
    2858:	10989204 	addi	r2,r2,25160
    285c:	e0fff717 	ldw	r3,-36(fp)
    2860:	18c7883a 	add	r3,r3,r3
    2864:	18c7883a 	add	r3,r3,r3
    2868:	10c5883a 	add	r2,r2,r3
    286c:	10800017 	ldw	r2,0(r2)
    2870:	2087883a 	add	r3,r4,r2
    2874:	e0bff717 	ldw	r2,-36(fp)
    2878:	1085883a 	add	r2,r2,r2
    287c:	1085883a 	add	r2,r2,r2
    2880:	1009883a 	mov	r4,r2
    2884:	e0bff817 	ldw	r2,-32(fp)
    2888:	1105883a 	add	r2,r2,r4
    288c:	10800017 	ldw	r2,0(r2)
    2890:	1885883a 	add	r2,r3,r2
    2894:	e0bffa15 	stw	r2,-24(fp)
#else  /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-256 compression function to update a..h with copy */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_256(a) + Maj(a, b, c);
    2898:	e0ffef17 	ldw	r3,-68(fp)
    289c:	00800084 	movi	r2,2
    28a0:	1886583a 	ror	r3,r3,r2
    28a4:	e13fef17 	ldw	r4,-68(fp)
    28a8:	00800344 	movi	r2,13
    28ac:	2084583a 	ror	r2,r4,r2
    28b0:	1886f03a 	xor	r3,r3,r2
    28b4:	e0bfef17 	ldw	r2,-68(fp)
    28b8:	100412ba 	roli	r2,r2,10
    28bc:	1886f03a 	xor	r3,r3,r2
    28c0:	e13fef17 	ldw	r4,-68(fp)
    28c4:	e0bff017 	ldw	r2,-64(fp)
    28c8:	2088703a 	and	r4,r4,r2
    28cc:	e17fef17 	ldw	r5,-68(fp)
    28d0:	e0bff117 	ldw	r2,-60(fp)
    28d4:	2884703a 	and	r2,r5,r2
    28d8:	2088f03a 	xor	r4,r4,r2
    28dc:	e17ff017 	ldw	r5,-64(fp)
    28e0:	e0bff117 	ldw	r2,-60(fp)
    28e4:	2884703a 	and	r2,r5,r2
    28e8:	2084f03a 	xor	r2,r4,r2
    28ec:	1885883a 	add	r2,r3,r2
    28f0:	e0bffb15 	stw	r2,-20(fp)
        h = g;
    28f4:	e0bff517 	ldw	r2,-44(fp)
    28f8:	e0bff615 	stw	r2,-40(fp)
        g = f;
    28fc:	e0bff417 	ldw	r2,-48(fp)
    2900:	e0bff515 	stw	r2,-44(fp)
        f = e;
    2904:	e0bff317 	ldw	r2,-52(fp)
    2908:	e0bff415 	stw	r2,-48(fp)
        e = d + T1;
    290c:	e0fff217 	ldw	r3,-56(fp)
    2910:	e0bffa17 	ldw	r2,-24(fp)
    2914:	1885883a 	add	r2,r3,r2
    2918:	e0bff315 	stw	r2,-52(fp)
        d = c;
    291c:	e0bff117 	ldw	r2,-60(fp)
    2920:	e0bff215 	stw	r2,-56(fp)
        c = b;
    2924:	e0bff017 	ldw	r2,-64(fp)
    2928:	e0bff115 	stw	r2,-60(fp)
        b = a;
    292c:	e0bfef17 	ldw	r2,-68(fp)
    2930:	e0bff015 	stw	r2,-64(fp)
        a = T1 + T2;
    2934:	e0fffa17 	ldw	r3,-24(fp)
    2938:	e0bffb17 	ldw	r2,-20(fp)
    293c:	1885883a 	add	r2,r3,r2
    2940:	e0bfef15 	stw	r2,-68(fp)

        j++;
    2944:	e0bff717 	ldw	r2,-36(fp)
    2948:	10800044 	addi	r2,r2,1
    294c:	e0bff715 	stw	r2,-36(fp)
    } while (j < 16);
    2950:	e0bff717 	ldw	r2,-36(fp)
    2954:	10800410 	cmplti	r2,r2,16
    2958:	103f8f1e 	bne	r2,zero,2798 <__alt_mem_epcs_flash_controller+0xfdff9798>

    do {
        /* Part of the message block expansion: */
        s0 = W256[(j + 1) & 0x0f];
    295c:	e0bff717 	ldw	r2,-36(fp)
    2960:	10800044 	addi	r2,r2,1
    2964:	108003cc 	andi	r2,r2,15
    2968:	1085883a 	add	r2,r2,r2
    296c:	1085883a 	add	r2,r2,r2
    2970:	1007883a 	mov	r3,r2
    2974:	e0bff817 	ldw	r2,-32(fp)
    2978:	10c5883a 	add	r2,r2,r3
    297c:	10800017 	ldw	r2,0(r2)
    2980:	e0bffc15 	stw	r2,-16(fp)
        s0 = sigma0_256(s0);
    2984:	e0fffc17 	ldw	r3,-16(fp)
    2988:	008001c4 	movi	r2,7
    298c:	1886583a 	ror	r3,r3,r2
    2990:	e0bffc17 	ldw	r2,-16(fp)
    2994:	100413ba 	roli	r2,r2,14
    2998:	1886f03a 	xor	r3,r3,r2
    299c:	e0bffc17 	ldw	r2,-16(fp)
    29a0:	1004d0fa 	srli	r2,r2,3
    29a4:	1884f03a 	xor	r2,r3,r2
    29a8:	e0bffc15 	stw	r2,-16(fp)
        s1 = W256[(j + 14) & 0x0f];
    29ac:	e0bff717 	ldw	r2,-36(fp)
    29b0:	10800384 	addi	r2,r2,14
    29b4:	108003cc 	andi	r2,r2,15
    29b8:	1085883a 	add	r2,r2,r2
    29bc:	1085883a 	add	r2,r2,r2
    29c0:	1007883a 	mov	r3,r2
    29c4:	e0bff817 	ldw	r2,-32(fp)
    29c8:	10c5883a 	add	r2,r2,r3
    29cc:	10800017 	ldw	r2,0(r2)
    29d0:	e0bffd15 	stw	r2,-12(fp)
        s1 = sigma1_256(s1);
    29d4:	e0bffd17 	ldw	r2,-12(fp)
    29d8:	100613fa 	roli	r3,r2,15
    29dc:	e0bffd17 	ldw	r2,-12(fp)
    29e0:	1004137a 	roli	r2,r2,13
    29e4:	1886f03a 	xor	r3,r3,r2
    29e8:	e0bffd17 	ldw	r2,-12(fp)
    29ec:	1004d2ba 	srli	r2,r2,10
    29f0:	1884f03a 	xor	r2,r3,r2
    29f4:	e0bffd15 	stw	r2,-12(fp)

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
    29f8:	e0fff317 	ldw	r3,-52(fp)
    29fc:	00800184 	movi	r2,6
    2a00:	1886583a 	ror	r3,r3,r2
    2a04:	e13ff317 	ldw	r4,-52(fp)
    2a08:	008002c4 	movi	r2,11
    2a0c:	2084583a 	ror	r2,r4,r2
    2a10:	1886f03a 	xor	r3,r3,r2
    2a14:	e0bff317 	ldw	r2,-52(fp)
    2a18:	100411fa 	roli	r2,r2,7
    2a1c:	1886f03a 	xor	r3,r3,r2
    2a20:	e0bff617 	ldw	r2,-40(fp)
    2a24:	1887883a 	add	r3,r3,r2
    2a28:	e13ff317 	ldw	r4,-52(fp)
    2a2c:	e0bff417 	ldw	r2,-48(fp)
    2a30:	2088703a 	and	r4,r4,r2
    2a34:	e0bff317 	ldw	r2,-52(fp)
    2a38:	008a303a 	nor	r5,zero,r2
    2a3c:	e0bff517 	ldw	r2,-44(fp)
    2a40:	2884703a 	and	r2,r5,r2
    2a44:	2084f03a 	xor	r2,r4,r2
    2a48:	1889883a 	add	r4,r3,r2
    2a4c:	00800074 	movhi	r2,1
    2a50:	10989204 	addi	r2,r2,25160
    2a54:	e0fff717 	ldw	r3,-36(fp)
    2a58:	18c7883a 	add	r3,r3,r3
    2a5c:	18c7883a 	add	r3,r3,r3
    2a60:	10c5883a 	add	r2,r2,r3
    2a64:	10800017 	ldw	r2,0(r2)
    2a68:	2089883a 	add	r4,r4,r2
             (W256[j & 0x0f] += s1 + W256[(j + 9) & 0x0f] + s0);
    2a6c:	e0bff717 	ldw	r2,-36(fp)
    2a70:	108003cc 	andi	r2,r2,15
    2a74:	1085883a 	add	r2,r2,r2
    2a78:	1085883a 	add	r2,r2,r2
    2a7c:	1007883a 	mov	r3,r2
    2a80:	e0bff817 	ldw	r2,-32(fp)
    2a84:	10c5883a 	add	r2,r2,r3
    2a88:	e0fff717 	ldw	r3,-36(fp)
    2a8c:	18c003cc 	andi	r3,r3,15
    2a90:	18c7883a 	add	r3,r3,r3
    2a94:	18c7883a 	add	r3,r3,r3
    2a98:	180b883a 	mov	r5,r3
    2a9c:	e0fff817 	ldw	r3,-32(fp)
    2aa0:	1947883a 	add	r3,r3,r5
    2aa4:	19400017 	ldw	r5,0(r3)
    2aa8:	e0fff717 	ldw	r3,-36(fp)
    2aac:	18c00244 	addi	r3,r3,9
    2ab0:	18c003cc 	andi	r3,r3,15
    2ab4:	18c7883a 	add	r3,r3,r3
    2ab8:	18c7883a 	add	r3,r3,r3
    2abc:	180d883a 	mov	r6,r3
    2ac0:	e0fff817 	ldw	r3,-32(fp)
    2ac4:	1987883a 	add	r3,r3,r6
    2ac8:	19800017 	ldw	r6,0(r3)
    2acc:	e0fffd17 	ldw	r3,-12(fp)
    2ad0:	30cd883a 	add	r6,r6,r3
    2ad4:	e0fffc17 	ldw	r3,-16(fp)
    2ad8:	30c7883a 	add	r3,r6,r3
    2adc:	28c7883a 	add	r3,r5,r3
    2ae0:	10c00015 	stw	r3,0(r2)
    2ae4:	10800017 	ldw	r2,0(r2)
        s0 = sigma0_256(s0);
        s1 = W256[(j + 14) & 0x0f];
        s1 = sigma1_256(s1);

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
    2ae8:	2085883a 	add	r2,r4,r2
    2aec:	e0bffa15 	stw	r2,-24(fp)
             (W256[j & 0x0f] += s1 + W256[(j + 9) & 0x0f] + s0);
        T2 = Sigma0_256(a) + Maj(a, b, c);
    2af0:	e0ffef17 	ldw	r3,-68(fp)
    2af4:	00800084 	movi	r2,2
    2af8:	1886583a 	ror	r3,r3,r2
    2afc:	e13fef17 	ldw	r4,-68(fp)
    2b00:	00800344 	movi	r2,13
    2b04:	2084583a 	ror	r2,r4,r2
    2b08:	1886f03a 	xor	r3,r3,r2
    2b0c:	e0bfef17 	ldw	r2,-68(fp)
    2b10:	100412ba 	roli	r2,r2,10
    2b14:	1886f03a 	xor	r3,r3,r2
    2b18:	e13fef17 	ldw	r4,-68(fp)
    2b1c:	e0bff017 	ldw	r2,-64(fp)
    2b20:	2088703a 	and	r4,r4,r2
    2b24:	e17fef17 	ldw	r5,-68(fp)
    2b28:	e0bff117 	ldw	r2,-60(fp)
    2b2c:	2884703a 	and	r2,r5,r2
    2b30:	2088f03a 	xor	r4,r4,r2
    2b34:	e17ff017 	ldw	r5,-64(fp)
    2b38:	e0bff117 	ldw	r2,-60(fp)
    2b3c:	2884703a 	and	r2,r5,r2
    2b40:	2084f03a 	xor	r2,r4,r2
    2b44:	1885883a 	add	r2,r3,r2
    2b48:	e0bffb15 	stw	r2,-20(fp)
        h = g;
    2b4c:	e0bff517 	ldw	r2,-44(fp)
    2b50:	e0bff615 	stw	r2,-40(fp)
        g = f;
    2b54:	e0bff417 	ldw	r2,-48(fp)
    2b58:	e0bff515 	stw	r2,-44(fp)
        f = e;
    2b5c:	e0bff317 	ldw	r2,-52(fp)
    2b60:	e0bff415 	stw	r2,-48(fp)
        e = d + T1;
    2b64:	e0fff217 	ldw	r3,-56(fp)
    2b68:	e0bffa17 	ldw	r2,-24(fp)
    2b6c:	1885883a 	add	r2,r3,r2
    2b70:	e0bff315 	stw	r2,-52(fp)
        d = c;
    2b74:	e0bff117 	ldw	r2,-60(fp)
    2b78:	e0bff215 	stw	r2,-56(fp)
        c = b;
    2b7c:	e0bff017 	ldw	r2,-64(fp)
    2b80:	e0bff115 	stw	r2,-60(fp)
        b = a;
    2b84:	e0bfef17 	ldw	r2,-68(fp)
    2b88:	e0bff015 	stw	r2,-64(fp)
        a = T1 + T2;
    2b8c:	e0fffa17 	ldw	r3,-24(fp)
    2b90:	e0bffb17 	ldw	r2,-20(fp)
    2b94:	1885883a 	add	r2,r3,r2
    2b98:	e0bfef15 	stw	r2,-68(fp)

        j++;
    2b9c:	e0bff717 	ldw	r2,-36(fp)
    2ba0:	10800044 	addi	r2,r2,1
    2ba4:	e0bff715 	stw	r2,-36(fp)
    } while (j < 64);
    2ba8:	e0bff717 	ldw	r2,-36(fp)
    2bac:	10801010 	cmplti	r2,r2,64
    2bb0:	103f6a1e 	bne	r2,zero,295c <__alt_mem_epcs_flash_controller+0xfdff995c>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
    2bb4:	e0bffe17 	ldw	r2,-8(fp)
    2bb8:	10c00017 	ldw	r3,0(r2)
    2bbc:	e0bfef17 	ldw	r2,-68(fp)
    2bc0:	1887883a 	add	r3,r3,r2
    2bc4:	e0bffe17 	ldw	r2,-8(fp)
    2bc8:	10c00015 	stw	r3,0(r2)
    context->state[1] += b;
    2bcc:	e0bffe17 	ldw	r2,-8(fp)
    2bd0:	10c00117 	ldw	r3,4(r2)
    2bd4:	e0bff017 	ldw	r2,-64(fp)
    2bd8:	1887883a 	add	r3,r3,r2
    2bdc:	e0bffe17 	ldw	r2,-8(fp)
    2be0:	10c00115 	stw	r3,4(r2)
    context->state[2] += c;
    2be4:	e0bffe17 	ldw	r2,-8(fp)
    2be8:	10c00217 	ldw	r3,8(r2)
    2bec:	e0bff117 	ldw	r2,-60(fp)
    2bf0:	1887883a 	add	r3,r3,r2
    2bf4:	e0bffe17 	ldw	r2,-8(fp)
    2bf8:	10c00215 	stw	r3,8(r2)
    context->state[3] += d;
    2bfc:	e0bffe17 	ldw	r2,-8(fp)
    2c00:	10c00317 	ldw	r3,12(r2)
    2c04:	e0bff217 	ldw	r2,-56(fp)
    2c08:	1887883a 	add	r3,r3,r2
    2c0c:	e0bffe17 	ldw	r2,-8(fp)
    2c10:	10c00315 	stw	r3,12(r2)
    context->state[4] += e;
    2c14:	e0bffe17 	ldw	r2,-8(fp)
    2c18:	10c00417 	ldw	r3,16(r2)
    2c1c:	e0bff317 	ldw	r2,-52(fp)
    2c20:	1887883a 	add	r3,r3,r2
    2c24:	e0bffe17 	ldw	r2,-8(fp)
    2c28:	10c00415 	stw	r3,16(r2)
    context->state[5] += f;
    2c2c:	e0bffe17 	ldw	r2,-8(fp)
    2c30:	10c00517 	ldw	r3,20(r2)
    2c34:	e0bff417 	ldw	r2,-48(fp)
    2c38:	1887883a 	add	r3,r3,r2
    2c3c:	e0bffe17 	ldw	r2,-8(fp)
    2c40:	10c00515 	stw	r3,20(r2)
    context->state[6] += g;
    2c44:	e0bffe17 	ldw	r2,-8(fp)
    2c48:	10c00617 	ldw	r3,24(r2)
    2c4c:	e0bff517 	ldw	r2,-44(fp)
    2c50:	1887883a 	add	r3,r3,r2
    2c54:	e0bffe17 	ldw	r2,-8(fp)
    2c58:	10c00615 	stw	r3,24(r2)
    context->state[7] += h;
    2c5c:	e0bffe17 	ldw	r2,-8(fp)
    2c60:	10c00717 	ldw	r3,28(r2)
    2c64:	e0bff617 	ldw	r2,-40(fp)
    2c68:	1887883a 	add	r3,r3,r2
    2c6c:	e0bffe17 	ldw	r2,-8(fp)
    2c70:	10c00715 	stw	r3,28(r2)

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
    2c74:	e03ffb15 	stw	zero,-20(fp)
    2c78:	e0bffb17 	ldw	r2,-20(fp)
    2c7c:	e0bffa15 	stw	r2,-24(fp)
    2c80:	e0bffa17 	ldw	r2,-24(fp)
    2c84:	e0bff615 	stw	r2,-40(fp)
    2c88:	e0bff617 	ldw	r2,-40(fp)
    2c8c:	e0bff515 	stw	r2,-44(fp)
    2c90:	e0bff517 	ldw	r2,-44(fp)
    2c94:	e0bff415 	stw	r2,-48(fp)
    2c98:	e0bff417 	ldw	r2,-48(fp)
    2c9c:	e0bff315 	stw	r2,-52(fp)
    2ca0:	e0bff317 	ldw	r2,-52(fp)
    2ca4:	e0bff215 	stw	r2,-56(fp)
    2ca8:	e0bff217 	ldw	r2,-56(fp)
    2cac:	e0bff115 	stw	r2,-60(fp)
    2cb0:	e0bff117 	ldw	r2,-60(fp)
    2cb4:	e0bff015 	stw	r2,-64(fp)
    2cb8:	e0bff017 	ldw	r2,-64(fp)
    2cbc:	e0bfef15 	stw	r2,-68(fp)
}
    2cc0:	0001883a 	nop
    2cc4:	e037883a 	mov	sp,fp
    2cc8:	df000017 	ldw	fp,0(sp)
    2ccc:	dec00104 	addi	sp,sp,4
    2cd0:	f800283a 	ret

00002cd4 <sha256_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha256_Update(SHA256_CTX* context, const sha2_byte* data, size_t len)
{
    2cd4:	defff304 	addi	sp,sp,-52
    2cd8:	dfc00c15 	stw	ra,48(sp)
    2cdc:	df000b15 	stw	fp,44(sp)
    2ce0:	dd400a15 	stw	r21,40(sp)
    2ce4:	dd000915 	stw	r20,36(sp)
    2ce8:	dcc00815 	stw	r19,32(sp)
    2cec:	dc800715 	stw	r18,28(sp)
    2cf0:	dc400615 	stw	r17,24(sp)
    2cf4:	dc000515 	stw	r16,20(sp)
    2cf8:	df000b04 	addi	fp,sp,44
    2cfc:	e13ff715 	stw	r4,-36(fp)
    2d00:	e17ff815 	stw	r5,-32(fp)
    2d04:	e1bff915 	stw	r6,-28(fp)
    unsigned int freespace, usedspace;

    if (len == 0) {
    2d08:	e0bff917 	ldw	r2,-28(fp)
    2d0c:	10008f26 	beq	r2,zero,2f4c <sha256_Update+0x278>
        /* Calling with no data is valid - we do nothing */
        return;
    }

    usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    2d10:	e13ff717 	ldw	r4,-36(fp)
    2d14:	20800817 	ldw	r2,32(r4)
    2d18:	20c00917 	ldw	r3,36(r4)
    2d1c:	1808977a 	slli	r4,r3,29
    2d20:	100ed0fa 	srli	r7,r2,3
    2d24:	21ceb03a 	or	r7,r4,r7
    2d28:	1810d0fa 	srli	r8,r3,3
    2d2c:	3805883a 	mov	r2,r7
    2d30:	10800fcc 	andi	r2,r2,63
    2d34:	e0bff515 	stw	r2,-44(fp)
    if (usedspace > 0) {
    2d38:	e0bff517 	ldw	r2,-44(fp)
    2d3c:	10006326 	beq	r2,zero,2ecc <sha256_Update+0x1f8>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA256_BLOCK_LENGTH - usedspace;
    2d40:	00c01004 	movi	r3,64
    2d44:	e0bff517 	ldw	r2,-44(fp)
    2d48:	1885c83a 	sub	r2,r3,r2
    2d4c:	e0bff615 	stw	r2,-40(fp)

        if (len >= freespace) {
    2d50:	e0fff917 	ldw	r3,-28(fp)
    2d54:	e0bff617 	ldw	r2,-40(fp)
    2d58:	18802736 	bltu	r3,r2,2df8 <sha256_Update+0x124>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
    2d5c:	e0bff517 	ldw	r2,-44(fp)
    2d60:	10800a04 	addi	r2,r2,40
    2d64:	e0fff717 	ldw	r3,-36(fp)
    2d68:	1885883a 	add	r2,r3,r2
    2d6c:	e1bff617 	ldw	r6,-40(fp)
    2d70:	e17ff817 	ldw	r5,-32(fp)
    2d74:	1009883a 	mov	r4,r2
    2d78:	00095dc0 	call	95dc <memcpy>
            context->bitcount += freespace << 3;
    2d7c:	e0bff717 	ldw	r2,-36(fp)
    2d80:	11000817 	ldw	r4,32(r2)
    2d84:	11400917 	ldw	r5,36(r2)
    2d88:	e0bff617 	ldw	r2,-40(fp)
    2d8c:	100490fa 	slli	r2,r2,3
    2d90:	1029883a 	mov	r20,r2
    2d94:	002b883a 	mov	r21,zero
    2d98:	2505883a 	add	r2,r4,r20
    2d9c:	110d803a 	cmpltu	r6,r2,r4
    2da0:	2d47883a 	add	r3,r5,r21
    2da4:	30c9883a 	add	r4,r6,r3
    2da8:	2007883a 	mov	r3,r4
    2dac:	1009883a 	mov	r4,r2
    2db0:	180b883a 	mov	r5,r3
    2db4:	e0bff717 	ldw	r2,-36(fp)
    2db8:	11000815 	stw	r4,32(r2)
    2dbc:	11400915 	stw	r5,36(r2)
            len -= freespace;
    2dc0:	e0fff917 	ldw	r3,-28(fp)
    2dc4:	e0bff617 	ldw	r2,-40(fp)
    2dc8:	1885c83a 	sub	r2,r3,r2
    2dcc:	e0bff915 	stw	r2,-28(fp)
            data += freespace;
    2dd0:	e0fff817 	ldw	r3,-32(fp)
    2dd4:	e0bff617 	ldw	r2,-40(fp)
    2dd8:	1885883a 	add	r2,r3,r2
    2ddc:	e0bff815 	stw	r2,-32(fp)
            sha256_Transform(context, (sha2_word32*)context->buffer);
    2de0:	e0bff717 	ldw	r2,-36(fp)
    2de4:	10800a04 	addi	r2,r2,40
    2de8:	100b883a 	mov	r5,r2
    2dec:	e13ff717 	ldw	r4,-36(fp)
    2df0:	00027140 	call	2714 <sha256_Transform>
    2df4:	00003506 	br	2ecc <sha256_Update+0x1f8>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
    2df8:	e0bff517 	ldw	r2,-44(fp)
    2dfc:	10800a04 	addi	r2,r2,40
    2e00:	e0fff717 	ldw	r3,-36(fp)
    2e04:	1885883a 	add	r2,r3,r2
    2e08:	e1bff917 	ldw	r6,-28(fp)
    2e0c:	e17ff817 	ldw	r5,-32(fp)
    2e10:	1009883a 	mov	r4,r2
    2e14:	00095dc0 	call	95dc <memcpy>
            context->bitcount += len << 3;
    2e18:	e0bff717 	ldw	r2,-36(fp)
    2e1c:	11000817 	ldw	r4,32(r2)
    2e20:	11400917 	ldw	r5,36(r2)
    2e24:	e0bff917 	ldw	r2,-28(fp)
    2e28:	100490fa 	slli	r2,r2,3
    2e2c:	1025883a 	mov	r18,r2
    2e30:	0027883a 	mov	r19,zero
    2e34:	2485883a 	add	r2,r4,r18
    2e38:	110d803a 	cmpltu	r6,r2,r4
    2e3c:	2cc7883a 	add	r3,r5,r19
    2e40:	30c9883a 	add	r4,r6,r3
    2e44:	2007883a 	mov	r3,r4
    2e48:	1009883a 	mov	r4,r2
    2e4c:	180b883a 	mov	r5,r3
    2e50:	e0bff717 	ldw	r2,-36(fp)
    2e54:	11000815 	stw	r4,32(r2)
    2e58:	11400915 	stw	r5,36(r2)
            /* Clean up: */
            usedspace = freespace = 0;
    2e5c:	e03ff615 	stw	zero,-40(fp)
    2e60:	e0bff617 	ldw	r2,-40(fp)
    2e64:	e0bff515 	stw	r2,-44(fp)
            return;
    2e68:	00003906 	br	2f50 <sha256_Update+0x27c>
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        sha256_Transform(context, (const sha2_word32*)data);
    2e6c:	e17ff817 	ldw	r5,-32(fp)
    2e70:	e13ff717 	ldw	r4,-36(fp)
    2e74:	00027140 	call	2714 <sha256_Transform>
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
    2e78:	e0bff717 	ldw	r2,-36(fp)
    2e7c:	11000817 	ldw	r4,32(r2)
    2e80:	11400917 	ldw	r5,36(r2)
    2e84:	01808004 	movi	r6,512
    2e88:	000f883a 	mov	r7,zero
    2e8c:	2185883a 	add	r2,r4,r6
    2e90:	1111803a 	cmpltu	r8,r2,r4
    2e94:	29c7883a 	add	r3,r5,r7
    2e98:	40c9883a 	add	r4,r8,r3
    2e9c:	2007883a 	mov	r3,r4
    2ea0:	1009883a 	mov	r4,r2
    2ea4:	180b883a 	mov	r5,r3
    2ea8:	e0bff717 	ldw	r2,-36(fp)
    2eac:	11000815 	stw	r4,32(r2)
    2eb0:	11400915 	stw	r5,36(r2)
        len -= SHA256_BLOCK_LENGTH;
    2eb4:	e0bff917 	ldw	r2,-28(fp)
    2eb8:	10bff004 	addi	r2,r2,-64
    2ebc:	e0bff915 	stw	r2,-28(fp)
        data += SHA256_BLOCK_LENGTH;
    2ec0:	e0bff817 	ldw	r2,-32(fp)
    2ec4:	10801004 	addi	r2,r2,64
    2ec8:	e0bff815 	stw	r2,-32(fp)
            /* Clean up: */
            usedspace = freespace = 0;
            return;
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
    2ecc:	e0bff917 	ldw	r2,-28(fp)
    2ed0:	10801028 	cmpgeui	r2,r2,64
    2ed4:	103fe51e 	bne	r2,zero,2e6c <__alt_mem_epcs_flash_controller+0xfdff9e6c>
        sha256_Transform(context, (const sha2_word32*)data);
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
        len -= SHA256_BLOCK_LENGTH;
        data += SHA256_BLOCK_LENGTH;
    }
    if (len > 0) {
    2ed8:	e0bff917 	ldw	r2,-28(fp)
    2edc:	10001726 	beq	r2,zero,2f3c <sha256_Update+0x268>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
    2ee0:	e0bff717 	ldw	r2,-36(fp)
    2ee4:	10800a04 	addi	r2,r2,40
    2ee8:	e1bff917 	ldw	r6,-28(fp)
    2eec:	e17ff817 	ldw	r5,-32(fp)
    2ef0:	1009883a 	mov	r4,r2
    2ef4:	00095dc0 	call	95dc <memcpy>
        context->bitcount += len << 3;
    2ef8:	e0bff717 	ldw	r2,-36(fp)
    2efc:	11000817 	ldw	r4,32(r2)
    2f00:	11400917 	ldw	r5,36(r2)
    2f04:	e0bff917 	ldw	r2,-28(fp)
    2f08:	100490fa 	slli	r2,r2,3
    2f0c:	1021883a 	mov	r16,r2
    2f10:	0023883a 	mov	r17,zero
    2f14:	2405883a 	add	r2,r4,r16
    2f18:	110d803a 	cmpltu	r6,r2,r4
    2f1c:	2c47883a 	add	r3,r5,r17
    2f20:	30c9883a 	add	r4,r6,r3
    2f24:	2007883a 	mov	r3,r4
    2f28:	1009883a 	mov	r4,r2
    2f2c:	180b883a 	mov	r5,r3
    2f30:	e0bff717 	ldw	r2,-36(fp)
    2f34:	11000815 	stw	r4,32(r2)
    2f38:	11400915 	stw	r5,36(r2)
    }
    /* Clean up: */
    usedspace = freespace = 0;
    2f3c:	e03ff615 	stw	zero,-40(fp)
    2f40:	e0bff617 	ldw	r2,-40(fp)
    2f44:	e0bff515 	stw	r2,-44(fp)
    2f48:	00000106 	br	2f50 <sha256_Update+0x27c>
{
    unsigned int freespace, usedspace;

    if (len == 0) {
        /* Calling with no data is valid - we do nothing */
        return;
    2f4c:	0001883a 	nop
        MEMCPY_BCOPY(context->buffer, data, len);
        context->bitcount += len << 3;
    }
    /* Clean up: */
    usedspace = freespace = 0;
}
    2f50:	e6fffa04 	addi	sp,fp,-24
    2f54:	dfc00717 	ldw	ra,28(sp)
    2f58:	df000617 	ldw	fp,24(sp)
    2f5c:	dd400517 	ldw	r21,20(sp)
    2f60:	dd000417 	ldw	r20,16(sp)
    2f64:	dcc00317 	ldw	r19,12(sp)
    2f68:	dc800217 	ldw	r18,8(sp)
    2f6c:	dc400117 	ldw	r17,4(sp)
    2f70:	dc000017 	ldw	r16,0(sp)
    2f74:	dec00804 	addi	sp,sp,32
    2f78:	f800283a 	ret

00002f7c <sha256_Final>:

void sha256_Final(sha2_byte digest[], SHA256_CTX* context)
{
    2f7c:	deffe904 	addi	sp,sp,-92
    2f80:	dfc01615 	stw	ra,88(sp)
    2f84:	df001515 	stw	fp,84(sp)
    2f88:	ddc01415 	stw	r23,80(sp)
    2f8c:	dd801315 	stw	r22,76(sp)
    2f90:	dd401215 	stw	r21,72(sp)
    2f94:	dd001115 	stw	r20,68(sp)
    2f98:	dcc01015 	stw	r19,64(sp)
    2f9c:	dc800f15 	stw	r18,60(sp)
    2fa0:	dc400e15 	stw	r17,56(sp)
    2fa4:	dc000d15 	stw	r16,52(sp)
    2fa8:	df001504 	addi	fp,sp,84
    2fac:	e13ff215 	stw	r4,-56(fp)
    2fb0:	e17ff315 	stw	r5,-52(fp)
    sha2_word32* d = (sha2_word32*)digest;
    2fb4:	e0bff217 	ldw	r2,-56(fp)
    2fb8:	e0bfeb15 	stw	r2,-84(fp)
    unsigned int usedspace;
    sha2_word64* t;

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_byte*)0) {
    2fbc:	e0bff217 	ldw	r2,-56(fp)
    2fc0:	1000c126 	beq	r2,zero,32c8 <sha256_Final+0x34c>
        usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    2fc4:	e13ff317 	ldw	r4,-52(fp)
    2fc8:	20800817 	ldw	r2,32(r4)
    2fcc:	20c00917 	ldw	r3,36(r4)
    2fd0:	1808977a 	slli	r4,r3,29
    2fd4:	102cd0fa 	srli	r22,r2,3
    2fd8:	25acb03a 	or	r22,r4,r22
    2fdc:	182ed0fa 	srli	r23,r3,3
    2fe0:	b005883a 	mov	r2,r22
    2fe4:	10800fcc 	andi	r2,r2,63
    2fe8:	e0bfed15 	stw	r2,-76(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert FROM host byte order */
        REVERSE64(context->bitcount, context->bitcount);
    2fec:	e0bff317 	ldw	r2,-52(fp)
    2ff0:	10c00817 	ldw	r3,32(r2)
    2ff4:	e0ffee15 	stw	r3,-72(fp)
    2ff8:	10800917 	ldw	r2,36(r2)
    2ffc:	e0bfef15 	stw	r2,-68(fp)
    3000:	e0bfef17 	ldw	r2,-68(fp)
    3004:	e0bff615 	stw	r2,-40(fp)
    3008:	e0ffee17 	ldw	r3,-72(fp)
    300c:	e0fff715 	stw	r3,-36(fp)
    3010:	e0bff617 	ldw	r2,-40(fp)
    3014:	e0bfee15 	stw	r2,-72(fp)
    3018:	e0fff717 	ldw	r3,-36(fp)
    301c:	e0ffef15 	stw	r3,-68(fp)
    3020:	e0ffee17 	ldw	r3,-72(fp)
    3024:	00bfc074 	movhi	r2,65281
    3028:	10bfc004 	addi	r2,r2,-256
    302c:	18a8703a 	and	r20,r3,r2
    3030:	e0ffef17 	ldw	r3,-68(fp)
    3034:	00bfc074 	movhi	r2,65281
    3038:	10bfc004 	addi	r2,r2,-256
    303c:	18aa703a 	and	r21,r3,r2
    3040:	a804963a 	slli	r2,r21,24
    3044:	a018d23a 	srli	r12,r20,8
    3048:	1318b03a 	or	r12,r2,r12
    304c:	a81ad23a 	srli	r13,r21,8
    3050:	e0ffee17 	ldw	r3,-72(fp)
    3054:	00803ff4 	movhi	r2,255
    3058:	10803fc4 	addi	r2,r2,255
    305c:	18a4703a 	and	r18,r3,r2
    3060:	e0ffef17 	ldw	r3,-68(fp)
    3064:	00803ff4 	movhi	r2,255
    3068:	10803fc4 	addi	r2,r2,255
    306c:	18a6703a 	and	r19,r3,r2
    3070:	9004d63a 	srli	r2,r18,24
    3074:	9816923a 	slli	r11,r19,8
    3078:	12d6b03a 	or	r11,r2,r11
    307c:	9014923a 	slli	r10,r18,8
    3080:	6284b03a 	or	r2,r12,r10
    3084:	e0bfee15 	stw	r2,-72(fp)
    3088:	6ac4b03a 	or	r2,r13,r11
    308c:	e0bfef15 	stw	r2,-68(fp)
    3090:	e0bfee17 	ldw	r2,-72(fp)
    3094:	143fffec 	andhi	r16,r2,65535
    3098:	e0bfef17 	ldw	r2,-68(fp)
    309c:	147fffec 	andhi	r17,r2,65535
    30a0:	8804943a 	slli	r2,r17,16
    30a4:	8010d43a 	srli	r8,r16,16
    30a8:	1210b03a 	or	r8,r2,r8
    30ac:	8812d43a 	srli	r9,r17,16
    30b0:	e0bfee17 	ldw	r2,-72(fp)
    30b4:	13bfffcc 	andi	r14,r2,65535
    30b8:	e0bfef17 	ldw	r2,-68(fp)
    30bc:	13ffffcc 	andi	r15,r2,65535
    30c0:	7004d43a 	srli	r2,r14,16
    30c4:	780e943a 	slli	r7,r15,16
    30c8:	11ceb03a 	or	r7,r2,r7
    30cc:	700c943a 	slli	r6,r14,16
    30d0:	4184b03a 	or	r2,r8,r6
    30d4:	e0bff415 	stw	r2,-48(fp)
    30d8:	49c6b03a 	or	r3,r9,r7
    30dc:	e0fff515 	stw	r3,-44(fp)
    30e0:	e0bff317 	ldw	r2,-52(fp)
    30e4:	e0fff417 	ldw	r3,-48(fp)
    30e8:	10c00815 	stw	r3,32(r2)
    30ec:	e0fff517 	ldw	r3,-44(fp)
    30f0:	10c00915 	stw	r3,36(r2)
#endif
        if (usedspace > 0) {
    30f4:	e0bfed17 	ldw	r2,-76(fp)
    30f8:	10002f26 	beq	r2,zero,31b8 <sha256_Final+0x23c>
            /* Begin padding with a 1 bit: */
            context->buffer[usedspace++] = 0x80;
    30fc:	e0bfed17 	ldw	r2,-76(fp)
    3100:	10c00044 	addi	r3,r2,1
    3104:	e0ffed15 	stw	r3,-76(fp)
    3108:	e0fff317 	ldw	r3,-52(fp)
    310c:	1885883a 	add	r2,r3,r2
    3110:	10800a04 	addi	r2,r2,40
    3114:	00ffe004 	movi	r3,-128
    3118:	10c00005 	stb	r3,0(r2)

            if (usedspace <= SHA256_SHORT_BLOCK_LENGTH) {
    311c:	e0bfed17 	ldw	r2,-76(fp)
    3120:	10800e68 	cmpgeui	r2,r2,57
    3124:	10000b1e 	bne	r2,zero,3154 <sha256_Final+0x1d8>
                /* Set-up for the last transform: */
                MEMSET_BZERO(&context->buffer[usedspace], SHA256_SHORT_BLOCK_LENGTH - usedspace);
    3128:	e0bfed17 	ldw	r2,-76(fp)
    312c:	10800a04 	addi	r2,r2,40
    3130:	e0fff317 	ldw	r3,-52(fp)
    3134:	1889883a 	add	r4,r3,r2
    3138:	00c00e04 	movi	r3,56
    313c:	e0bfed17 	ldw	r2,-76(fp)
    3140:	1885c83a 	sub	r2,r3,r2
    3144:	100d883a 	mov	r6,r2
    3148:	000b883a 	mov	r5,zero
    314c:	00096040 	call	9604 <memset>
    3150:	00002206 	br	31dc <sha256_Final+0x260>
            } else {
                if (usedspace < SHA256_BLOCK_LENGTH) {
    3154:	e0bfed17 	ldw	r2,-76(fp)
    3158:	10801028 	cmpgeui	r2,r2,64
    315c:	10000a1e 	bne	r2,zero,3188 <sha256_Final+0x20c>
                    MEMSET_BZERO(&context->buffer[usedspace], SHA256_BLOCK_LENGTH - usedspace);
    3160:	e0bfed17 	ldw	r2,-76(fp)
    3164:	10800a04 	addi	r2,r2,40
    3168:	e0fff317 	ldw	r3,-52(fp)
    316c:	1889883a 	add	r4,r3,r2
    3170:	00c01004 	movi	r3,64
    3174:	e0bfed17 	ldw	r2,-76(fp)
    3178:	1885c83a 	sub	r2,r3,r2
    317c:	100d883a 	mov	r6,r2
    3180:	000b883a 	mov	r5,zero
    3184:	00096040 	call	9604 <memset>
                }
                /* Do second-to-last transform: */
                sha256_Transform(context, (sha2_word32*)context->buffer);
    3188:	e0bff317 	ldw	r2,-52(fp)
    318c:	10800a04 	addi	r2,r2,40
    3190:	100b883a 	mov	r5,r2
    3194:	e13ff317 	ldw	r4,-52(fp)
    3198:	00027140 	call	2714 <sha256_Transform>

                /* And set-up for the last transform: */
                MEMSET_BZERO(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
    319c:	e0bff317 	ldw	r2,-52(fp)
    31a0:	10800a04 	addi	r2,r2,40
    31a4:	01800e04 	movi	r6,56
    31a8:	000b883a 	mov	r5,zero
    31ac:	1009883a 	mov	r4,r2
    31b0:	00096040 	call	9604 <memset>
    31b4:	00000906 	br	31dc <sha256_Final+0x260>
            }
        } else {
            /* Set-up for the last transform: */
            MEMSET_BZERO(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
    31b8:	e0bff317 	ldw	r2,-52(fp)
    31bc:	10800a04 	addi	r2,r2,40
    31c0:	01800e04 	movi	r6,56
    31c4:	000b883a 	mov	r5,zero
    31c8:	1009883a 	mov	r4,r2
    31cc:	00096040 	call	9604 <memset>

            /* Begin padding with a 1 bit: */
            *context->buffer = 0x80;
    31d0:	e0bff317 	ldw	r2,-52(fp)
    31d4:	00ffe004 	movi	r3,-128
    31d8:	10c00a05 	stb	r3,40(r2)
        }
        /* Set the bit count: */
        t = (sha2_word64*)&context->buffer[SHA256_SHORT_BLOCK_LENGTH];
    31dc:	e0bff317 	ldw	r2,-52(fp)
    31e0:	10801804 	addi	r2,r2,96
    31e4:	e0bff015 	stw	r2,-64(fp)
        *t = context->bitcount;
    31e8:	e13ff317 	ldw	r4,-52(fp)
    31ec:	20800817 	ldw	r2,32(r4)
    31f0:	20c00917 	ldw	r3,36(r4)
    31f4:	e13ff017 	ldw	r4,-64(fp)
    31f8:	20800015 	stw	r2,0(r4)
    31fc:	20c00115 	stw	r3,4(r4)

        /* Final transform: */
        sha256_Transform(context, (sha2_word32*)context->buffer);
    3200:	e0bff317 	ldw	r2,-52(fp)
    3204:	10800a04 	addi	r2,r2,40
    3208:	100b883a 	mov	r5,r2
    320c:	e13ff317 	ldw	r4,-52(fp)
    3210:	00027140 	call	2714 <sha256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    3214:	e03fec15 	stw	zero,-80(fp)
    3218:	00002806 	br	32bc <sha256_Final+0x340>
                REVERSE32(context->state[j], context->state[j]);
    321c:	e0fff317 	ldw	r3,-52(fp)
    3220:	e0bfec17 	ldw	r2,-80(fp)
    3224:	1085883a 	add	r2,r2,r2
    3228:	1085883a 	add	r2,r2,r2
    322c:	1885883a 	add	r2,r3,r2
    3230:	10800017 	ldw	r2,0(r2)
    3234:	e0bff115 	stw	r2,-60(fp)
    3238:	e0bff117 	ldw	r2,-60(fp)
    323c:	1004143a 	roli	r2,r2,16
    3240:	e0bff115 	stw	r2,-60(fp)
    3244:	e0fff117 	ldw	r3,-60(fp)
    3248:	00bfc074 	movhi	r2,65281
    324c:	10bfc004 	addi	r2,r2,-256
    3250:	1884703a 	and	r2,r3,r2
    3254:	1006d23a 	srli	r3,r2,8
    3258:	e13ff117 	ldw	r4,-60(fp)
    325c:	00803ff4 	movhi	r2,255
    3260:	10803fc4 	addi	r2,r2,255
    3264:	2084703a 	and	r2,r4,r2
    3268:	1004923a 	slli	r2,r2,8
    326c:	1886b03a 	or	r3,r3,r2
    3270:	e13ff317 	ldw	r4,-52(fp)
    3274:	e0bfec17 	ldw	r2,-80(fp)
    3278:	1085883a 	add	r2,r2,r2
    327c:	1085883a 	add	r2,r2,r2
    3280:	2085883a 	add	r2,r4,r2
    3284:	10c00015 	stw	r3,0(r2)
                *d++ = context->state[j];
    3288:	e0bfeb17 	ldw	r2,-84(fp)
    328c:	10c00104 	addi	r3,r2,4
    3290:	e0ffeb15 	stw	r3,-84(fp)
    3294:	e13ff317 	ldw	r4,-52(fp)
    3298:	e0ffec17 	ldw	r3,-80(fp)
    329c:	18c7883a 	add	r3,r3,r3
    32a0:	18c7883a 	add	r3,r3,r3
    32a4:	20c7883a 	add	r3,r4,r3
    32a8:	18c00017 	ldw	r3,0(r3)
    32ac:	10c00015 	stw	r3,0(r2)

#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    32b0:	e0bfec17 	ldw	r2,-80(fp)
    32b4:	10800044 	addi	r2,r2,1
    32b8:	e0bfec15 	stw	r2,-80(fp)
    32bc:	e0bfec17 	ldw	r2,-80(fp)
    32c0:	10800210 	cmplti	r2,r2,8
    32c4:	103fd51e 	bne	r2,zero,321c <__alt_mem_epcs_flash_controller+0xfdffa21c>
        MEMCPY_BCOPY(d, context->state, SHA256_DIGEST_LENGTH);
#endif
    }

    /* Clean up state data: */
    MEMSET_BZERO(context, sizeof(SHA256_CTX));
    32c8:	01801a04 	movi	r6,104
    32cc:	000b883a 	mov	r5,zero
    32d0:	e13ff317 	ldw	r4,-52(fp)
    32d4:	00096040 	call	9604 <memset>
    usedspace = 0;
    32d8:	e03fed15 	stw	zero,-76(fp)
}
    32dc:	0001883a 	nop
    32e0:	e6fff804 	addi	sp,fp,-32
    32e4:	dfc00917 	ldw	ra,36(sp)
    32e8:	df000817 	ldw	fp,32(sp)
    32ec:	ddc00717 	ldw	r23,28(sp)
    32f0:	dd800617 	ldw	r22,24(sp)
    32f4:	dd400517 	ldw	r21,20(sp)
    32f8:	dd000417 	ldw	r20,16(sp)
    32fc:	dcc00317 	ldw	r19,12(sp)
    3300:	dc800217 	ldw	r18,8(sp)
    3304:	dc400117 	ldw	r17,4(sp)
    3308:	dc000017 	ldw	r16,0(sp)
    330c:	dec00a04 	addi	sp,sp,40
    3310:	f800283a 	ret

00003314 <sha256_Raw>:

void sha256_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA256_DIGEST_LENGTH])
{
    3314:	deffe104 	addi	sp,sp,-124
    3318:	dfc01e15 	stw	ra,120(sp)
    331c:	df001d15 	stw	fp,116(sp)
    3320:	df001d04 	addi	fp,sp,116
    3324:	e13ffd15 	stw	r4,-12(fp)
    3328:	e17ffe15 	stw	r5,-8(fp)
    332c:	e1bfff15 	stw	r6,-4(fp)
    SHA256_CTX context;
    sha256_Init(&context);
    3330:	e13fe304 	addi	r4,fp,-116
    3334:	00026a00 	call	26a0 <sha256_Init>
    sha256_Update(&context, data, len);
    3338:	e1bffe17 	ldw	r6,-8(fp)
    333c:	e17ffd17 	ldw	r5,-12(fp)
    3340:	e13fe304 	addi	r4,fp,-116
    3344:	0002cd40 	call	2cd4 <sha256_Update>
    sha256_Final(digest, &context);
    3348:	e17fe304 	addi	r5,fp,-116
    334c:	e13fff17 	ldw	r4,-4(fp)
    3350:	0002f7c0 	call	2f7c <sha256_Final>
}
    3354:	0001883a 	nop
    3358:	e037883a 	mov	sp,fp
    335c:	dfc00117 	ldw	ra,4(sp)
    3360:	df000017 	ldw	fp,0(sp)
    3364:	dec00204 	addi	sp,sp,8
    3368:	f800283a 	ret

0000336c <sha512_Init>:


/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context)
{
    336c:	defffd04 	addi	sp,sp,-12
    3370:	dfc00215 	stw	ra,8(sp)
    3374:	df000115 	stw	fp,4(sp)
    3378:	df000104 	addi	fp,sp,4
    337c:	e13fff15 	stw	r4,-4(fp)
    if (context == (SHA512_CTX*)0) {
    3380:	e0bfff17 	ldw	r2,-4(fp)
    3384:	10001626 	beq	r2,zero,33e0 <sha512_Init+0x74>
        return;
    }
    MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    3388:	e0bfff17 	ldw	r2,-4(fp)
    338c:	01801004 	movi	r6,64
    3390:	01400074 	movhi	r5,1
    3394:	29597a04 	addi	r5,r5,26088
    3398:	1009883a 	mov	r4,r2
    339c:	00095dc0 	call	95dc <memcpy>
    MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH);
    33a0:	e0bfff17 	ldw	r2,-4(fp)
    33a4:	10801404 	addi	r2,r2,80
    33a8:	01802004 	movi	r6,128
    33ac:	000b883a 	mov	r5,zero
    33b0:	1009883a 	mov	r4,r2
    33b4:	00096040 	call	9604 <memset>
    context->bitcount[0] = context->bitcount[1] = 0;
    33b8:	e0bfff17 	ldw	r2,-4(fp)
    33bc:	10001215 	stw	zero,72(r2)
    33c0:	10001315 	stw	zero,76(r2)
    33c4:	e13fff17 	ldw	r4,-4(fp)
    33c8:	20801217 	ldw	r2,72(r4)
    33cc:	20c01317 	ldw	r3,76(r4)
    33d0:	e13fff17 	ldw	r4,-4(fp)
    33d4:	20801015 	stw	r2,64(r4)
    33d8:	20c01115 	stw	r3,68(r4)
    33dc:	00000106 	br	33e4 <sha512_Init+0x78>

/*** SHA-512: *********************************************************/
void sha512_Init(SHA512_CTX* context)
{
    if (context == (SHA512_CTX*)0) {
        return;
    33e0:	0001883a 	nop
    }
    MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH);
    context->bitcount[0] = context->bitcount[1] = 0;
}
    33e4:	e037883a 	mov	sp,fp
    33e8:	dfc00117 	ldw	ra,4(sp)
    33ec:	df000017 	ldw	fp,0(sp)
    33f0:	dec00204 	addi	sp,sp,8
    33f4:	f800283a 	ret

000033f8 <sha512_Transform>:
}

#else /* SHA2_UNROLL_TRANSFORM */

void sha512_Transform(SHA512_CTX* context, const sha2_word64* data)
{
    33f8:	deff7804 	addi	sp,sp,-544
    33fc:	df008715 	stw	fp,540(sp)
    3400:	dd808615 	stw	r22,536(sp)
    3404:	dd408515 	stw	r21,532(sp)
    3408:	dd008415 	stw	r20,528(sp)
    340c:	dcc08315 	stw	r19,524(sp)
    3410:	dc808215 	stw	r18,520(sp)
    3414:	dc408115 	stw	r17,516(sp)
    3418:	dc008015 	stw	r16,512(sp)
    341c:	df008704 	addi	fp,sp,540
    3420:	e13f9515 	stw	r4,-428(fp)
    3424:	e17f9615 	stw	r5,-424(fp)
    sha2_word64 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word64 T1, T2, *W512 = (sha2_word64*)context->buffer;
    3428:	e0bf9517 	ldw	r2,-428(fp)
    342c:	10801404 	addi	r2,r2,80
    3430:	e0bf8a15 	stw	r2,-472(fp)
    int j;

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
    3434:	e0ff9517 	ldw	r3,-428(fp)
    3438:	18800017 	ldw	r2,0(r3)
    343c:	e0bf7915 	stw	r2,-540(fp)
    3440:	18800117 	ldw	r2,4(r3)
    3444:	e0bf7a15 	stw	r2,-536(fp)
    b = context->state[1];
    3448:	e0ff9517 	ldw	r3,-428(fp)
    344c:	18800217 	ldw	r2,8(r3)
    3450:	e0bf7b15 	stw	r2,-532(fp)
    3454:	18800317 	ldw	r2,12(r3)
    3458:	e0bf7c15 	stw	r2,-528(fp)
    c = context->state[2];
    345c:	e0ff9517 	ldw	r3,-428(fp)
    3460:	18800417 	ldw	r2,16(r3)
    3464:	e0bf7d15 	stw	r2,-524(fp)
    3468:	18800517 	ldw	r2,20(r3)
    346c:	e0bf7e15 	stw	r2,-520(fp)
    d = context->state[3];
    3470:	e0ff9517 	ldw	r3,-428(fp)
    3474:	18800617 	ldw	r2,24(r3)
    3478:	e0bf7f15 	stw	r2,-516(fp)
    347c:	18800717 	ldw	r2,28(r3)
    3480:	e0bf8015 	stw	r2,-512(fp)
    e = context->state[4];
    3484:	e0ff9517 	ldw	r3,-428(fp)
    3488:	18800817 	ldw	r2,32(r3)
    348c:	e0bf8115 	stw	r2,-508(fp)
    3490:	18800917 	ldw	r2,36(r3)
    3494:	e0bf8215 	stw	r2,-504(fp)
    f = context->state[5];
    3498:	e0ff9517 	ldw	r3,-428(fp)
    349c:	18800a17 	ldw	r2,40(r3)
    34a0:	e0bf8315 	stw	r2,-500(fp)
    34a4:	18800b17 	ldw	r2,44(r3)
    34a8:	e0bf8415 	stw	r2,-496(fp)
    g = context->state[6];
    34ac:	e0ff9517 	ldw	r3,-428(fp)
    34b0:	18800c17 	ldw	r2,48(r3)
    34b4:	e0bf8515 	stw	r2,-492(fp)
    34b8:	18800d17 	ldw	r2,52(r3)
    34bc:	e0bf8615 	stw	r2,-488(fp)
    h = context->state[7];
    34c0:	e0ff9517 	ldw	r3,-428(fp)
    34c4:	18800e17 	ldw	r2,56(r3)
    34c8:	e0bf8715 	stw	r2,-484(fp)
    34cc:	18800f17 	ldw	r2,60(r3)
    34d0:	e0bf8815 	stw	r2,-480(fp)

    j = 0;
    34d4:	e03f8915 	stw	zero,-476(fp)
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert TO host byte order */
        REVERSE64(*data++, W512[j]);
    34d8:	e0ff9617 	ldw	r3,-424(fp)
    34dc:	18800204 	addi	r2,r3,8
    34e0:	e0bf9615 	stw	r2,-424(fp)
    34e4:	18800017 	ldw	r2,0(r3)
    34e8:	e0bf8b15 	stw	r2,-468(fp)
    34ec:	18800117 	ldw	r2,4(r3)
    34f0:	e0bf8c15 	stw	r2,-464(fp)
    34f4:	e0bf8c17 	ldw	r2,-464(fp)
    34f8:	e0bff715 	stw	r2,-36(fp)
    34fc:	e0ff8b17 	ldw	r3,-468(fp)
    3500:	e0fff815 	stw	r3,-32(fp)
    3504:	e13ff717 	ldw	r4,-36(fp)
    3508:	e13f8b15 	stw	r4,-468(fp)
    350c:	e17ff817 	ldw	r5,-32(fp)
    3510:	e17f8c15 	stw	r5,-464(fp)
    3514:	e0ff8b17 	ldw	r3,-468(fp)
    3518:	00bfc074 	movhi	r2,65281
    351c:	10bfc004 	addi	r2,r2,-256
    3520:	1884703a 	and	r2,r3,r2
    3524:	e0bf9715 	stw	r2,-420(fp)
    3528:	e0ff8c17 	ldw	r3,-464(fp)
    352c:	00bfc074 	movhi	r2,65281
    3530:	10bfc004 	addi	r2,r2,-256
    3534:	1884703a 	and	r2,r3,r2
    3538:	e0bf9815 	stw	r2,-416(fp)
    353c:	e1bf9817 	ldw	r6,-416(fp)
    3540:	3004963a 	slli	r2,r6,24
    3544:	e1ff9717 	ldw	r7,-420(fp)
    3548:	380ed23a 	srli	r7,r7,8
    354c:	e1ff9915 	stw	r7,-412(fp)
    3550:	e0ff9917 	ldw	r3,-412(fp)
    3554:	10c4b03a 	or	r2,r2,r3
    3558:	e0bf9915 	stw	r2,-412(fp)
    355c:	e13f9817 	ldw	r4,-416(fp)
    3560:	2008d23a 	srli	r4,r4,8
    3564:	e13f9a15 	stw	r4,-408(fp)
    3568:	e0ff8b17 	ldw	r3,-468(fp)
    356c:	00803ff4 	movhi	r2,255
    3570:	10803fc4 	addi	r2,r2,255
    3574:	1884703a 	and	r2,r3,r2
    3578:	e0bf9b15 	stw	r2,-404(fp)
    357c:	e0ff8c17 	ldw	r3,-464(fp)
    3580:	00803ff4 	movhi	r2,255
    3584:	10803fc4 	addi	r2,r2,255
    3588:	1884703a 	and	r2,r3,r2
    358c:	e0bf9c15 	stw	r2,-400(fp)
    3590:	e17f9b17 	ldw	r5,-404(fp)
    3594:	2804d63a 	srli	r2,r5,24
    3598:	e1bf9c17 	ldw	r6,-400(fp)
    359c:	300c923a 	slli	r6,r6,8
    35a0:	e1bf9e15 	stw	r6,-392(fp)
    35a4:	e1ff9e17 	ldw	r7,-392(fp)
    35a8:	11c4b03a 	or	r2,r2,r7
    35ac:	e0bf9e15 	stw	r2,-392(fp)
    35b0:	e0bf9b17 	ldw	r2,-404(fp)
    35b4:	1004923a 	slli	r2,r2,8
    35b8:	e0bf9d15 	stw	r2,-396(fp)
    35bc:	e0ff9917 	ldw	r3,-412(fp)
    35c0:	e13f9d17 	ldw	r4,-396(fp)
    35c4:	1904b03a 	or	r2,r3,r4
    35c8:	e0bf8b15 	stw	r2,-468(fp)
    35cc:	e17f9a17 	ldw	r5,-408(fp)
    35d0:	e1bf9e17 	ldw	r6,-392(fp)
    35d4:	2984b03a 	or	r2,r5,r6
    35d8:	e0bf8c15 	stw	r2,-464(fp)
    35dc:	e0bf8917 	ldw	r2,-476(fp)
    35e0:	100690fa 	slli	r3,r2,3
    35e4:	e0bf8a17 	ldw	r2,-472(fp)
    35e8:	10c7883a 	add	r3,r2,r3
    35ec:	e0bf8b17 	ldw	r2,-468(fp)
    35f0:	10bfffec 	andhi	r2,r2,65535
    35f4:	e0bf9f15 	stw	r2,-388(fp)
    35f8:	e0bf8c17 	ldw	r2,-464(fp)
    35fc:	10bfffec 	andhi	r2,r2,65535
    3600:	e0bfa015 	stw	r2,-384(fp)
    3604:	e1ffa017 	ldw	r7,-384(fp)
    3608:	3804943a 	slli	r2,r7,16
    360c:	e13f9f17 	ldw	r4,-388(fp)
    3610:	2008d43a 	srli	r4,r4,16
    3614:	e13fa115 	stw	r4,-380(fp)
    3618:	e17fa117 	ldw	r5,-380(fp)
    361c:	1144b03a 	or	r2,r2,r5
    3620:	e0bfa115 	stw	r2,-380(fp)
    3624:	e1bfa017 	ldw	r6,-384(fp)
    3628:	300cd43a 	srli	r6,r6,16
    362c:	e1bfa215 	stw	r6,-376(fp)
    3630:	e0bf8b17 	ldw	r2,-468(fp)
    3634:	10bfffcc 	andi	r2,r2,65535
    3638:	e0bfa315 	stw	r2,-372(fp)
    363c:	e0bf8c17 	ldw	r2,-464(fp)
    3640:	10bfffcc 	andi	r2,r2,65535
    3644:	e0bfa415 	stw	r2,-368(fp)
    3648:	e1ffa317 	ldw	r7,-372(fp)
    364c:	3804d43a 	srli	r2,r7,16
    3650:	e13fa417 	ldw	r4,-368(fp)
    3654:	2008943a 	slli	r4,r4,16
    3658:	e13fa615 	stw	r4,-360(fp)
    365c:	e17fa617 	ldw	r5,-360(fp)
    3660:	1144b03a 	or	r2,r2,r5
    3664:	e0bfa615 	stw	r2,-360(fp)
    3668:	e1bfa317 	ldw	r6,-372(fp)
    366c:	300c943a 	slli	r6,r6,16
    3670:	e1bfa515 	stw	r6,-364(fp)
    3674:	e1ffa117 	ldw	r7,-380(fp)
    3678:	e0bfa517 	ldw	r2,-364(fp)
    367c:	388eb03a 	or	r7,r7,r2
    3680:	e1ffa715 	stw	r7,-356(fp)
    3684:	e13fa217 	ldw	r4,-376(fp)
    3688:	e17fa617 	ldw	r5,-360(fp)
    368c:	2148b03a 	or	r4,r4,r5
    3690:	e13fa815 	stw	r4,-352(fp)
    3694:	e1bfa717 	ldw	r6,-356(fp)
    3698:	19800015 	stw	r6,0(r3)
    369c:	e1ffa817 	ldw	r7,-352(fp)
    36a0:	19c00115 	stw	r7,4(r3)
        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + W512[j];
    36a4:	e0bf8217 	ldw	r2,-504(fp)
    36a8:	100694ba 	slli	r3,r2,18
    36ac:	e0bf8117 	ldw	r2,-508(fp)
    36b0:	1004d3ba 	srli	r2,r2,14
    36b4:	1884b03a 	or	r2,r3,r2
    36b8:	e0bfa915 	stw	r2,-348(fp)
    36bc:	e0bf8117 	ldw	r2,-508(fp)
    36c0:	100694ba 	slli	r3,r2,18
    36c4:	e0bf8217 	ldw	r2,-504(fp)
    36c8:	1004d3ba 	srli	r2,r2,14
    36cc:	1884b03a 	or	r2,r3,r2
    36d0:	e0bfaa15 	stw	r2,-344(fp)
    36d4:	e0bf8217 	ldw	r2,-504(fp)
    36d8:	100693ba 	slli	r3,r2,14
    36dc:	e0bf8117 	ldw	r2,-508(fp)
    36e0:	1004d4ba 	srli	r2,r2,18
    36e4:	1884b03a 	or	r2,r3,r2
    36e8:	e0bfab15 	stw	r2,-340(fp)
    36ec:	e0bf8117 	ldw	r2,-508(fp)
    36f0:	100693ba 	slli	r3,r2,14
    36f4:	e0bf8217 	ldw	r2,-504(fp)
    36f8:	1004d4ba 	srli	r2,r2,18
    36fc:	1884b03a 	or	r2,r3,r2
    3700:	e0bfac15 	stw	r2,-336(fp)
    3704:	e0bfa917 	ldw	r2,-348(fp)
    3708:	e0ffab17 	ldw	r3,-340(fp)
    370c:	10c4f03a 	xor	r2,r2,r3
    3710:	e0bfad15 	stw	r2,-332(fp)
    3714:	e13faa17 	ldw	r4,-344(fp)
    3718:	e17fac17 	ldw	r5,-336(fp)
    371c:	2148f03a 	xor	r4,r4,r5
    3720:	e13fae15 	stw	r4,-328(fp)
    3724:	e0bf8117 	ldw	r2,-508(fp)
    3728:	1006d27a 	srli	r3,r2,9
    372c:	e0bf8217 	ldw	r2,-504(fp)
    3730:	100495fa 	slli	r2,r2,23
    3734:	1884b03a 	or	r2,r3,r2
    3738:	e0bfb015 	stw	r2,-320(fp)
    373c:	e0bf8217 	ldw	r2,-504(fp)
    3740:	1006d27a 	srli	r3,r2,9
    3744:	e0bf8117 	ldw	r2,-508(fp)
    3748:	100495fa 	slli	r2,r2,23
    374c:	1884b03a 	or	r2,r3,r2
    3750:	e0bfaf15 	stw	r2,-324(fp)
    3754:	e1bfad17 	ldw	r6,-332(fp)
    3758:	e1ffaf17 	ldw	r7,-324(fp)
    375c:	31eaf03a 	xor	r21,r6,r7
    3760:	e0bfae17 	ldw	r2,-328(fp)
    3764:	e0ffb017 	ldw	r3,-320(fp)
    3768:	10ecf03a 	xor	r22,r2,r3
    376c:	e0bf8717 	ldw	r2,-484(fp)
    3770:	e0ff8817 	ldw	r3,-480(fp)
    3774:	a889883a 	add	r4,r21,r2
    3778:	254d803a 	cmpltu	r6,r4,r21
    377c:	b0cb883a 	add	r5,r22,r3
    3780:	3145883a 	add	r2,r6,r5
    3784:	100b883a 	mov	r5,r2
    3788:	200d883a 	mov	r6,r4
    378c:	280f883a 	mov	r7,r5
    3790:	e0ff8117 	ldw	r3,-508(fp)
    3794:	e0bf8317 	ldw	r2,-500(fp)
    3798:	1884703a 	and	r2,r3,r2
    379c:	e0bfb115 	stw	r2,-316(fp)
    37a0:	e0ff8217 	ldw	r3,-504(fp)
    37a4:	e0bf8417 	ldw	r2,-496(fp)
    37a8:	1884703a 	and	r2,r3,r2
    37ac:	e0bfb215 	stw	r2,-312(fp)
    37b0:	e0bf8117 	ldw	r2,-508(fp)
    37b4:	0084303a 	nor	r2,zero,r2
    37b8:	e0bfb315 	stw	r2,-308(fp)
    37bc:	e0bf8217 	ldw	r2,-504(fp)
    37c0:	0084303a 	nor	r2,zero,r2
    37c4:	e0bfb415 	stw	r2,-304(fp)
    37c8:	e0bf8517 	ldw	r2,-492(fp)
    37cc:	e13fb317 	ldw	r4,-308(fp)
    37d0:	1104703a 	and	r2,r2,r4
    37d4:	e0bfb515 	stw	r2,-300(fp)
    37d8:	e0bf8617 	ldw	r2,-488(fp)
    37dc:	e17fb417 	ldw	r5,-304(fp)
    37e0:	1144703a 	and	r2,r2,r5
    37e4:	e0bfb615 	stw	r2,-296(fp)
    37e8:	e0bfb117 	ldw	r2,-316(fp)
    37ec:	e0ffb517 	ldw	r3,-300(fp)
    37f0:	10c4f03a 	xor	r2,r2,r3
    37f4:	e0bfb715 	stw	r2,-292(fp)
    37f8:	e13fb217 	ldw	r4,-312(fp)
    37fc:	e17fb617 	ldw	r5,-296(fp)
    3800:	2148f03a 	xor	r4,r4,r5
    3804:	e13fb815 	stw	r4,-288(fp)
    3808:	e13fb717 	ldw	r4,-292(fp)
    380c:	3105883a 	add	r2,r6,r4
    3810:	1189803a 	cmpltu	r4,r2,r6
    3814:	e17fb817 	ldw	r5,-288(fp)
    3818:	3947883a 	add	r3,r7,r5
    381c:	20c9883a 	add	r4,r4,r3
    3820:	2007883a 	mov	r3,r4
    3824:	100f883a 	mov	r7,r2
    3828:	1811883a 	mov	r8,r3
    382c:	00c00074 	movhi	r3,1
    3830:	18d8da04 	addi	r3,r3,25448
    3834:	e0bf8917 	ldw	r2,-476(fp)
    3838:	100490fa 	slli	r2,r2,3
    383c:	1889883a 	add	r4,r3,r2
    3840:	20800017 	ldw	r2,0(r4)
    3844:	20c00117 	ldw	r3,4(r4)
    3848:	3889883a 	add	r4,r7,r2
    384c:	21cd803a 	cmpltu	r6,r4,r7
    3850:	40cb883a 	add	r5,r8,r3
    3854:	3145883a 	add	r2,r6,r5
    3858:	100b883a 	mov	r5,r2
    385c:	200f883a 	mov	r7,r4
    3860:	2811883a 	mov	r8,r5
    3864:	e0bf8917 	ldw	r2,-476(fp)
    3868:	100690fa 	slli	r3,r2,3
    386c:	e0bf8a17 	ldw	r2,-472(fp)
    3870:	10c5883a 	add	r2,r2,r3
    3874:	11000017 	ldw	r4,0(r2)
    3878:	11400117 	ldw	r5,4(r2)
    387c:	3905883a 	add	r2,r7,r4
    3880:	11cd803a 	cmpltu	r6,r2,r7
    3884:	4147883a 	add	r3,r8,r5
    3888:	30c9883a 	add	r4,r6,r3
    388c:	2007883a 	mov	r3,r4
    3890:	e0bf8d15 	stw	r2,-460(fp)
    3894:	e0ff8e15 	stw	r3,-456(fp)
#else  /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-512 compression function to update a..h with copy */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_512(a) + Maj(a, b, c);
    3898:	e0bf7a17 	ldw	r2,-536(fp)
    389c:	1006913a 	slli	r3,r2,4
    38a0:	e0bf7917 	ldw	r2,-540(fp)
    38a4:	1004d73a 	srli	r2,r2,28
    38a8:	1884b03a 	or	r2,r3,r2
    38ac:	e0bfb915 	stw	r2,-284(fp)
    38b0:	e0bf7917 	ldw	r2,-540(fp)
    38b4:	1006913a 	slli	r3,r2,4
    38b8:	e0bf7a17 	ldw	r2,-536(fp)
    38bc:	1004d73a 	srli	r2,r2,28
    38c0:	1884b03a 	or	r2,r3,r2
    38c4:	e0bfba15 	stw	r2,-280(fp)
    38c8:	e0bf7917 	ldw	r2,-540(fp)
    38cc:	1006d0ba 	srli	r3,r2,2
    38d0:	e0bf7a17 	ldw	r2,-536(fp)
    38d4:	100497ba 	slli	r2,r2,30
    38d8:	1884b03a 	or	r2,r3,r2
    38dc:	e0bfbc15 	stw	r2,-272(fp)
    38e0:	e0bf7a17 	ldw	r2,-536(fp)
    38e4:	1006d0ba 	srli	r3,r2,2
    38e8:	e0bf7917 	ldw	r2,-540(fp)
    38ec:	100497ba 	slli	r2,r2,30
    38f0:	1884b03a 	or	r2,r3,r2
    38f4:	e0bfbb15 	stw	r2,-276(fp)
    38f8:	e1bfb917 	ldw	r6,-284(fp)
    38fc:	e1ffbb17 	ldw	r7,-276(fp)
    3900:	31ccf03a 	xor	r6,r6,r7
    3904:	e1bfbd15 	stw	r6,-268(fp)
    3908:	e0bfba17 	ldw	r2,-280(fp)
    390c:	e0ffbc17 	ldw	r3,-272(fp)
    3910:	10c4f03a 	xor	r2,r2,r3
    3914:	e0bfbe15 	stw	r2,-264(fp)
    3918:	e0bf7917 	ldw	r2,-540(fp)
    391c:	1006d1fa 	srli	r3,r2,7
    3920:	e0bf7a17 	ldw	r2,-536(fp)
    3924:	1004967a 	slli	r2,r2,25
    3928:	1884b03a 	or	r2,r3,r2
    392c:	e0bfc015 	stw	r2,-256(fp)
    3930:	e0bf7a17 	ldw	r2,-536(fp)
    3934:	1006d1fa 	srli	r3,r2,7
    3938:	e0bf7917 	ldw	r2,-540(fp)
    393c:	1004967a 	slli	r2,r2,25
    3940:	1884b03a 	or	r2,r3,r2
    3944:	e0bfbf15 	stw	r2,-260(fp)
    3948:	e13fbd17 	ldw	r4,-268(fp)
    394c:	e17fbf17 	ldw	r5,-260(fp)
    3950:	2152f03a 	xor	r9,r4,r5
    3954:	e1bfbe17 	ldw	r6,-264(fp)
    3958:	e1ffc017 	ldw	r7,-256(fp)
    395c:	31d4f03a 	xor	r10,r6,r7
    3960:	e0ff7917 	ldw	r3,-540(fp)
    3964:	e0bf7b17 	ldw	r2,-532(fp)
    3968:	18a6703a 	and	r19,r3,r2
    396c:	e0ff7a17 	ldw	r3,-536(fp)
    3970:	e0bf7c17 	ldw	r2,-528(fp)
    3974:	18a8703a 	and	r20,r3,r2
    3978:	e0ff7917 	ldw	r3,-540(fp)
    397c:	e0bf7d17 	ldw	r2,-524(fp)
    3980:	18a2703a 	and	r17,r3,r2
    3984:	e0ff7a17 	ldw	r3,-536(fp)
    3988:	e0bf7e17 	ldw	r2,-520(fp)
    398c:	18a4703a 	and	r18,r3,r2
    3990:	9c5ef03a 	xor	r15,r19,r17
    3994:	a4a0f03a 	xor	r16,r20,r18
    3998:	e0ff7b17 	ldw	r3,-532(fp)
    399c:	e0bf7d17 	ldw	r2,-524(fp)
    39a0:	189a703a 	and	r13,r3,r2
    39a4:	e0ff7c17 	ldw	r3,-528(fp)
    39a8:	e0bf7e17 	ldw	r2,-520(fp)
    39ac:	189c703a 	and	r14,r3,r2
    39b0:	7b56f03a 	xor	r11,r15,r13
    39b4:	8398f03a 	xor	r12,r16,r14
    39b8:	4ac5883a 	add	r2,r9,r11
    39bc:	1249803a 	cmpltu	r4,r2,r9
    39c0:	5307883a 	add	r3,r10,r12
    39c4:	20c9883a 	add	r4,r4,r3
    39c8:	2007883a 	mov	r3,r4
    39cc:	e0bf8f15 	stw	r2,-452(fp)
    39d0:	e0ff9015 	stw	r3,-448(fp)
        h = g;
    39d4:	e0bf8517 	ldw	r2,-492(fp)
    39d8:	e0bf8715 	stw	r2,-484(fp)
    39dc:	e0bf8617 	ldw	r2,-488(fp)
    39e0:	e0bf8815 	stw	r2,-480(fp)
        g = f;
    39e4:	e0bf8317 	ldw	r2,-500(fp)
    39e8:	e0bf8515 	stw	r2,-492(fp)
    39ec:	e0bf8417 	ldw	r2,-496(fp)
    39f0:	e0bf8615 	stw	r2,-488(fp)
        f = e;
    39f4:	e0bf8117 	ldw	r2,-508(fp)
    39f8:	e0bf8315 	stw	r2,-500(fp)
    39fc:	e0bf8217 	ldw	r2,-504(fp)
    3a00:	e0bf8415 	stw	r2,-496(fp)
        e = d + T1;
    3a04:	e1ff7f17 	ldw	r7,-516(fp)
    3a08:	e23f8017 	ldw	r8,-512(fp)
    3a0c:	e13f8d17 	ldw	r4,-460(fp)
    3a10:	e17f8e17 	ldw	r5,-456(fp)
    3a14:	3905883a 	add	r2,r7,r4
    3a18:	11cd803a 	cmpltu	r6,r2,r7
    3a1c:	4147883a 	add	r3,r8,r5
    3a20:	30c9883a 	add	r4,r6,r3
    3a24:	2007883a 	mov	r3,r4
    3a28:	e0bf8115 	stw	r2,-508(fp)
    3a2c:	e0ff8215 	stw	r3,-504(fp)
        d = c;
    3a30:	e0bf7d17 	ldw	r2,-524(fp)
    3a34:	e0bf7f15 	stw	r2,-516(fp)
    3a38:	e0bf7e17 	ldw	r2,-520(fp)
    3a3c:	e0bf8015 	stw	r2,-512(fp)
        c = b;
    3a40:	e0bf7b17 	ldw	r2,-532(fp)
    3a44:	e0bf7d15 	stw	r2,-524(fp)
    3a48:	e0bf7c17 	ldw	r2,-528(fp)
    3a4c:	e0bf7e15 	stw	r2,-520(fp)
        b = a;
    3a50:	e0bf7917 	ldw	r2,-540(fp)
    3a54:	e0bf7b15 	stw	r2,-532(fp)
    3a58:	e0bf7a17 	ldw	r2,-536(fp)
    3a5c:	e0bf7c15 	stw	r2,-528(fp)
        a = T1 + T2;
    3a60:	e1ff8d17 	ldw	r7,-460(fp)
    3a64:	e23f8e17 	ldw	r8,-456(fp)
    3a68:	e13f8f17 	ldw	r4,-452(fp)
    3a6c:	e17f9017 	ldw	r5,-448(fp)
    3a70:	3905883a 	add	r2,r7,r4
    3a74:	11cd803a 	cmpltu	r6,r2,r7
    3a78:	4147883a 	add	r3,r8,r5
    3a7c:	30c9883a 	add	r4,r6,r3
    3a80:	2007883a 	mov	r3,r4
    3a84:	e0bf7915 	stw	r2,-540(fp)
    3a88:	e0ff7a15 	stw	r3,-536(fp)

        j++;
    3a8c:	e0bf8917 	ldw	r2,-476(fp)
    3a90:	10800044 	addi	r2,r2,1
    3a94:	e0bf8915 	stw	r2,-476(fp)
    } while (j < 16);
    3a98:	e0bf8917 	ldw	r2,-476(fp)
    3a9c:	10800410 	cmplti	r2,r2,16
    3aa0:	103e8d1e 	bne	r2,zero,34d8 <__alt_mem_epcs_flash_controller+0xfdffa4d8>

    do {
        /* Part of the message block expansion: */
        s0 = W512[(j + 1) & 0x0f];
    3aa4:	e0bf8917 	ldw	r2,-476(fp)
    3aa8:	10800044 	addi	r2,r2,1
    3aac:	108003cc 	andi	r2,r2,15
    3ab0:	100690fa 	slli	r3,r2,3
    3ab4:	e0bf8a17 	ldw	r2,-472(fp)
    3ab8:	10c7883a 	add	r3,r2,r3
    3abc:	18800017 	ldw	r2,0(r3)
    3ac0:	e0bf9115 	stw	r2,-444(fp)
    3ac4:	18800117 	ldw	r2,4(r3)
    3ac8:	e0bf9215 	stw	r2,-440(fp)
        s0 = sigma0_512(s0);
    3acc:	e0bf9217 	ldw	r2,-440(fp)
    3ad0:	100697fa 	slli	r3,r2,31
    3ad4:	e0bf9117 	ldw	r2,-444(fp)
    3ad8:	1004d07a 	srli	r2,r2,1
    3adc:	1884b03a 	or	r2,r3,r2
    3ae0:	e0bfc115 	stw	r2,-252(fp)
    3ae4:	e0bf9117 	ldw	r2,-444(fp)
    3ae8:	100697fa 	slli	r3,r2,31
    3aec:	e0bf9217 	ldw	r2,-440(fp)
    3af0:	1004d07a 	srli	r2,r2,1
    3af4:	1884b03a 	or	r2,r3,r2
    3af8:	e0bfc215 	stw	r2,-248(fp)
    3afc:	e0bf9217 	ldw	r2,-440(fp)
    3b00:	1006963a 	slli	r3,r2,24
    3b04:	e0bf9117 	ldw	r2,-444(fp)
    3b08:	1004d23a 	srli	r2,r2,8
    3b0c:	1884b03a 	or	r2,r3,r2
    3b10:	e0bfc315 	stw	r2,-244(fp)
    3b14:	e0bf9117 	ldw	r2,-444(fp)
    3b18:	1006963a 	slli	r3,r2,24
    3b1c:	e0bf9217 	ldw	r2,-440(fp)
    3b20:	1004d23a 	srli	r2,r2,8
    3b24:	1884b03a 	or	r2,r3,r2
    3b28:	e0bfc415 	stw	r2,-240(fp)
    3b2c:	e0bfc117 	ldw	r2,-252(fp)
    3b30:	e0ffc317 	ldw	r3,-244(fp)
    3b34:	10c4f03a 	xor	r2,r2,r3
    3b38:	e0bfc515 	stw	r2,-236(fp)
    3b3c:	e13fc217 	ldw	r4,-248(fp)
    3b40:	e17fc417 	ldw	r5,-240(fp)
    3b44:	2148f03a 	xor	r4,r4,r5
    3b48:	e13fc615 	stw	r4,-232(fp)
    3b4c:	e0bf9217 	ldw	r2,-440(fp)
    3b50:	1006967a 	slli	r3,r2,25
    3b54:	e0bf9117 	ldw	r2,-444(fp)
    3b58:	1004d1fa 	srli	r2,r2,7
    3b5c:	e0bfc715 	stw	r2,-228(fp)
    3b60:	e1bfc717 	ldw	r6,-228(fp)
    3b64:	1986b03a 	or	r3,r3,r6
    3b68:	e0ffc715 	stw	r3,-228(fp)
    3b6c:	e0bf9217 	ldw	r2,-440(fp)
    3b70:	1004d1fa 	srli	r2,r2,7
    3b74:	e0bfc815 	stw	r2,-224(fp)
    3b78:	e1ffc517 	ldw	r7,-236(fp)
    3b7c:	e0ffc717 	ldw	r3,-228(fp)
    3b80:	38c4f03a 	xor	r2,r7,r3
    3b84:	e0bf9115 	stw	r2,-444(fp)
    3b88:	e13fc617 	ldw	r4,-232(fp)
    3b8c:	e17fc817 	ldw	r5,-224(fp)
    3b90:	2144f03a 	xor	r2,r4,r5
    3b94:	e0bf9215 	stw	r2,-440(fp)
        s1 = W512[(j + 14) & 0x0f];
    3b98:	e0bf8917 	ldw	r2,-476(fp)
    3b9c:	10800384 	addi	r2,r2,14
    3ba0:	108003cc 	andi	r2,r2,15
    3ba4:	100690fa 	slli	r3,r2,3
    3ba8:	e0bf8a17 	ldw	r2,-472(fp)
    3bac:	10c7883a 	add	r3,r2,r3
    3bb0:	18800017 	ldw	r2,0(r3)
    3bb4:	e0bf9315 	stw	r2,-436(fp)
    3bb8:	18800117 	ldw	r2,4(r3)
    3bbc:	e0bf9415 	stw	r2,-432(fp)
        s1 = sigma1_512(s1);
    3bc0:	e0bf9417 	ldw	r2,-432(fp)
    3bc4:	1006937a 	slli	r3,r2,13
    3bc8:	e0bf9317 	ldw	r2,-436(fp)
    3bcc:	1004d4fa 	srli	r2,r2,19
    3bd0:	1884b03a 	or	r2,r3,r2
    3bd4:	e0bfc915 	stw	r2,-220(fp)
    3bd8:	e0bf9317 	ldw	r2,-436(fp)
    3bdc:	1006937a 	slli	r3,r2,13
    3be0:	e0bf9417 	ldw	r2,-432(fp)
    3be4:	1004d4fa 	srli	r2,r2,19
    3be8:	1884b03a 	or	r2,r3,r2
    3bec:	e0bfca15 	stw	r2,-216(fp)
    3bf0:	e0bf9317 	ldw	r2,-436(fp)
    3bf4:	1006d77a 	srli	r3,r2,29
    3bf8:	e0bf9417 	ldw	r2,-432(fp)
    3bfc:	100490fa 	slli	r2,r2,3
    3c00:	1884b03a 	or	r2,r3,r2
    3c04:	e0bfcc15 	stw	r2,-208(fp)
    3c08:	e0bf9417 	ldw	r2,-432(fp)
    3c0c:	1006d77a 	srli	r3,r2,29
    3c10:	e0bf9317 	ldw	r2,-436(fp)
    3c14:	100490fa 	slli	r2,r2,3
    3c18:	1884b03a 	or	r2,r3,r2
    3c1c:	e0bfcb15 	stw	r2,-212(fp)
    3c20:	e1bfc917 	ldw	r6,-220(fp)
    3c24:	e1ffcb17 	ldw	r7,-212(fp)
    3c28:	31ccf03a 	xor	r6,r6,r7
    3c2c:	e1bfcd15 	stw	r6,-204(fp)
    3c30:	e0bfca17 	ldw	r2,-216(fp)
    3c34:	e0ffcc17 	ldw	r3,-208(fp)
    3c38:	10c4f03a 	xor	r2,r2,r3
    3c3c:	e0bfce15 	stw	r2,-200(fp)
    3c40:	e0bf9417 	ldw	r2,-432(fp)
    3c44:	100696ba 	slli	r3,r2,26
    3c48:	e0bf9317 	ldw	r2,-436(fp)
    3c4c:	1004d1ba 	srli	r2,r2,6
    3c50:	e0bfcf15 	stw	r2,-196(fp)
    3c54:	e13fcf17 	ldw	r4,-196(fp)
    3c58:	1906b03a 	or	r3,r3,r4
    3c5c:	e0ffcf15 	stw	r3,-196(fp)
    3c60:	e0bf9417 	ldw	r2,-432(fp)
    3c64:	1004d1ba 	srli	r2,r2,6
    3c68:	e0bfd015 	stw	r2,-192(fp)
    3c6c:	e17fcd17 	ldw	r5,-204(fp)
    3c70:	e1bfcf17 	ldw	r6,-196(fp)
    3c74:	2984f03a 	xor	r2,r5,r6
    3c78:	e0bf9315 	stw	r2,-436(fp)
    3c7c:	e1ffce17 	ldw	r7,-200(fp)
    3c80:	e0ffd017 	ldw	r3,-192(fp)
    3c84:	38c4f03a 	xor	r2,r7,r3
    3c88:	e0bf9415 	stw	r2,-432(fp)

        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    3c8c:	e0bf8217 	ldw	r2,-504(fp)
    3c90:	100694ba 	slli	r3,r2,18
    3c94:	e0bf8117 	ldw	r2,-508(fp)
    3c98:	1004d3ba 	srli	r2,r2,14
    3c9c:	1884b03a 	or	r2,r3,r2
    3ca0:	e0bfd115 	stw	r2,-188(fp)
    3ca4:	e0bf8117 	ldw	r2,-508(fp)
    3ca8:	100694ba 	slli	r3,r2,18
    3cac:	e0bf8217 	ldw	r2,-504(fp)
    3cb0:	1004d3ba 	srli	r2,r2,14
    3cb4:	1884b03a 	or	r2,r3,r2
    3cb8:	e0bfd215 	stw	r2,-184(fp)
    3cbc:	e0bf8217 	ldw	r2,-504(fp)
    3cc0:	100693ba 	slli	r3,r2,14
    3cc4:	e0bf8117 	ldw	r2,-508(fp)
    3cc8:	1004d4ba 	srli	r2,r2,18
    3ccc:	1884b03a 	or	r2,r3,r2
    3cd0:	e0bfd315 	stw	r2,-180(fp)
    3cd4:	e0bf8117 	ldw	r2,-508(fp)
    3cd8:	100693ba 	slli	r3,r2,14
    3cdc:	e0bf8217 	ldw	r2,-504(fp)
    3ce0:	1004d4ba 	srli	r2,r2,18
    3ce4:	1884b03a 	or	r2,r3,r2
    3ce8:	e0bfd415 	stw	r2,-176(fp)
    3cec:	e13fd117 	ldw	r4,-188(fp)
    3cf0:	e17fd317 	ldw	r5,-180(fp)
    3cf4:	2148f03a 	xor	r4,r4,r5
    3cf8:	e13fd515 	stw	r4,-172(fp)
    3cfc:	e1bfd217 	ldw	r6,-184(fp)
    3d00:	e1ffd417 	ldw	r7,-176(fp)
    3d04:	31ccf03a 	xor	r6,r6,r7
    3d08:	e1bfd615 	stw	r6,-168(fp)
    3d0c:	e0bf8117 	ldw	r2,-508(fp)
    3d10:	1006d27a 	srli	r3,r2,9
    3d14:	e0bf8217 	ldw	r2,-504(fp)
    3d18:	100495fa 	slli	r2,r2,23
    3d1c:	1884b03a 	or	r2,r3,r2
    3d20:	e0bfd815 	stw	r2,-160(fp)
    3d24:	e0bf8217 	ldw	r2,-504(fp)
    3d28:	1006d27a 	srli	r3,r2,9
    3d2c:	e0bf8117 	ldw	r2,-508(fp)
    3d30:	100495fa 	slli	r2,r2,23
    3d34:	1884b03a 	or	r2,r3,r2
    3d38:	e0bfd715 	stw	r2,-164(fp)
    3d3c:	e0bfd517 	ldw	r2,-172(fp)
    3d40:	e0ffd717 	ldw	r3,-164(fp)
    3d44:	10c4f03a 	xor	r2,r2,r3
    3d48:	e0bfd915 	stw	r2,-156(fp)
    3d4c:	e13fd617 	ldw	r4,-168(fp)
    3d50:	e17fd817 	ldw	r5,-160(fp)
    3d54:	2148f03a 	xor	r4,r4,r5
    3d58:	e13fda15 	stw	r4,-152(fp)
    3d5c:	e0bf8717 	ldw	r2,-484(fp)
    3d60:	e0ff8817 	ldw	r3,-480(fp)
    3d64:	e1bfd917 	ldw	r6,-156(fp)
    3d68:	3089883a 	add	r4,r6,r2
    3d6c:	e1ffd917 	ldw	r7,-156(fp)
    3d70:	21cd803a 	cmpltu	r6,r4,r7
    3d74:	e1ffda17 	ldw	r7,-152(fp)
    3d78:	38cb883a 	add	r5,r7,r3
    3d7c:	3145883a 	add	r2,r6,r5
    3d80:	100b883a 	mov	r5,r2
    3d84:	200d883a 	mov	r6,r4
    3d88:	280f883a 	mov	r7,r5
    3d8c:	e0ff8117 	ldw	r3,-508(fp)
    3d90:	e0bf8317 	ldw	r2,-500(fp)
    3d94:	1884703a 	and	r2,r3,r2
    3d98:	e0bfdb15 	stw	r2,-148(fp)
    3d9c:	e0ff8217 	ldw	r3,-504(fp)
    3da0:	e0bf8417 	ldw	r2,-496(fp)
    3da4:	1884703a 	and	r2,r3,r2
    3da8:	e0bfdc15 	stw	r2,-144(fp)
    3dac:	e0bf8117 	ldw	r2,-508(fp)
    3db0:	0084303a 	nor	r2,zero,r2
    3db4:	e0bfdd15 	stw	r2,-140(fp)
    3db8:	e0bf8217 	ldw	r2,-504(fp)
    3dbc:	0084303a 	nor	r2,zero,r2
    3dc0:	e0bfde15 	stw	r2,-136(fp)
    3dc4:	e0bf8517 	ldw	r2,-492(fp)
    3dc8:	e0ffdd17 	ldw	r3,-140(fp)
    3dcc:	10c4703a 	and	r2,r2,r3
    3dd0:	e0bfdf15 	stw	r2,-132(fp)
    3dd4:	e0bf8617 	ldw	r2,-488(fp)
    3dd8:	e13fde17 	ldw	r4,-136(fp)
    3ddc:	1104703a 	and	r2,r2,r4
    3de0:	e0bfe015 	stw	r2,-128(fp)
    3de4:	e17fdb17 	ldw	r5,-148(fp)
    3de8:	e0bfdf17 	ldw	r2,-132(fp)
    3dec:	288af03a 	xor	r5,r5,r2
    3df0:	e17fe115 	stw	r5,-124(fp)
    3df4:	e0ffdc17 	ldw	r3,-144(fp)
    3df8:	e13fe017 	ldw	r4,-128(fp)
    3dfc:	1906f03a 	xor	r3,r3,r4
    3e00:	e0ffe215 	stw	r3,-120(fp)
    3e04:	e17fe117 	ldw	r5,-124(fp)
    3e08:	3145883a 	add	r2,r6,r5
    3e0c:	1189803a 	cmpltu	r4,r2,r6
    3e10:	e17fe217 	ldw	r5,-120(fp)
    3e14:	3947883a 	add	r3,r7,r5
    3e18:	20c9883a 	add	r4,r4,r3
    3e1c:	2007883a 	mov	r3,r4
    3e20:	100f883a 	mov	r7,r2
    3e24:	1811883a 	mov	r8,r3
    3e28:	00c00074 	movhi	r3,1
    3e2c:	18d8da04 	addi	r3,r3,25448
    3e30:	e0bf8917 	ldw	r2,-476(fp)
    3e34:	100490fa 	slli	r2,r2,3
    3e38:	1889883a 	add	r4,r3,r2
    3e3c:	20800017 	ldw	r2,0(r4)
    3e40:	20c00117 	ldw	r3,4(r4)
    3e44:	3889883a 	add	r4,r7,r2
    3e48:	21cd803a 	cmpltu	r6,r4,r7
    3e4c:	40cb883a 	add	r5,r8,r3
    3e50:	3145883a 	add	r2,r6,r5
    3e54:	100b883a 	mov	r5,r2
    3e58:	2019883a 	mov	r12,r4
    3e5c:	281b883a 	mov	r13,r5
             (W512[j & 0x0f] += s1 + W512[(j + 9) & 0x0f] + s0);
    3e60:	e0bf8917 	ldw	r2,-476(fp)
    3e64:	108003cc 	andi	r2,r2,15
    3e68:	100690fa 	slli	r3,r2,3
    3e6c:	e0bf8a17 	ldw	r2,-472(fp)
    3e70:	10d7883a 	add	r11,r2,r3
    3e74:	e0bf8917 	ldw	r2,-476(fp)
    3e78:	108003cc 	andi	r2,r2,15
    3e7c:	100690fa 	slli	r3,r2,3
    3e80:	e0bf8a17 	ldw	r2,-472(fp)
    3e84:	10c5883a 	add	r2,r2,r3
    3e88:	12400017 	ldw	r9,0(r2)
    3e8c:	12800117 	ldw	r10,4(r2)
    3e90:	e0bf8917 	ldw	r2,-476(fp)
    3e94:	10800244 	addi	r2,r2,9
    3e98:	108003cc 	andi	r2,r2,15
    3e9c:	100690fa 	slli	r3,r2,3
    3ea0:	e0bf8a17 	ldw	r2,-472(fp)
    3ea4:	10c5883a 	add	r2,r2,r3
    3ea8:	11c00017 	ldw	r7,0(r2)
    3eac:	12000117 	ldw	r8,4(r2)
    3eb0:	e0bf9317 	ldw	r2,-436(fp)
    3eb4:	e0ff9417 	ldw	r3,-432(fp)
    3eb8:	3889883a 	add	r4,r7,r2
    3ebc:	21cd803a 	cmpltu	r6,r4,r7
    3ec0:	40cb883a 	add	r5,r8,r3
    3ec4:	3145883a 	add	r2,r6,r5
    3ec8:	100b883a 	mov	r5,r2
    3ecc:	200f883a 	mov	r7,r4
    3ed0:	2811883a 	mov	r8,r5
    3ed4:	e0bf9117 	ldw	r2,-444(fp)
    3ed8:	e0ff9217 	ldw	r3,-440(fp)
    3edc:	3889883a 	add	r4,r7,r2
    3ee0:	21cd803a 	cmpltu	r6,r4,r7
    3ee4:	40cb883a 	add	r5,r8,r3
    3ee8:	3145883a 	add	r2,r6,r5
    3eec:	100b883a 	mov	r5,r2
    3ef0:	200d883a 	mov	r6,r4
    3ef4:	280f883a 	mov	r7,r5
    3ef8:	4989883a 	add	r4,r9,r6
    3efc:	2245803a 	cmpltu	r2,r4,r9
    3f00:	51cb883a 	add	r5,r10,r7
    3f04:	1145883a 	add	r2,r2,r5
    3f08:	100b883a 	mov	r5,r2
    3f0c:	2005883a 	mov	r2,r4
    3f10:	2807883a 	mov	r3,r5
    3f14:	58800015 	stw	r2,0(r11)
    3f18:	58c00115 	stw	r3,4(r11)
    3f1c:	59000017 	ldw	r4,0(r11)
    3f20:	59400117 	ldw	r5,4(r11)
        s0 = sigma0_512(s0);
        s1 = W512[(j + 14) & 0x0f];
        s1 = sigma1_512(s1);

        /* Apply the SHA-512 compression function to update a..h */
        T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    3f24:	6105883a 	add	r2,r12,r4
    3f28:	130d803a 	cmpltu	r6,r2,r12
    3f2c:	6947883a 	add	r3,r13,r5
    3f30:	30c9883a 	add	r4,r6,r3
    3f34:	2007883a 	mov	r3,r4
    3f38:	e0bf8d15 	stw	r2,-460(fp)
    3f3c:	e0ff8e15 	stw	r3,-456(fp)
             (W512[j & 0x0f] += s1 + W512[(j + 9) & 0x0f] + s0);
        T2 = Sigma0_512(a) + Maj(a, b, c);
    3f40:	e0bf7a17 	ldw	r2,-536(fp)
    3f44:	1006913a 	slli	r3,r2,4
    3f48:	e0bf7917 	ldw	r2,-540(fp)
    3f4c:	1004d73a 	srli	r2,r2,28
    3f50:	1884b03a 	or	r2,r3,r2
    3f54:	e0bfe315 	stw	r2,-116(fp)
    3f58:	e0bf7917 	ldw	r2,-540(fp)
    3f5c:	1006913a 	slli	r3,r2,4
    3f60:	e0bf7a17 	ldw	r2,-536(fp)
    3f64:	1004d73a 	srli	r2,r2,28
    3f68:	1884b03a 	or	r2,r3,r2
    3f6c:	e0bfe415 	stw	r2,-112(fp)
    3f70:	e0bf7917 	ldw	r2,-540(fp)
    3f74:	1006d0ba 	srli	r3,r2,2
    3f78:	e0bf7a17 	ldw	r2,-536(fp)
    3f7c:	100497ba 	slli	r2,r2,30
    3f80:	1884b03a 	or	r2,r3,r2
    3f84:	e0bfe615 	stw	r2,-104(fp)
    3f88:	e0bf7a17 	ldw	r2,-536(fp)
    3f8c:	1006d0ba 	srli	r3,r2,2
    3f90:	e0bf7917 	ldw	r2,-540(fp)
    3f94:	100497ba 	slli	r2,r2,30
    3f98:	1884b03a 	or	r2,r3,r2
    3f9c:	e0bfe515 	stw	r2,-108(fp)
    3fa0:	e1bfe317 	ldw	r6,-116(fp)
    3fa4:	e1ffe517 	ldw	r7,-108(fp)
    3fa8:	31ccf03a 	xor	r6,r6,r7
    3fac:	e1bfe715 	stw	r6,-100(fp)
    3fb0:	e0bfe417 	ldw	r2,-112(fp)
    3fb4:	e0ffe617 	ldw	r3,-104(fp)
    3fb8:	10c4f03a 	xor	r2,r2,r3
    3fbc:	e0bfe815 	stw	r2,-96(fp)
    3fc0:	e0bf7917 	ldw	r2,-540(fp)
    3fc4:	1006d1fa 	srli	r3,r2,7
    3fc8:	e0bf7a17 	ldw	r2,-536(fp)
    3fcc:	1004967a 	slli	r2,r2,25
    3fd0:	1884b03a 	or	r2,r3,r2
    3fd4:	e0bfea15 	stw	r2,-88(fp)
    3fd8:	e0bf7a17 	ldw	r2,-536(fp)
    3fdc:	1006d1fa 	srli	r3,r2,7
    3fe0:	e0bf7917 	ldw	r2,-540(fp)
    3fe4:	1004967a 	slli	r2,r2,25
    3fe8:	1884b03a 	or	r2,r3,r2
    3fec:	e0bfe915 	stw	r2,-92(fp)
    3ff0:	e13fe717 	ldw	r4,-100(fp)
    3ff4:	e17fe917 	ldw	r5,-92(fp)
    3ff8:	2148f03a 	xor	r4,r4,r5
    3ffc:	e13feb15 	stw	r4,-84(fp)
    4000:	e1bfe817 	ldw	r6,-96(fp)
    4004:	e1ffea17 	ldw	r7,-88(fp)
    4008:	31ccf03a 	xor	r6,r6,r7
    400c:	e1bfec15 	stw	r6,-80(fp)
    4010:	e0ff7917 	ldw	r3,-540(fp)
    4014:	e0bf7b17 	ldw	r2,-532(fp)
    4018:	1884703a 	and	r2,r3,r2
    401c:	e0bfed15 	stw	r2,-76(fp)
    4020:	e0ff7a17 	ldw	r3,-536(fp)
    4024:	e0bf7c17 	ldw	r2,-528(fp)
    4028:	1884703a 	and	r2,r3,r2
    402c:	e0bfee15 	stw	r2,-72(fp)
    4030:	e0ff7917 	ldw	r3,-540(fp)
    4034:	e0bf7d17 	ldw	r2,-524(fp)
    4038:	1884703a 	and	r2,r3,r2
    403c:	e0bfef15 	stw	r2,-68(fp)
    4040:	e0ff7a17 	ldw	r3,-536(fp)
    4044:	e0bf7e17 	ldw	r2,-520(fp)
    4048:	1884703a 	and	r2,r3,r2
    404c:	e0bff015 	stw	r2,-64(fp)
    4050:	e0bfed17 	ldw	r2,-76(fp)
    4054:	e0ffef17 	ldw	r3,-68(fp)
    4058:	10c4f03a 	xor	r2,r2,r3
    405c:	e0bff115 	stw	r2,-60(fp)
    4060:	e13fee17 	ldw	r4,-72(fp)
    4064:	e17ff017 	ldw	r5,-64(fp)
    4068:	2148f03a 	xor	r4,r4,r5
    406c:	e13ff215 	stw	r4,-56(fp)
    4070:	e0ff7b17 	ldw	r3,-532(fp)
    4074:	e0bf7d17 	ldw	r2,-524(fp)
    4078:	1884703a 	and	r2,r3,r2
    407c:	e0bff315 	stw	r2,-52(fp)
    4080:	e0ff7c17 	ldw	r3,-528(fp)
    4084:	e0bf7e17 	ldw	r2,-520(fp)
    4088:	1884703a 	and	r2,r3,r2
    408c:	e0bff415 	stw	r2,-48(fp)
    4090:	e1bff117 	ldw	r6,-60(fp)
    4094:	e1fff317 	ldw	r7,-52(fp)
    4098:	31ccf03a 	xor	r6,r6,r7
    409c:	e1bff515 	stw	r6,-44(fp)
    40a0:	e0bff217 	ldw	r2,-56(fp)
    40a4:	e0fff417 	ldw	r3,-48(fp)
    40a8:	10c4f03a 	xor	r2,r2,r3
    40ac:	e0bff615 	stw	r2,-40(fp)
    40b0:	e13feb17 	ldw	r4,-84(fp)
    40b4:	e17ff517 	ldw	r5,-44(fp)
    40b8:	2145883a 	add	r2,r4,r5
    40bc:	e1bfeb17 	ldw	r6,-84(fp)
    40c0:	1189803a 	cmpltu	r4,r2,r6
    40c4:	e1ffec17 	ldw	r7,-80(fp)
    40c8:	e17ff617 	ldw	r5,-40(fp)
    40cc:	3947883a 	add	r3,r7,r5
    40d0:	20c9883a 	add	r4,r4,r3
    40d4:	2007883a 	mov	r3,r4
    40d8:	e0bf8f15 	stw	r2,-452(fp)
    40dc:	e0ff9015 	stw	r3,-448(fp)
        h = g;
    40e0:	e0bf8517 	ldw	r2,-492(fp)
    40e4:	e0bf8715 	stw	r2,-484(fp)
    40e8:	e0bf8617 	ldw	r2,-488(fp)
    40ec:	e0bf8815 	stw	r2,-480(fp)
        g = f;
    40f0:	e0bf8317 	ldw	r2,-500(fp)
    40f4:	e0bf8515 	stw	r2,-492(fp)
    40f8:	e0bf8417 	ldw	r2,-496(fp)
    40fc:	e0bf8615 	stw	r2,-488(fp)
        f = e;
    4100:	e0bf8117 	ldw	r2,-508(fp)
    4104:	e0bf8315 	stw	r2,-500(fp)
    4108:	e0bf8217 	ldw	r2,-504(fp)
    410c:	e0bf8415 	stw	r2,-496(fp)
        e = d + T1;
    4110:	e1ff7f17 	ldw	r7,-516(fp)
    4114:	e23f8017 	ldw	r8,-512(fp)
    4118:	e13f8d17 	ldw	r4,-460(fp)
    411c:	e17f8e17 	ldw	r5,-456(fp)
    4120:	3905883a 	add	r2,r7,r4
    4124:	11cd803a 	cmpltu	r6,r2,r7
    4128:	4147883a 	add	r3,r8,r5
    412c:	30c9883a 	add	r4,r6,r3
    4130:	2007883a 	mov	r3,r4
    4134:	e0bf8115 	stw	r2,-508(fp)
    4138:	e0ff8215 	stw	r3,-504(fp)
        d = c;
    413c:	e0bf7d17 	ldw	r2,-524(fp)
    4140:	e0bf7f15 	stw	r2,-516(fp)
    4144:	e0bf7e17 	ldw	r2,-520(fp)
    4148:	e0bf8015 	stw	r2,-512(fp)
        c = b;
    414c:	e0bf7b17 	ldw	r2,-532(fp)
    4150:	e0bf7d15 	stw	r2,-524(fp)
    4154:	e0bf7c17 	ldw	r2,-528(fp)
    4158:	e0bf7e15 	stw	r2,-520(fp)
        b = a;
    415c:	e0bf7917 	ldw	r2,-540(fp)
    4160:	e0bf7b15 	stw	r2,-532(fp)
    4164:	e0bf7a17 	ldw	r2,-536(fp)
    4168:	e0bf7c15 	stw	r2,-528(fp)
        a = T1 + T2;
    416c:	e1ff8d17 	ldw	r7,-460(fp)
    4170:	e23f8e17 	ldw	r8,-456(fp)
    4174:	e13f8f17 	ldw	r4,-452(fp)
    4178:	e17f9017 	ldw	r5,-448(fp)
    417c:	3905883a 	add	r2,r7,r4
    4180:	11cd803a 	cmpltu	r6,r2,r7
    4184:	4147883a 	add	r3,r8,r5
    4188:	30c9883a 	add	r4,r6,r3
    418c:	2007883a 	mov	r3,r4
    4190:	e0bf7915 	stw	r2,-540(fp)
    4194:	e0ff7a15 	stw	r3,-536(fp)

        j++;
    4198:	e0bf8917 	ldw	r2,-476(fp)
    419c:	10800044 	addi	r2,r2,1
    41a0:	e0bf8915 	stw	r2,-476(fp)
    } while (j < 80);
    41a4:	e0bf8917 	ldw	r2,-476(fp)
    41a8:	10801410 	cmplti	r2,r2,80
    41ac:	103e3d1e 	bne	r2,zero,3aa4 <__alt_mem_epcs_flash_controller+0xfdffaaa4>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
    41b0:	e0bf9517 	ldw	r2,-428(fp)
    41b4:	11000017 	ldw	r4,0(r2)
    41b8:	11400117 	ldw	r5,4(r2)
    41bc:	e1bf7917 	ldw	r6,-540(fp)
    41c0:	e1ff7a17 	ldw	r7,-536(fp)
    41c4:	2185883a 	add	r2,r4,r6
    41c8:	1111803a 	cmpltu	r8,r2,r4
    41cc:	29c7883a 	add	r3,r5,r7
    41d0:	40c9883a 	add	r4,r8,r3
    41d4:	2007883a 	mov	r3,r4
    41d8:	1009883a 	mov	r4,r2
    41dc:	180b883a 	mov	r5,r3
    41e0:	e0bf9517 	ldw	r2,-428(fp)
    41e4:	11000015 	stw	r4,0(r2)
    41e8:	11400115 	stw	r5,4(r2)
    context->state[1] += b;
    41ec:	e0bf9517 	ldw	r2,-428(fp)
    41f0:	11000217 	ldw	r4,8(r2)
    41f4:	11400317 	ldw	r5,12(r2)
    41f8:	e1bf7b17 	ldw	r6,-532(fp)
    41fc:	e1ff7c17 	ldw	r7,-528(fp)
    4200:	2185883a 	add	r2,r4,r6
    4204:	1111803a 	cmpltu	r8,r2,r4
    4208:	29c7883a 	add	r3,r5,r7
    420c:	40c9883a 	add	r4,r8,r3
    4210:	2007883a 	mov	r3,r4
    4214:	1009883a 	mov	r4,r2
    4218:	180b883a 	mov	r5,r3
    421c:	e0bf9517 	ldw	r2,-428(fp)
    4220:	11000215 	stw	r4,8(r2)
    4224:	11400315 	stw	r5,12(r2)
    context->state[2] += c;
    4228:	e0bf9517 	ldw	r2,-428(fp)
    422c:	11000417 	ldw	r4,16(r2)
    4230:	11400517 	ldw	r5,20(r2)
    4234:	e1bf7d17 	ldw	r6,-524(fp)
    4238:	e1ff7e17 	ldw	r7,-520(fp)
    423c:	2185883a 	add	r2,r4,r6
    4240:	1111803a 	cmpltu	r8,r2,r4
    4244:	29c7883a 	add	r3,r5,r7
    4248:	40c9883a 	add	r4,r8,r3
    424c:	2007883a 	mov	r3,r4
    4250:	1009883a 	mov	r4,r2
    4254:	180b883a 	mov	r5,r3
    4258:	e0bf9517 	ldw	r2,-428(fp)
    425c:	11000415 	stw	r4,16(r2)
    4260:	11400515 	stw	r5,20(r2)
    context->state[3] += d;
    4264:	e0bf9517 	ldw	r2,-428(fp)
    4268:	11000617 	ldw	r4,24(r2)
    426c:	11400717 	ldw	r5,28(r2)
    4270:	e1bf7f17 	ldw	r6,-516(fp)
    4274:	e1ff8017 	ldw	r7,-512(fp)
    4278:	2185883a 	add	r2,r4,r6
    427c:	1111803a 	cmpltu	r8,r2,r4
    4280:	29c7883a 	add	r3,r5,r7
    4284:	40c9883a 	add	r4,r8,r3
    4288:	2007883a 	mov	r3,r4
    428c:	1009883a 	mov	r4,r2
    4290:	180b883a 	mov	r5,r3
    4294:	e0bf9517 	ldw	r2,-428(fp)
    4298:	11000615 	stw	r4,24(r2)
    429c:	11400715 	stw	r5,28(r2)
    context->state[4] += e;
    42a0:	e0bf9517 	ldw	r2,-428(fp)
    42a4:	11000817 	ldw	r4,32(r2)
    42a8:	11400917 	ldw	r5,36(r2)
    42ac:	e1bf8117 	ldw	r6,-508(fp)
    42b0:	e1ff8217 	ldw	r7,-504(fp)
    42b4:	2185883a 	add	r2,r4,r6
    42b8:	1111803a 	cmpltu	r8,r2,r4
    42bc:	29c7883a 	add	r3,r5,r7
    42c0:	40c9883a 	add	r4,r8,r3
    42c4:	2007883a 	mov	r3,r4
    42c8:	1009883a 	mov	r4,r2
    42cc:	180b883a 	mov	r5,r3
    42d0:	e0bf9517 	ldw	r2,-428(fp)
    42d4:	11000815 	stw	r4,32(r2)
    42d8:	11400915 	stw	r5,36(r2)
    context->state[5] += f;
    42dc:	e0bf9517 	ldw	r2,-428(fp)
    42e0:	11000a17 	ldw	r4,40(r2)
    42e4:	11400b17 	ldw	r5,44(r2)
    42e8:	e1bf8317 	ldw	r6,-500(fp)
    42ec:	e1ff8417 	ldw	r7,-496(fp)
    42f0:	2185883a 	add	r2,r4,r6
    42f4:	1111803a 	cmpltu	r8,r2,r4
    42f8:	29c7883a 	add	r3,r5,r7
    42fc:	40c9883a 	add	r4,r8,r3
    4300:	2007883a 	mov	r3,r4
    4304:	1009883a 	mov	r4,r2
    4308:	180b883a 	mov	r5,r3
    430c:	e0bf9517 	ldw	r2,-428(fp)
    4310:	11000a15 	stw	r4,40(r2)
    4314:	11400b15 	stw	r5,44(r2)
    context->state[6] += g;
    4318:	e0bf9517 	ldw	r2,-428(fp)
    431c:	11000c17 	ldw	r4,48(r2)
    4320:	11400d17 	ldw	r5,52(r2)
    4324:	e1bf8517 	ldw	r6,-492(fp)
    4328:	e1ff8617 	ldw	r7,-488(fp)
    432c:	2185883a 	add	r2,r4,r6
    4330:	1111803a 	cmpltu	r8,r2,r4
    4334:	29c7883a 	add	r3,r5,r7
    4338:	40c9883a 	add	r4,r8,r3
    433c:	2007883a 	mov	r3,r4
    4340:	1009883a 	mov	r4,r2
    4344:	180b883a 	mov	r5,r3
    4348:	e0bf9517 	ldw	r2,-428(fp)
    434c:	11000c15 	stw	r4,48(r2)
    4350:	11400d15 	stw	r5,52(r2)
    context->state[7] += h;
    4354:	e0bf9517 	ldw	r2,-428(fp)
    4358:	11000e17 	ldw	r4,56(r2)
    435c:	11400f17 	ldw	r5,60(r2)
    4360:	e1bf8717 	ldw	r6,-484(fp)
    4364:	e1ff8817 	ldw	r7,-480(fp)
    4368:	2185883a 	add	r2,r4,r6
    436c:	1111803a 	cmpltu	r8,r2,r4
    4370:	29c7883a 	add	r3,r5,r7
    4374:	40c9883a 	add	r4,r8,r3
    4378:	2007883a 	mov	r3,r4
    437c:	1009883a 	mov	r4,r2
    4380:	180b883a 	mov	r5,r3
    4384:	e0bf9517 	ldw	r2,-428(fp)
    4388:	11000e15 	stw	r4,56(r2)
    438c:	11400f15 	stw	r5,60(r2)

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
    4390:	e03f8f15 	stw	zero,-452(fp)
    4394:	e03f9015 	stw	zero,-448(fp)
    4398:	e0bf8f17 	ldw	r2,-452(fp)
    439c:	e0bf8d15 	stw	r2,-460(fp)
    43a0:	e0bf9017 	ldw	r2,-448(fp)
    43a4:	e0bf8e15 	stw	r2,-456(fp)
    43a8:	e0bf8d17 	ldw	r2,-460(fp)
    43ac:	e0bf8715 	stw	r2,-484(fp)
    43b0:	e0bf8e17 	ldw	r2,-456(fp)
    43b4:	e0bf8815 	stw	r2,-480(fp)
    43b8:	e0bf8717 	ldw	r2,-484(fp)
    43bc:	e0bf8515 	stw	r2,-492(fp)
    43c0:	e0bf8817 	ldw	r2,-480(fp)
    43c4:	e0bf8615 	stw	r2,-488(fp)
    43c8:	e0bf8517 	ldw	r2,-492(fp)
    43cc:	e0bf8315 	stw	r2,-500(fp)
    43d0:	e0bf8617 	ldw	r2,-488(fp)
    43d4:	e0bf8415 	stw	r2,-496(fp)
    43d8:	e0bf8317 	ldw	r2,-500(fp)
    43dc:	e0bf8115 	stw	r2,-508(fp)
    43e0:	e0bf8417 	ldw	r2,-496(fp)
    43e4:	e0bf8215 	stw	r2,-504(fp)
    43e8:	e0bf8117 	ldw	r2,-508(fp)
    43ec:	e0bf7f15 	stw	r2,-516(fp)
    43f0:	e0bf8217 	ldw	r2,-504(fp)
    43f4:	e0bf8015 	stw	r2,-512(fp)
    43f8:	e0bf7f17 	ldw	r2,-516(fp)
    43fc:	e0bf7d15 	stw	r2,-524(fp)
    4400:	e0bf8017 	ldw	r2,-512(fp)
    4404:	e0bf7e15 	stw	r2,-520(fp)
    4408:	e0bf7d17 	ldw	r2,-524(fp)
    440c:	e0bf7b15 	stw	r2,-532(fp)
    4410:	e0bf7e17 	ldw	r2,-520(fp)
    4414:	e0bf7c15 	stw	r2,-528(fp)
    4418:	e0bf7b17 	ldw	r2,-532(fp)
    441c:	e0bf7915 	stw	r2,-540(fp)
    4420:	e0bf7c17 	ldw	r2,-528(fp)
    4424:	e0bf7a15 	stw	r2,-536(fp)
}
    4428:	0001883a 	nop
    442c:	e6fff904 	addi	sp,fp,-28
    4430:	df000717 	ldw	fp,28(sp)
    4434:	dd800617 	ldw	r22,24(sp)
    4438:	dd400517 	ldw	r21,20(sp)
    443c:	dd000417 	ldw	r20,16(sp)
    4440:	dcc00317 	ldw	r19,12(sp)
    4444:	dc800217 	ldw	r18,8(sp)
    4448:	dc400117 	ldw	r17,4(sp)
    444c:	dc000017 	ldw	r16,0(sp)
    4450:	dec00804 	addi	sp,sp,32
    4454:	f800283a 	ret

00004458 <sha512_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void sha512_Update(SHA512_CTX* context, const sha2_byte* data, size_t len)
{
    4458:	deffed04 	addi	sp,sp,-76
    445c:	dfc01215 	stw	ra,72(sp)
    4460:	df001115 	stw	fp,68(sp)
    4464:	ddc01015 	stw	r23,64(sp)
    4468:	dd800f15 	stw	r22,60(sp)
    446c:	dd400e15 	stw	r21,56(sp)
    4470:	dd000d15 	stw	r20,52(sp)
    4474:	dcc00c15 	stw	r19,48(sp)
    4478:	dc800b15 	stw	r18,44(sp)
    447c:	dc400a15 	stw	r17,40(sp)
    4480:	dc000915 	stw	r16,36(sp)
    4484:	df001104 	addi	fp,sp,68
    4488:	e13ff115 	stw	r4,-60(fp)
    448c:	e17ff215 	stw	r5,-56(fp)
    4490:	e1bff315 	stw	r6,-52(fp)
    unsigned int freespace, usedspace;

    if (len == 0) {
    4494:	e0bff317 	ldw	r2,-52(fp)
    4498:	1000f426 	beq	r2,zero,486c <sha512_Update+0x414>
        /* Calling with no data is valid - we do nothing */
        return;
    }

    usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    449c:	e13ff117 	ldw	r4,-60(fp)
    44a0:	20801017 	ldw	r2,64(r4)
    44a4:	20c01117 	ldw	r3,68(r4)
    44a8:	1808977a 	slli	r4,r3,29
    44ac:	100ed0fa 	srli	r7,r2,3
    44b0:	21ceb03a 	or	r7,r4,r7
    44b4:	1810d0fa 	srli	r8,r3,3
    44b8:	3805883a 	mov	r2,r7
    44bc:	10801fcc 	andi	r2,r2,127
    44c0:	e0bfef15 	stw	r2,-68(fp)
    if (usedspace > 0) {
    44c4:	e0bfef17 	ldw	r2,-68(fp)
    44c8:	1000af26 	beq	r2,zero,4788 <sha512_Update+0x330>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA512_BLOCK_LENGTH - usedspace;
    44cc:	00c02004 	movi	r3,128
    44d0:	e0bfef17 	ldw	r2,-68(fp)
    44d4:	1885c83a 	sub	r2,r3,r2
    44d8:	e0bff015 	stw	r2,-64(fp)

        if (len >= freespace) {
    44dc:	e0fff317 	ldw	r3,-52(fp)
    44e0:	e0bff017 	ldw	r2,-64(fp)
    44e4:	18804236 	bltu	r3,r2,45f0 <sha512_Update+0x198>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
    44e8:	e0bfef17 	ldw	r2,-68(fp)
    44ec:	10801404 	addi	r2,r2,80
    44f0:	e0fff117 	ldw	r3,-60(fp)
    44f4:	1885883a 	add	r2,r3,r2
    44f8:	e1bff017 	ldw	r6,-64(fp)
    44fc:	e17ff217 	ldw	r5,-56(fp)
    4500:	1009883a 	mov	r4,r2
    4504:	00095dc0 	call	95dc <memcpy>
            ADDINC128(context->bitcount, freespace << 3);
    4508:	e0bff117 	ldw	r2,-60(fp)
    450c:	11001017 	ldw	r4,64(r2)
    4510:	11401117 	ldw	r5,68(r2)
    4514:	e0bff017 	ldw	r2,-64(fp)
    4518:	100490fa 	slli	r2,r2,3
    451c:	e0bff615 	stw	r2,-40(fp)
    4520:	e03ff715 	stw	zero,-36(fp)
    4524:	e1bff617 	ldw	r6,-40(fp)
    4528:	2185883a 	add	r2,r4,r6
    452c:	110d803a 	cmpltu	r6,r2,r4
    4530:	e1fff717 	ldw	r7,-36(fp)
    4534:	29c7883a 	add	r3,r5,r7
    4538:	30c9883a 	add	r4,r6,r3
    453c:	2007883a 	mov	r3,r4
    4540:	1009883a 	mov	r4,r2
    4544:	180b883a 	mov	r5,r3
    4548:	e0bff117 	ldw	r2,-60(fp)
    454c:	11001015 	stw	r4,64(r2)
    4550:	11401115 	stw	r5,68(r2)
    4554:	e13ff117 	ldw	r4,-60(fp)
    4558:	20801017 	ldw	r2,64(r4)
    455c:	20c01117 	ldw	r3,68(r4)
    4560:	e13ff017 	ldw	r4,-64(fp)
    4564:	200890fa 	slli	r4,r4,3
    4568:	2029883a 	mov	r20,r4
    456c:	002b883a 	mov	r21,zero
    4570:	1d400236 	bltu	r3,r21,457c <sha512_Update+0x124>
    4574:	a8c0101e 	bne	r21,r3,45b8 <sha512_Update+0x160>
    4578:	15000f2e 	bgeu	r2,r20,45b8 <sha512_Update+0x160>
    457c:	e0bff117 	ldw	r2,-60(fp)
    4580:	11001217 	ldw	r4,72(r2)
    4584:	11401317 	ldw	r5,76(r2)
    4588:	01800044 	movi	r6,1
    458c:	000f883a 	mov	r7,zero
    4590:	2185883a 	add	r2,r4,r6
    4594:	1111803a 	cmpltu	r8,r2,r4
    4598:	29c7883a 	add	r3,r5,r7
    459c:	40c9883a 	add	r4,r8,r3
    45a0:	2007883a 	mov	r3,r4
    45a4:	1009883a 	mov	r4,r2
    45a8:	180b883a 	mov	r5,r3
    45ac:	e0bff117 	ldw	r2,-60(fp)
    45b0:	11001215 	stw	r4,72(r2)
    45b4:	11401315 	stw	r5,76(r2)
            len -= freespace;
    45b8:	e0fff317 	ldw	r3,-52(fp)
    45bc:	e0bff017 	ldw	r2,-64(fp)
    45c0:	1885c83a 	sub	r2,r3,r2
    45c4:	e0bff315 	stw	r2,-52(fp)
            data += freespace;
    45c8:	e0fff217 	ldw	r3,-56(fp)
    45cc:	e0bff017 	ldw	r2,-64(fp)
    45d0:	1885883a 	add	r2,r3,r2
    45d4:	e0bff215 	stw	r2,-56(fp)
            sha512_Transform(context, (sha2_word64*)context->buffer);
    45d8:	e0bff117 	ldw	r2,-60(fp)
    45dc:	10801404 	addi	r2,r2,80
    45e0:	100b883a 	mov	r5,r2
    45e4:	e13ff117 	ldw	r4,-60(fp)
    45e8:	00033f80 	call	33f8 <sha512_Transform>
    45ec:	00006606 	br	4788 <sha512_Update+0x330>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
    45f0:	e0bfef17 	ldw	r2,-68(fp)
    45f4:	10801404 	addi	r2,r2,80
    45f8:	e0fff117 	ldw	r3,-60(fp)
    45fc:	1885883a 	add	r2,r3,r2
    4600:	e1bff317 	ldw	r6,-52(fp)
    4604:	e17ff217 	ldw	r5,-56(fp)
    4608:	1009883a 	mov	r4,r2
    460c:	00095dc0 	call	95dc <memcpy>
            ADDINC128(context->bitcount, len << 3);
    4610:	e0bff117 	ldw	r2,-60(fp)
    4614:	11001017 	ldw	r4,64(r2)
    4618:	11401117 	ldw	r5,68(r2)
    461c:	e0bff317 	ldw	r2,-52(fp)
    4620:	100490fa 	slli	r2,r2,3
    4624:	e0bff415 	stw	r2,-48(fp)
    4628:	e03ff515 	stw	zero,-44(fp)
    462c:	e1bff417 	ldw	r6,-48(fp)
    4630:	2185883a 	add	r2,r4,r6
    4634:	110d803a 	cmpltu	r6,r2,r4
    4638:	e1fff517 	ldw	r7,-44(fp)
    463c:	29c7883a 	add	r3,r5,r7
    4640:	30c9883a 	add	r4,r6,r3
    4644:	2007883a 	mov	r3,r4
    4648:	1009883a 	mov	r4,r2
    464c:	180b883a 	mov	r5,r3
    4650:	e0bff117 	ldw	r2,-60(fp)
    4654:	11001015 	stw	r4,64(r2)
    4658:	11401115 	stw	r5,68(r2)
    465c:	e13ff117 	ldw	r4,-60(fp)
    4660:	20801017 	ldw	r2,64(r4)
    4664:	20c01117 	ldw	r3,68(r4)
    4668:	e13ff317 	ldw	r4,-52(fp)
    466c:	200890fa 	slli	r4,r4,3
    4670:	2025883a 	mov	r18,r4
    4674:	0027883a 	mov	r19,zero
    4678:	1cc00236 	bltu	r3,r19,4684 <sha512_Update+0x22c>
    467c:	98c0101e 	bne	r19,r3,46c0 <sha512_Update+0x268>
    4680:	14800f2e 	bgeu	r2,r18,46c0 <sha512_Update+0x268>
    4684:	e0bff117 	ldw	r2,-60(fp)
    4688:	11001217 	ldw	r4,72(r2)
    468c:	11401317 	ldw	r5,76(r2)
    4690:	01800044 	movi	r6,1
    4694:	000f883a 	mov	r7,zero
    4698:	2185883a 	add	r2,r4,r6
    469c:	1111803a 	cmpltu	r8,r2,r4
    46a0:	29c7883a 	add	r3,r5,r7
    46a4:	40c9883a 	add	r4,r8,r3
    46a8:	2007883a 	mov	r3,r4
    46ac:	1009883a 	mov	r4,r2
    46b0:	180b883a 	mov	r5,r3
    46b4:	e0bff117 	ldw	r2,-60(fp)
    46b8:	11001215 	stw	r4,72(r2)
    46bc:	11401315 	stw	r5,76(r2)
            /* Clean up: */
            usedspace = freespace = 0;
    46c0:	e03ff015 	stw	zero,-64(fp)
    46c4:	e0bff017 	ldw	r2,-64(fp)
    46c8:	e0bfef15 	stw	r2,-68(fp)
            return;
    46cc:	00006806 	br	4870 <sha512_Update+0x418>
        }
    }
    while (len >= SHA512_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        sha512_Transform(context, (const sha2_word64*)data);
    46d0:	e17ff217 	ldw	r5,-56(fp)
    46d4:	e13ff117 	ldw	r4,-60(fp)
    46d8:	00033f80 	call	33f8 <sha512_Transform>
        ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
    46dc:	e0bff117 	ldw	r2,-60(fp)
    46e0:	11001017 	ldw	r4,64(r2)
    46e4:	11401117 	ldw	r5,68(r2)
    46e8:	01810004 	movi	r6,1024
    46ec:	000f883a 	mov	r7,zero
    46f0:	2185883a 	add	r2,r4,r6
    46f4:	1111803a 	cmpltu	r8,r2,r4
    46f8:	29c7883a 	add	r3,r5,r7
    46fc:	40c9883a 	add	r4,r8,r3
    4700:	2007883a 	mov	r3,r4
    4704:	1009883a 	mov	r4,r2
    4708:	180b883a 	mov	r5,r3
    470c:	e0bff117 	ldw	r2,-60(fp)
    4710:	11001015 	stw	r4,64(r2)
    4714:	11401115 	stw	r5,68(r2)
    4718:	e13ff117 	ldw	r4,-60(fp)
    471c:	20801017 	ldw	r2,64(r4)
    4720:	20c01117 	ldw	r3,68(r4)
    4724:	1800121e 	bne	r3,zero,4770 <sha512_Update+0x318>
    4728:	1800021e 	bne	r3,zero,4734 <sha512_Update+0x2dc>
    472c:	10810028 	cmpgeui	r2,r2,1024
    4730:	10000f1e 	bne	r2,zero,4770 <sha512_Update+0x318>
    4734:	e0bff117 	ldw	r2,-60(fp)
    4738:	11001217 	ldw	r4,72(r2)
    473c:	11401317 	ldw	r5,76(r2)
    4740:	01800044 	movi	r6,1
    4744:	000f883a 	mov	r7,zero
    4748:	2185883a 	add	r2,r4,r6
    474c:	1111803a 	cmpltu	r8,r2,r4
    4750:	29c7883a 	add	r3,r5,r7
    4754:	40c9883a 	add	r4,r8,r3
    4758:	2007883a 	mov	r3,r4
    475c:	1009883a 	mov	r4,r2
    4760:	180b883a 	mov	r5,r3
    4764:	e0bff117 	ldw	r2,-60(fp)
    4768:	11001215 	stw	r4,72(r2)
    476c:	11401315 	stw	r5,76(r2)
        len -= SHA512_BLOCK_LENGTH;
    4770:	e0bff317 	ldw	r2,-52(fp)
    4774:	10bfe004 	addi	r2,r2,-128
    4778:	e0bff315 	stw	r2,-52(fp)
        data += SHA512_BLOCK_LENGTH;
    477c:	e0bff217 	ldw	r2,-56(fp)
    4780:	10802004 	addi	r2,r2,128
    4784:	e0bff215 	stw	r2,-56(fp)
            /* Clean up: */
            usedspace = freespace = 0;
            return;
        }
    }
    while (len >= SHA512_BLOCK_LENGTH) {
    4788:	e0bff317 	ldw	r2,-52(fp)
    478c:	10802028 	cmpgeui	r2,r2,128
    4790:	103fcf1e 	bne	r2,zero,46d0 <__alt_mem_epcs_flash_controller+0xfdffb6d0>
        sha512_Transform(context, (const sha2_word64*)data);
        ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
        len -= SHA512_BLOCK_LENGTH;
        data += SHA512_BLOCK_LENGTH;
    }
    if (len > 0) {
    4794:	e0bff317 	ldw	r2,-52(fp)
    4798:	10003026 	beq	r2,zero,485c <sha512_Update+0x404>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
    479c:	e0bff117 	ldw	r2,-60(fp)
    47a0:	10801404 	addi	r2,r2,80
    47a4:	e1bff317 	ldw	r6,-52(fp)
    47a8:	e17ff217 	ldw	r5,-56(fp)
    47ac:	1009883a 	mov	r4,r2
    47b0:	00095dc0 	call	95dc <memcpy>
        ADDINC128(context->bitcount, len << 3);
    47b4:	e0bff117 	ldw	r2,-60(fp)
    47b8:	11001017 	ldw	r4,64(r2)
    47bc:	11401117 	ldw	r5,68(r2)
    47c0:	e0bff317 	ldw	r2,-52(fp)
    47c4:	100490fa 	slli	r2,r2,3
    47c8:	102d883a 	mov	r22,r2
    47cc:	002f883a 	mov	r23,zero
    47d0:	2585883a 	add	r2,r4,r22
    47d4:	110d803a 	cmpltu	r6,r2,r4
    47d8:	2dc7883a 	add	r3,r5,r23
    47dc:	30c9883a 	add	r4,r6,r3
    47e0:	2007883a 	mov	r3,r4
    47e4:	1009883a 	mov	r4,r2
    47e8:	180b883a 	mov	r5,r3
    47ec:	e0bff117 	ldw	r2,-60(fp)
    47f0:	11001015 	stw	r4,64(r2)
    47f4:	11401115 	stw	r5,68(r2)
    47f8:	e13ff117 	ldw	r4,-60(fp)
    47fc:	20801017 	ldw	r2,64(r4)
    4800:	20c01117 	ldw	r3,68(r4)
    4804:	e13ff317 	ldw	r4,-52(fp)
    4808:	200890fa 	slli	r4,r4,3
    480c:	2021883a 	mov	r16,r4
    4810:	0023883a 	mov	r17,zero
    4814:	1c400236 	bltu	r3,r17,4820 <sha512_Update+0x3c8>
    4818:	88c0101e 	bne	r17,r3,485c <sha512_Update+0x404>
    481c:	14000f2e 	bgeu	r2,r16,485c <sha512_Update+0x404>
    4820:	e0bff117 	ldw	r2,-60(fp)
    4824:	11001217 	ldw	r4,72(r2)
    4828:	11401317 	ldw	r5,76(r2)
    482c:	01800044 	movi	r6,1
    4830:	000f883a 	mov	r7,zero
    4834:	2185883a 	add	r2,r4,r6
    4838:	1111803a 	cmpltu	r8,r2,r4
    483c:	29c7883a 	add	r3,r5,r7
    4840:	40c9883a 	add	r4,r8,r3
    4844:	2007883a 	mov	r3,r4
    4848:	1009883a 	mov	r4,r2
    484c:	180b883a 	mov	r5,r3
    4850:	e0bff117 	ldw	r2,-60(fp)
    4854:	11001215 	stw	r4,72(r2)
    4858:	11401315 	stw	r5,76(r2)
    }
    /* Clean up: */
    usedspace = freespace = 0;
    485c:	e03ff015 	stw	zero,-64(fp)
    4860:	e0bff017 	ldw	r2,-64(fp)
    4864:	e0bfef15 	stw	r2,-68(fp)
    4868:	00000106 	br	4870 <sha512_Update+0x418>
{
    unsigned int freespace, usedspace;

    if (len == 0) {
        /* Calling with no data is valid - we do nothing */
        return;
    486c:	0001883a 	nop
        MEMCPY_BCOPY(context->buffer, data, len);
        ADDINC128(context->bitcount, len << 3);
    }
    /* Clean up: */
    usedspace = freespace = 0;
}
    4870:	e6fff804 	addi	sp,fp,-32
    4874:	dfc00917 	ldw	ra,36(sp)
    4878:	df000817 	ldw	fp,32(sp)
    487c:	ddc00717 	ldw	r23,28(sp)
    4880:	dd800617 	ldw	r22,24(sp)
    4884:	dd400517 	ldw	r21,20(sp)
    4888:	dd000417 	ldw	r20,16(sp)
    488c:	dcc00317 	ldw	r19,12(sp)
    4890:	dc800217 	ldw	r18,8(sp)
    4894:	dc400117 	ldw	r17,4(sp)
    4898:	dc000017 	ldw	r16,0(sp)
    489c:	dec00a04 	addi	sp,sp,40
    48a0:	f800283a 	ret

000048a4 <sha512_Last>:

void sha512_Last(SHA512_CTX* context)
{
    48a4:	deffd804 	addi	sp,sp,-160
    48a8:	dfc02715 	stw	ra,156(sp)
    48ac:	df002615 	stw	fp,152(sp)
    48b0:	dd802515 	stw	r22,148(sp)
    48b4:	dd402415 	stw	r21,144(sp)
    48b8:	dd002315 	stw	r20,140(sp)
    48bc:	dcc02215 	stw	r19,136(sp)
    48c0:	dc802115 	stw	r18,132(sp)
    48c4:	dc402015 	stw	r17,128(sp)
    48c8:	dc001f15 	stw	r16,124(sp)
    48cc:	df002604 	addi	fp,sp,152
    48d0:	e13fe015 	stw	r4,-128(fp)
    unsigned int usedspace;
    sha2_word64* t;

    usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    48d4:	e13fe017 	ldw	r4,-128(fp)
    48d8:	20801017 	ldw	r2,64(r4)
    48dc:	20c01117 	ldw	r3,68(r4)
    48e0:	1808977a 	slli	r4,r3,29
    48e4:	100ad0fa 	srli	r5,r2,3
    48e8:	214ab03a 	or	r5,r4,r5
    48ec:	180cd0fa 	srli	r6,r3,3
    48f0:	2805883a 	mov	r2,r5
    48f4:	10801fcc 	andi	r2,r2,127
    48f8:	e0bfda15 	stw	r2,-152(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
    /* Convert FROM host byte order */
    REVERSE64(context->bitcount[0], context->bitcount[0]);
    48fc:	e0ffe017 	ldw	r3,-128(fp)
    4900:	18801017 	ldw	r2,64(r3)
    4904:	e0bfdb15 	stw	r2,-148(fp)
    4908:	18801117 	ldw	r2,68(r3)
    490c:	e0bfdc15 	stw	r2,-144(fp)
    4910:	e1ffdc17 	ldw	r7,-144(fp)
    4914:	e23fdb17 	ldw	r8,-148(fp)
    4918:	e1ffdb15 	stw	r7,-148(fp)
    491c:	e23fdc15 	stw	r8,-144(fp)
    4920:	e0ffdb17 	ldw	r3,-148(fp)
    4924:	00bfc074 	movhi	r2,65281
    4928:	10bfc004 	addi	r2,r2,-256
    492c:	1892703a 	and	r9,r3,r2
    4930:	e0ffdc17 	ldw	r3,-144(fp)
    4934:	00bfc074 	movhi	r2,65281
    4938:	10bfc004 	addi	r2,r2,-256
    493c:	1894703a 	and	r10,r3,r2
    4940:	5004963a 	slli	r2,r10,24
    4944:	4806d23a 	srli	r3,r9,8
    4948:	e0ffe115 	stw	r3,-124(fp)
    494c:	e0ffe117 	ldw	r3,-124(fp)
    4950:	10c4b03a 	or	r2,r2,r3
    4954:	e0bfe115 	stw	r2,-124(fp)
    4958:	5004d23a 	srli	r2,r10,8
    495c:	e0bfe215 	stw	r2,-120(fp)
    4960:	e0ffdb17 	ldw	r3,-148(fp)
    4964:	00803ff4 	movhi	r2,255
    4968:	10803fc4 	addi	r2,r2,255
    496c:	189a703a 	and	r13,r3,r2
    4970:	e0ffdc17 	ldw	r3,-144(fp)
    4974:	00803ff4 	movhi	r2,255
    4978:	10803fc4 	addi	r2,r2,255
    497c:	189c703a 	and	r14,r3,r2
    4980:	6804d63a 	srli	r2,r13,24
    4984:	7018923a 	slli	r12,r14,8
    4988:	1318b03a 	or	r12,r2,r12
    498c:	6816923a 	slli	r11,r13,8
    4990:	e0ffe117 	ldw	r3,-124(fp)
    4994:	1ac4b03a 	or	r2,r3,r11
    4998:	e0bfdb15 	stw	r2,-148(fp)
    499c:	e0ffe217 	ldw	r3,-120(fp)
    49a0:	1b04b03a 	or	r2,r3,r12
    49a4:	e0bfdc15 	stw	r2,-144(fp)
    49a8:	e0bfdb17 	ldw	r2,-148(fp)
    49ac:	10bfffec 	andhi	r2,r2,65535
    49b0:	e0bfe315 	stw	r2,-116(fp)
    49b4:	e0bfdc17 	ldw	r2,-144(fp)
    49b8:	10bfffec 	andhi	r2,r2,65535
    49bc:	e0bfe415 	stw	r2,-112(fp)
    49c0:	e0ffe417 	ldw	r3,-112(fp)
    49c4:	1804943a 	slli	r2,r3,16
    49c8:	e0ffe317 	ldw	r3,-116(fp)
    49cc:	1806d43a 	srli	r3,r3,16
    49d0:	e0ffe515 	stw	r3,-108(fp)
    49d4:	e0ffe517 	ldw	r3,-108(fp)
    49d8:	10c4b03a 	or	r2,r2,r3
    49dc:	e0bfe515 	stw	r2,-108(fp)
    49e0:	e0bfe417 	ldw	r2,-112(fp)
    49e4:	1004d43a 	srli	r2,r2,16
    49e8:	e0bfe615 	stw	r2,-104(fp)
    49ec:	e0bfdb17 	ldw	r2,-148(fp)
    49f0:	10bfffcc 	andi	r2,r2,65535
    49f4:	e0bfe715 	stw	r2,-100(fp)
    49f8:	e0bfdc17 	ldw	r2,-144(fp)
    49fc:	10bfffcc 	andi	r2,r2,65535
    4a00:	e0bfe815 	stw	r2,-96(fp)
    4a04:	e0ffe717 	ldw	r3,-100(fp)
    4a08:	1804d43a 	srli	r2,r3,16
    4a0c:	e0ffe817 	ldw	r3,-96(fp)
    4a10:	1806943a 	slli	r3,r3,16
    4a14:	e0ffea15 	stw	r3,-88(fp)
    4a18:	e0ffea17 	ldw	r3,-88(fp)
    4a1c:	10c4b03a 	or	r2,r2,r3
    4a20:	e0bfea15 	stw	r2,-88(fp)
    4a24:	e0bfe717 	ldw	r2,-100(fp)
    4a28:	1004943a 	slli	r2,r2,16
    4a2c:	e0bfe915 	stw	r2,-92(fp)
    4a30:	e0ffe517 	ldw	r3,-108(fp)
    4a34:	e0bfe917 	ldw	r2,-92(fp)
    4a38:	1886b03a 	or	r3,r3,r2
    4a3c:	e0ffeb15 	stw	r3,-84(fp)
    4a40:	e0ffe617 	ldw	r3,-104(fp)
    4a44:	e0bfea17 	ldw	r2,-88(fp)
    4a48:	1886b03a 	or	r3,r3,r2
    4a4c:	e0ffec15 	stw	r3,-80(fp)
    4a50:	e0bfe017 	ldw	r2,-128(fp)
    4a54:	e0ffeb17 	ldw	r3,-84(fp)
    4a58:	10c01015 	stw	r3,64(r2)
    4a5c:	e0ffec17 	ldw	r3,-80(fp)
    4a60:	10c01115 	stw	r3,68(r2)
    REVERSE64(context->bitcount[1], context->bitcount[1]);
    4a64:	e0bfe017 	ldw	r2,-128(fp)
    4a68:	10c01217 	ldw	r3,72(r2)
    4a6c:	e0ffdd15 	stw	r3,-140(fp)
    4a70:	10801317 	ldw	r2,76(r2)
    4a74:	e0bfde15 	stw	r2,-136(fp)
    4a78:	e0bfde17 	ldw	r2,-136(fp)
    4a7c:	e0bff715 	stw	r2,-36(fp)
    4a80:	e0ffdd17 	ldw	r3,-140(fp)
    4a84:	e0fff815 	stw	r3,-32(fp)
    4a88:	e0bff717 	ldw	r2,-36(fp)
    4a8c:	e0bfdd15 	stw	r2,-140(fp)
    4a90:	e0fff817 	ldw	r3,-32(fp)
    4a94:	e0ffde15 	stw	r3,-136(fp)
    4a98:	e0ffdd17 	ldw	r3,-140(fp)
    4a9c:	00bfc074 	movhi	r2,65281
    4aa0:	10bfc004 	addi	r2,r2,-256
    4aa4:	1884703a 	and	r2,r3,r2
    4aa8:	e0bfed15 	stw	r2,-76(fp)
    4aac:	e0ffde17 	ldw	r3,-136(fp)
    4ab0:	00bfc074 	movhi	r2,65281
    4ab4:	10bfc004 	addi	r2,r2,-256
    4ab8:	1884703a 	and	r2,r3,r2
    4abc:	e0bfee15 	stw	r2,-72(fp)
    4ac0:	e0ffee17 	ldw	r3,-72(fp)
    4ac4:	1804963a 	slli	r2,r3,24
    4ac8:	e0ffed17 	ldw	r3,-76(fp)
    4acc:	182ad23a 	srli	r21,r3,8
    4ad0:	156ab03a 	or	r21,r2,r21
    4ad4:	e0bfee17 	ldw	r2,-72(fp)
    4ad8:	102cd23a 	srli	r22,r2,8
    4adc:	e0ffdd17 	ldw	r3,-140(fp)
    4ae0:	00803ff4 	movhi	r2,255
    4ae4:	10803fc4 	addi	r2,r2,255
    4ae8:	1884703a 	and	r2,r3,r2
    4aec:	e0bfef15 	stw	r2,-68(fp)
    4af0:	e0ffde17 	ldw	r3,-136(fp)
    4af4:	00803ff4 	movhi	r2,255
    4af8:	10803fc4 	addi	r2,r2,255
    4afc:	1884703a 	and	r2,r3,r2
    4b00:	e0bff015 	stw	r2,-64(fp)
    4b04:	e0ffef17 	ldw	r3,-68(fp)
    4b08:	1804d63a 	srli	r2,r3,24
    4b0c:	e0fff017 	ldw	r3,-64(fp)
    4b10:	1828923a 	slli	r20,r3,8
    4b14:	1528b03a 	or	r20,r2,r20
    4b18:	e0bfef17 	ldw	r2,-68(fp)
    4b1c:	1026923a 	slli	r19,r2,8
    4b20:	acc4b03a 	or	r2,r21,r19
    4b24:	e0bfdd15 	stw	r2,-140(fp)
    4b28:	b504b03a 	or	r2,r22,r20
    4b2c:	e0bfde15 	stw	r2,-136(fp)
    4b30:	e0bfdd17 	ldw	r2,-140(fp)
    4b34:	10bfffec 	andhi	r2,r2,65535
    4b38:	e0bff115 	stw	r2,-60(fp)
    4b3c:	e0bfde17 	ldw	r2,-136(fp)
    4b40:	10bfffec 	andhi	r2,r2,65535
    4b44:	e0bff215 	stw	r2,-56(fp)
    4b48:	e0fff217 	ldw	r3,-56(fp)
    4b4c:	1804943a 	slli	r2,r3,16
    4b50:	e0fff117 	ldw	r3,-60(fp)
    4b54:	1822d43a 	srli	r17,r3,16
    4b58:	1462b03a 	or	r17,r2,r17
    4b5c:	e0bff217 	ldw	r2,-56(fp)
    4b60:	1024d43a 	srli	r18,r2,16
    4b64:	e0bfdd17 	ldw	r2,-140(fp)
    4b68:	10bfffcc 	andi	r2,r2,65535
    4b6c:	e0bff315 	stw	r2,-52(fp)
    4b70:	e0bfde17 	ldw	r2,-136(fp)
    4b74:	10bfffcc 	andi	r2,r2,65535
    4b78:	e0bff415 	stw	r2,-48(fp)
    4b7c:	e0fff317 	ldw	r3,-52(fp)
    4b80:	1804d43a 	srli	r2,r3,16
    4b84:	e0fff417 	ldw	r3,-48(fp)
    4b88:	1820943a 	slli	r16,r3,16
    4b8c:	1420b03a 	or	r16,r2,r16
    4b90:	e0bff317 	ldw	r2,-52(fp)
    4b94:	101e943a 	slli	r15,r2,16
    4b98:	8bc6b03a 	or	r3,r17,r15
    4b9c:	e0fff515 	stw	r3,-44(fp)
    4ba0:	9404b03a 	or	r2,r18,r16
    4ba4:	e0bff615 	stw	r2,-40(fp)
    4ba8:	e0bfe017 	ldw	r2,-128(fp)
    4bac:	e0fff517 	ldw	r3,-44(fp)
    4bb0:	10c01215 	stw	r3,72(r2)
    4bb4:	e0fff617 	ldw	r3,-40(fp)
    4bb8:	10c01315 	stw	r3,76(r2)
#endif
    if (usedspace > 0) {
    4bbc:	e0bfda17 	ldw	r2,-152(fp)
    4bc0:	10002f26 	beq	r2,zero,4c80 <sha512_Last+0x3dc>
        /* Begin padding with a 1 bit: */
        context->buffer[usedspace++] = 0x80;
    4bc4:	e0bfda17 	ldw	r2,-152(fp)
    4bc8:	10c00044 	addi	r3,r2,1
    4bcc:	e0ffda15 	stw	r3,-152(fp)
    4bd0:	e0ffe017 	ldw	r3,-128(fp)
    4bd4:	1885883a 	add	r2,r3,r2
    4bd8:	10801404 	addi	r2,r2,80
    4bdc:	00ffe004 	movi	r3,-128
    4be0:	10c00005 	stb	r3,0(r2)

        if (usedspace <= SHA512_SHORT_BLOCK_LENGTH) {
    4be4:	e0bfda17 	ldw	r2,-152(fp)
    4be8:	10801c68 	cmpgeui	r2,r2,113
    4bec:	10000b1e 	bne	r2,zero,4c1c <sha512_Last+0x378>
            /* Set-up for the last transform: */
            MEMSET_BZERO(&context->buffer[usedspace], SHA512_SHORT_BLOCK_LENGTH - usedspace);
    4bf0:	e0bfda17 	ldw	r2,-152(fp)
    4bf4:	10801404 	addi	r2,r2,80
    4bf8:	e0ffe017 	ldw	r3,-128(fp)
    4bfc:	1889883a 	add	r4,r3,r2
    4c00:	00c01c04 	movi	r3,112
    4c04:	e0bfda17 	ldw	r2,-152(fp)
    4c08:	1885c83a 	sub	r2,r3,r2
    4c0c:	100d883a 	mov	r6,r2
    4c10:	000b883a 	mov	r5,zero
    4c14:	00096040 	call	9604 <memset>
    4c18:	00002206 	br	4ca4 <sha512_Last+0x400>
        } else {
            if (usedspace < SHA512_BLOCK_LENGTH) {
    4c1c:	e0bfda17 	ldw	r2,-152(fp)
    4c20:	10802028 	cmpgeui	r2,r2,128
    4c24:	10000a1e 	bne	r2,zero,4c50 <sha512_Last+0x3ac>
                MEMSET_BZERO(&context->buffer[usedspace], SHA512_BLOCK_LENGTH - usedspace);
    4c28:	e0bfda17 	ldw	r2,-152(fp)
    4c2c:	10801404 	addi	r2,r2,80
    4c30:	e0ffe017 	ldw	r3,-128(fp)
    4c34:	1889883a 	add	r4,r3,r2
    4c38:	00c02004 	movi	r3,128
    4c3c:	e0bfda17 	ldw	r2,-152(fp)
    4c40:	1885c83a 	sub	r2,r3,r2
    4c44:	100d883a 	mov	r6,r2
    4c48:	000b883a 	mov	r5,zero
    4c4c:	00096040 	call	9604 <memset>
            }
            /* Do second-to-last transform: */
            sha512_Transform(context, (sha2_word64*)context->buffer);
    4c50:	e0bfe017 	ldw	r2,-128(fp)
    4c54:	10801404 	addi	r2,r2,80
    4c58:	100b883a 	mov	r5,r2
    4c5c:	e13fe017 	ldw	r4,-128(fp)
    4c60:	00033f80 	call	33f8 <sha512_Transform>

            /* And set-up for the last transform: */
            MEMSET_BZERO(context->buffer, SHA512_BLOCK_LENGTH - 2);
    4c64:	e0bfe017 	ldw	r2,-128(fp)
    4c68:	10801404 	addi	r2,r2,80
    4c6c:	01801f84 	movi	r6,126
    4c70:	000b883a 	mov	r5,zero
    4c74:	1009883a 	mov	r4,r2
    4c78:	00096040 	call	9604 <memset>
    4c7c:	00000906 	br	4ca4 <sha512_Last+0x400>
        }
    } else {
        /* Prepare for final transform: */
        MEMSET_BZERO(context->buffer, SHA512_SHORT_BLOCK_LENGTH);
    4c80:	e0bfe017 	ldw	r2,-128(fp)
    4c84:	10801404 	addi	r2,r2,80
    4c88:	01801c04 	movi	r6,112
    4c8c:	000b883a 	mov	r5,zero
    4c90:	1009883a 	mov	r4,r2
    4c94:	00096040 	call	9604 <memset>

        /* Begin padding with a 1 bit: */
        *context->buffer = 0x80;
    4c98:	e0bfe017 	ldw	r2,-128(fp)
    4c9c:	00ffe004 	movi	r3,-128
    4ca0:	10c01405 	stb	r3,80(r2)
    }
    /* Store the length of input data (in bits): */
    t = (sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH];
    4ca4:	e0bfe017 	ldw	r2,-128(fp)
    4ca8:	10803004 	addi	r2,r2,192
    4cac:	e0bfdf15 	stw	r2,-132(fp)
    *t = context->bitcount[1];
    4cb0:	e13fe017 	ldw	r4,-128(fp)
    4cb4:	20801217 	ldw	r2,72(r4)
    4cb8:	20c01317 	ldw	r3,76(r4)
    4cbc:	e13fdf17 	ldw	r4,-132(fp)
    4cc0:	20800015 	stw	r2,0(r4)
    4cc4:	20c00115 	stw	r3,4(r4)
    t = (sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH + 8];
    4cc8:	e0bfe017 	ldw	r2,-128(fp)
    4ccc:	10803204 	addi	r2,r2,200
    4cd0:	e0bfdf15 	stw	r2,-132(fp)
    *t = context->bitcount[0];
    4cd4:	e13fe017 	ldw	r4,-128(fp)
    4cd8:	20801017 	ldw	r2,64(r4)
    4cdc:	20c01117 	ldw	r3,68(r4)
    4ce0:	e13fdf17 	ldw	r4,-132(fp)
    4ce4:	20800015 	stw	r2,0(r4)
    4ce8:	20c00115 	stw	r3,4(r4)

    /* Final transform: */
    sha512_Transform(context, (sha2_word64*)context->buffer);
    4cec:	e0bfe017 	ldw	r2,-128(fp)
    4cf0:	10801404 	addi	r2,r2,80
    4cf4:	100b883a 	mov	r5,r2
    4cf8:	e13fe017 	ldw	r4,-128(fp)
    4cfc:	00033f80 	call	33f8 <sha512_Transform>
}
    4d00:	0001883a 	nop
    4d04:	e6fff904 	addi	sp,fp,-28
    4d08:	dfc00817 	ldw	ra,32(sp)
    4d0c:	df000717 	ldw	fp,28(sp)
    4d10:	dd800617 	ldw	r22,24(sp)
    4d14:	dd400517 	ldw	r21,20(sp)
    4d18:	dd000417 	ldw	r20,16(sp)
    4d1c:	dcc00317 	ldw	r19,12(sp)
    4d20:	dc800217 	ldw	r18,8(sp)
    4d24:	dc400117 	ldw	r17,4(sp)
    4d28:	dc000017 	ldw	r16,0(sp)
    4d2c:	dec00904 	addi	sp,sp,36
    4d30:	f800283a 	ret

00004d34 <sha512_Final>:

void sha512_Final(sha2_byte digest[], SHA512_CTX* context)
{
    4d34:	deffe404 	addi	sp,sp,-112
    4d38:	dfc01b15 	stw	ra,108(sp)
    4d3c:	df001a15 	stw	fp,104(sp)
    4d40:	ddc01915 	stw	r23,100(sp)
    4d44:	dd801815 	stw	r22,96(sp)
    4d48:	dd401715 	stw	r21,92(sp)
    4d4c:	dd001615 	stw	r20,88(sp)
    4d50:	dcc01515 	stw	r19,84(sp)
    4d54:	dc801415 	stw	r18,80(sp)
    4d58:	dc401315 	stw	r17,76(sp)
    4d5c:	dc001215 	stw	r16,72(sp)
    4d60:	df001a04 	addi	fp,sp,104
    4d64:	e13fea15 	stw	r4,-88(fp)
    4d68:	e17feb15 	stw	r5,-84(fp)
    sha2_word64* d = (sha2_word64*)digest;
    4d6c:	e0bfea17 	ldw	r2,-88(fp)
    4d70:	e0bfe615 	stw	r2,-104(fp)

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_byte*)0) {
    4d74:	e0bfea17 	ldw	r2,-88(fp)
    4d78:	10007126 	beq	r2,zero,4f40 <sha512_Final+0x20c>
        sha512_Last(context);
    4d7c:	e13feb17 	ldw	r4,-84(fp)
    4d80:	00048a40 	call	48a4 <sha512_Last>
/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    4d84:	e03fe715 	stw	zero,-100(fp)
    4d88:	00006a06 	br	4f34 <sha512_Final+0x200>
                REVERSE64(context->state[j], context->state[j]);
    4d8c:	e0ffeb17 	ldw	r3,-84(fp)
    4d90:	e0bfe717 	ldw	r2,-100(fp)
    4d94:	100490fa 	slli	r2,r2,3
    4d98:	1885883a 	add	r2,r3,r2
    4d9c:	10c00017 	ldw	r3,0(r2)
    4da0:	e0ffe815 	stw	r3,-96(fp)
    4da4:	10800117 	ldw	r2,4(r2)
    4da8:	e0bfe915 	stw	r2,-92(fp)
    4dac:	e0bfe917 	ldw	r2,-92(fp)
    4db0:	e0bff615 	stw	r2,-40(fp)
    4db4:	e0ffe817 	ldw	r3,-96(fp)
    4db8:	e0fff715 	stw	r3,-36(fp)
    4dbc:	e0bff617 	ldw	r2,-40(fp)
    4dc0:	e0bfe815 	stw	r2,-96(fp)
    4dc4:	e0fff717 	ldw	r3,-36(fp)
    4dc8:	e0ffe915 	stw	r3,-92(fp)
    4dcc:	e0ffe817 	ldw	r3,-96(fp)
    4dd0:	00bfc074 	movhi	r2,65281
    4dd4:	10bfc004 	addi	r2,r2,-256
    4dd8:	1884703a 	and	r2,r3,r2
    4ddc:	e0bfec15 	stw	r2,-80(fp)
    4de0:	e0ffe917 	ldw	r3,-92(fp)
    4de4:	00bfc074 	movhi	r2,65281
    4de8:	10bfc004 	addi	r2,r2,-256
    4dec:	1884703a 	and	r2,r3,r2
    4df0:	e0bfed15 	stw	r2,-76(fp)
    4df4:	e0ffed17 	ldw	r3,-76(fp)
    4df8:	1804963a 	slli	r2,r3,24
    4dfc:	e0ffec17 	ldw	r3,-80(fp)
    4e00:	1820d23a 	srli	r16,r3,8
    4e04:	1420b03a 	or	r16,r2,r16
    4e08:	e0bfed17 	ldw	r2,-76(fp)
    4e0c:	1022d23a 	srli	r17,r2,8
    4e10:	e0ffe817 	ldw	r3,-96(fp)
    4e14:	00803ff4 	movhi	r2,255
    4e18:	10803fc4 	addi	r2,r2,255
    4e1c:	1884703a 	and	r2,r3,r2
    4e20:	e0bfee15 	stw	r2,-72(fp)
    4e24:	e0ffe917 	ldw	r3,-92(fp)
    4e28:	00803ff4 	movhi	r2,255
    4e2c:	10803fc4 	addi	r2,r2,255
    4e30:	1884703a 	and	r2,r3,r2
    4e34:	e0bfef15 	stw	r2,-68(fp)
    4e38:	e0ffee17 	ldw	r3,-72(fp)
    4e3c:	1804d63a 	srli	r2,r3,24
    4e40:	e0ffef17 	ldw	r3,-68(fp)
    4e44:	1826923a 	slli	r19,r3,8
    4e48:	14e6b03a 	or	r19,r2,r19
    4e4c:	e0bfee17 	ldw	r2,-72(fp)
    4e50:	1024923a 	slli	r18,r2,8
    4e54:	8484b03a 	or	r2,r16,r18
    4e58:	e0bfe815 	stw	r2,-96(fp)
    4e5c:	8cc4b03a 	or	r2,r17,r19
    4e60:	e0bfe915 	stw	r2,-92(fp)
    4e64:	e0bfe817 	ldw	r2,-96(fp)
    4e68:	10bfffec 	andhi	r2,r2,65535
    4e6c:	e0bff015 	stw	r2,-64(fp)
    4e70:	e0bfe917 	ldw	r2,-92(fp)
    4e74:	10bfffec 	andhi	r2,r2,65535
    4e78:	e0bff115 	stw	r2,-60(fp)
    4e7c:	e0fff117 	ldw	r3,-60(fp)
    4e80:	1804943a 	slli	r2,r3,16
    4e84:	e0fff017 	ldw	r3,-64(fp)
    4e88:	1828d43a 	srli	r20,r3,16
    4e8c:	1528b03a 	or	r20,r2,r20
    4e90:	e0bff117 	ldw	r2,-60(fp)
    4e94:	102ad43a 	srli	r21,r2,16
    4e98:	e0bfe817 	ldw	r2,-96(fp)
    4e9c:	10bfffcc 	andi	r2,r2,65535
    4ea0:	e0bff215 	stw	r2,-56(fp)
    4ea4:	e0bfe917 	ldw	r2,-92(fp)
    4ea8:	10bfffcc 	andi	r2,r2,65535
    4eac:	e0bff315 	stw	r2,-52(fp)
    4eb0:	e0fff217 	ldw	r3,-56(fp)
    4eb4:	1804d43a 	srli	r2,r3,16
    4eb8:	e0fff317 	ldw	r3,-52(fp)
    4ebc:	182e943a 	slli	r23,r3,16
    4ec0:	15eeb03a 	or	r23,r2,r23
    4ec4:	e0bff217 	ldw	r2,-56(fp)
    4ec8:	102c943a 	slli	r22,r2,16
    4ecc:	a586b03a 	or	r3,r20,r22
    4ed0:	e0fff415 	stw	r3,-48(fp)
    4ed4:	adc4b03a 	or	r2,r21,r23
    4ed8:	e0bff515 	stw	r2,-44(fp)
    4edc:	e0ffeb17 	ldw	r3,-84(fp)
    4ee0:	e0bfe717 	ldw	r2,-100(fp)
    4ee4:	100490fa 	slli	r2,r2,3
    4ee8:	1885883a 	add	r2,r3,r2
    4eec:	e0fff417 	ldw	r3,-48(fp)
    4ef0:	10c00015 	stw	r3,0(r2)
    4ef4:	e0fff517 	ldw	r3,-44(fp)
    4ef8:	10c00115 	stw	r3,4(r2)
                *d++ = context->state[j];
    4efc:	e13fe617 	ldw	r4,-104(fp)
    4f00:	20800204 	addi	r2,r4,8
    4f04:	e0bfe615 	stw	r2,-104(fp)
    4f08:	e0ffeb17 	ldw	r3,-84(fp)
    4f0c:	e0bfe717 	ldw	r2,-100(fp)
    4f10:	100490fa 	slli	r2,r2,3
    4f14:	188b883a 	add	r5,r3,r2
    4f18:	28800017 	ldw	r2,0(r5)
    4f1c:	28c00117 	ldw	r3,4(r5)
    4f20:	20800015 	stw	r2,0(r4)
    4f24:	20c00115 	stw	r3,4(r4)
/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host byte order */
            int j;
            for (j = 0; j < 8; j++) {
    4f28:	e0bfe717 	ldw	r2,-100(fp)
    4f2c:	10800044 	addi	r2,r2,1
    4f30:	e0bfe715 	stw	r2,-100(fp)
    4f34:	e0bfe717 	ldw	r2,-100(fp)
    4f38:	10800210 	cmplti	r2,r2,8
    4f3c:	103f931e 	bne	r2,zero,4d8c <__alt_mem_epcs_flash_controller+0xfdffbd8c>
        MEMCPY_BCOPY(d, context->state, SHA512_DIGEST_LENGTH);
#endif
    }

    /* Zero out state data */
    MEMSET_BZERO(context, sizeof(SHA512_CTX));
    4f40:	01803404 	movi	r6,208
    4f44:	000b883a 	mov	r5,zero
    4f48:	e13feb17 	ldw	r4,-84(fp)
    4f4c:	00096040 	call	9604 <memset>
}
    4f50:	0001883a 	nop
    4f54:	e6fff804 	addi	sp,fp,-32
    4f58:	dfc00917 	ldw	ra,36(sp)
    4f5c:	df000817 	ldw	fp,32(sp)
    4f60:	ddc00717 	ldw	r23,28(sp)
    4f64:	dd800617 	ldw	r22,24(sp)
    4f68:	dd400517 	ldw	r21,20(sp)
    4f6c:	dd000417 	ldw	r20,16(sp)
    4f70:	dcc00317 	ldw	r19,12(sp)
    4f74:	dc800217 	ldw	r18,8(sp)
    4f78:	dc400117 	ldw	r17,4(sp)
    4f7c:	dc000017 	ldw	r16,0(sp)
    4f80:	dec00a04 	addi	sp,sp,40
    4f84:	f800283a 	ret

00004f88 <sha512_Raw>:

void sha512_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA512_DIGEST_LENGTH])
{
    4f88:	deffc704 	addi	sp,sp,-228
    4f8c:	dfc03815 	stw	ra,224(sp)
    4f90:	df003715 	stw	fp,220(sp)
    4f94:	df003704 	addi	fp,sp,220
    4f98:	e13ffd15 	stw	r4,-12(fp)
    4f9c:	e17ffe15 	stw	r5,-8(fp)
    4fa0:	e1bfff15 	stw	r6,-4(fp)
    SHA512_CTX context;
    sha512_Init(&context);
    4fa4:	e13fc904 	addi	r4,fp,-220
    4fa8:	000336c0 	call	336c <sha512_Init>
    sha512_Update(&context, data, len);
    4fac:	e1bffe17 	ldw	r6,-8(fp)
    4fb0:	e17ffd17 	ldw	r5,-12(fp)
    4fb4:	e13fc904 	addi	r4,fp,-220
    4fb8:	00044580 	call	4458 <sha512_Update>
    sha512_Final(digest, &context);
    4fbc:	e17fc904 	addi	r5,fp,-220
    4fc0:	e13fff17 	ldw	r4,-4(fp)
    4fc4:	0004d340 	call	4d34 <sha512_Final>
}
    4fc8:	0001883a 	nop
    4fcc:	e037883a 	mov	sp,fp
    4fd0:	dfc00117 	ldw	ra,4(sp)
    4fd4:	df000017 	ldw	fp,0(sp)
    4fd8:	dec00204 	addi	sp,sp,8
    4fdc:	f800283a 	ret

00004fe0 <hmac_sha256>:

void hmac_sha256(const uint8_t* key, const uint32_t keylen, const uint8_t* msg, const uint32_t msglen, uint8_t* hmac)
{
    4fe0:	deffaf04 	addi	sp,sp,-324
    4fe4:	dfc05015 	stw	ra,320(sp)
    4fe8:	df004f15 	stw	fp,316(sp)
    4fec:	df004f04 	addi	fp,sp,316
    4ff0:	e13ffc15 	stw	r4,-16(fp)
    4ff4:	e17ffd15 	stw	r5,-12(fp)
    4ff8:	e1bffe15 	stw	r6,-8(fp)
    4ffc:	e1ffff15 	stw	r7,-4(fp)
    int i;
    uint8_t buf[SHA256_BLOCK_LENGTH], o_key_pad[SHA256_BLOCK_LENGTH],
        i_key_pad[SHA256_BLOCK_LENGTH];
    SHA256_CTX ctx;

    memset(buf, 0, SHA256_BLOCK_LENGTH);
    5000:	e0bfb204 	addi	r2,fp,-312
    5004:	01801004 	movi	r6,64
    5008:	000b883a 	mov	r5,zero
    500c:	1009883a 	mov	r4,r2
    5010:	00096040 	call	9604 <memset>
    if (keylen > SHA256_BLOCK_LENGTH) {
    5014:	e0bffd17 	ldw	r2,-12(fp)
    5018:	10801070 	cmpltui	r2,r2,65
    501c:	1000061e 	bne	r2,zero,5038 <hmac_sha256+0x58>
        sha256_Raw(key, keylen, buf);
    5020:	e0bfb204 	addi	r2,fp,-312
    5024:	100d883a 	mov	r6,r2
    5028:	e17ffd17 	ldw	r5,-12(fp)
    502c:	e13ffc17 	ldw	r4,-16(fp)
    5030:	00033140 	call	3314 <sha256_Raw>
    5034:	00000506 	br	504c <hmac_sha256+0x6c>
    } else {
        memcpy(buf, key, keylen);
    5038:	e0bfb204 	addi	r2,fp,-312
    503c:	e1bffd17 	ldw	r6,-12(fp)
    5040:	e17ffc17 	ldw	r5,-16(fp)
    5044:	1009883a 	mov	r4,r2
    5048:	00095dc0 	call	95dc <memcpy>
    }

    for (i = 0; i < SHA256_BLOCK_LENGTH; i++) {
    504c:	e03fb115 	stw	zero,-316(fp)
    5050:	00001706 	br	50b0 <hmac_sha256+0xd0>
        o_key_pad[i] = buf[i] ^ 0x5c;
    5054:	e0ffb204 	addi	r3,fp,-312
    5058:	e0bfb117 	ldw	r2,-316(fp)
    505c:	1885883a 	add	r2,r3,r2
    5060:	10800003 	ldbu	r2,0(r2)
    5064:	1080171c 	xori	r2,r2,92
    5068:	1009883a 	mov	r4,r2
    506c:	e0ffc204 	addi	r3,fp,-248
    5070:	e0bfb117 	ldw	r2,-316(fp)
    5074:	1885883a 	add	r2,r3,r2
    5078:	11000005 	stb	r4,0(r2)
        i_key_pad[i] = buf[i] ^ 0x36;
    507c:	e0ffb204 	addi	r3,fp,-312
    5080:	e0bfb117 	ldw	r2,-316(fp)
    5084:	1885883a 	add	r2,r3,r2
    5088:	10800003 	ldbu	r2,0(r2)
    508c:	10800d9c 	xori	r2,r2,54
    5090:	1009883a 	mov	r4,r2
    5094:	e0ffd204 	addi	r3,fp,-184
    5098:	e0bfb117 	ldw	r2,-316(fp)
    509c:	1885883a 	add	r2,r3,r2
    50a0:	11000005 	stb	r4,0(r2)
        sha256_Raw(key, keylen, buf);
    } else {
        memcpy(buf, key, keylen);
    }

    for (i = 0; i < SHA256_BLOCK_LENGTH; i++) {
    50a4:	e0bfb117 	ldw	r2,-316(fp)
    50a8:	10800044 	addi	r2,r2,1
    50ac:	e0bfb115 	stw	r2,-316(fp)
    50b0:	e0bfb117 	ldw	r2,-316(fp)
    50b4:	10801010 	cmplti	r2,r2,64
    50b8:	103fe61e 	bne	r2,zero,5054 <__alt_mem_epcs_flash_controller+0xfdffc054>
        o_key_pad[i] = buf[i] ^ 0x5c;
        i_key_pad[i] = buf[i] ^ 0x36;
    }

    sha256_Init(&ctx);
    50bc:	e0bfe204 	addi	r2,fp,-120
    50c0:	1009883a 	mov	r4,r2
    50c4:	00026a00 	call	26a0 <sha256_Init>
    sha256_Update(&ctx, i_key_pad, SHA256_BLOCK_LENGTH);
    50c8:	e0ffd204 	addi	r3,fp,-184
    50cc:	e0bfe204 	addi	r2,fp,-120
    50d0:	01801004 	movi	r6,64
    50d4:	180b883a 	mov	r5,r3
    50d8:	1009883a 	mov	r4,r2
    50dc:	0002cd40 	call	2cd4 <sha256_Update>
    sha256_Update(&ctx, msg, msglen);
    50e0:	e0bfe204 	addi	r2,fp,-120
    50e4:	e1bfff17 	ldw	r6,-4(fp)
    50e8:	e17ffe17 	ldw	r5,-8(fp)
    50ec:	1009883a 	mov	r4,r2
    50f0:	0002cd40 	call	2cd4 <sha256_Update>
    sha256_Final(buf, &ctx);
    50f4:	e0ffe204 	addi	r3,fp,-120
    50f8:	e0bfb204 	addi	r2,fp,-312
    50fc:	180b883a 	mov	r5,r3
    5100:	1009883a 	mov	r4,r2
    5104:	0002f7c0 	call	2f7c <sha256_Final>

    sha256_Init(&ctx);
    5108:	e0bfe204 	addi	r2,fp,-120
    510c:	1009883a 	mov	r4,r2
    5110:	00026a00 	call	26a0 <sha256_Init>
    sha256_Update(&ctx, o_key_pad, SHA256_BLOCK_LENGTH);
    5114:	e0ffc204 	addi	r3,fp,-248
    5118:	e0bfe204 	addi	r2,fp,-120
    511c:	01801004 	movi	r6,64
    5120:	180b883a 	mov	r5,r3
    5124:	1009883a 	mov	r4,r2
    5128:	0002cd40 	call	2cd4 <sha256_Update>
    sha256_Update(&ctx, buf, SHA256_DIGEST_LENGTH);
    512c:	e0ffb204 	addi	r3,fp,-312
    5130:	e0bfe204 	addi	r2,fp,-120
    5134:	01800804 	movi	r6,32
    5138:	180b883a 	mov	r5,r3
    513c:	1009883a 	mov	r4,r2
    5140:	0002cd40 	call	2cd4 <sha256_Update>
    sha256_Final(hmac, &ctx);
    5144:	e0bfe204 	addi	r2,fp,-120
    5148:	100b883a 	mov	r5,r2
    514c:	e1000217 	ldw	r4,8(fp)
    5150:	0002f7c0 	call	2f7c <sha256_Final>
}
    5154:	0001883a 	nop
    5158:	e037883a 	mov	sp,fp
    515c:	dfc00117 	ldw	ra,4(sp)
    5160:	df000017 	ldw	fp,0(sp)
    5164:	dec00204 	addi	sp,sp,8
    5168:	f800283a 	ret

0000516c <hmac_sha512>:

void hmac_sha512(const uint8_t* key, const uint32_t keylen, const uint8_t* msg, const uint32_t msglen, uint8_t* hmac)
{
    516c:	deff6504 	addi	sp,sp,-620
    5170:	dfc09a15 	stw	ra,616(sp)
    5174:	df009915 	stw	fp,612(sp)
    5178:	df009904 	addi	fp,sp,612
    517c:	e13ffc15 	stw	r4,-16(fp)
    5180:	e17ffd15 	stw	r5,-12(fp)
    5184:	e1bffe15 	stw	r6,-8(fp)
    5188:	e1ffff15 	stw	r7,-4(fp)
    int i;
    uint8_t buf[SHA512_BLOCK_LENGTH], o_key_pad[SHA512_BLOCK_LENGTH],
        i_key_pad[SHA512_BLOCK_LENGTH];
    SHA512_CTX ctx;

    memset(buf, 0, SHA512_BLOCK_LENGTH);
    518c:	e0bf6804 	addi	r2,fp,-608
    5190:	01802004 	movi	r6,128
    5194:	000b883a 	mov	r5,zero
    5198:	1009883a 	mov	r4,r2
    519c:	00096040 	call	9604 <memset>
    if (keylen > SHA512_BLOCK_LENGTH) {
    51a0:	e0bffd17 	ldw	r2,-12(fp)
    51a4:	10802070 	cmpltui	r2,r2,129
    51a8:	1000061e 	bne	r2,zero,51c4 <hmac_sha512+0x58>
        sha512_Raw(key, keylen, buf);
    51ac:	e0bf6804 	addi	r2,fp,-608
    51b0:	100d883a 	mov	r6,r2
    51b4:	e17ffd17 	ldw	r5,-12(fp)
    51b8:	e13ffc17 	ldw	r4,-16(fp)
    51bc:	0004f880 	call	4f88 <sha512_Raw>
    51c0:	00000506 	br	51d8 <hmac_sha512+0x6c>
    } else {
        memcpy(buf, key, keylen);
    51c4:	e0bf6804 	addi	r2,fp,-608
    51c8:	e1bffd17 	ldw	r6,-12(fp)
    51cc:	e17ffc17 	ldw	r5,-16(fp)
    51d0:	1009883a 	mov	r4,r2
    51d4:	00095dc0 	call	95dc <memcpy>
    }

    for (i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    51d8:	e03f6715 	stw	zero,-612(fp)
    51dc:	00001706 	br	523c <hmac_sha512+0xd0>
        o_key_pad[i] = buf[i] ^ 0x5c;
    51e0:	e0ff6804 	addi	r3,fp,-608
    51e4:	e0bf6717 	ldw	r2,-612(fp)
    51e8:	1885883a 	add	r2,r3,r2
    51ec:	10800003 	ldbu	r2,0(r2)
    51f0:	1080171c 	xori	r2,r2,92
    51f4:	1009883a 	mov	r4,r2
    51f8:	e0ff8804 	addi	r3,fp,-480
    51fc:	e0bf6717 	ldw	r2,-612(fp)
    5200:	1885883a 	add	r2,r3,r2
    5204:	11000005 	stb	r4,0(r2)
        i_key_pad[i] = buf[i] ^ 0x36;
    5208:	e0ff6804 	addi	r3,fp,-608
    520c:	e0bf6717 	ldw	r2,-612(fp)
    5210:	1885883a 	add	r2,r3,r2
    5214:	10800003 	ldbu	r2,0(r2)
    5218:	10800d9c 	xori	r2,r2,54
    521c:	1009883a 	mov	r4,r2
    5220:	e0ffa804 	addi	r3,fp,-352
    5224:	e0bf6717 	ldw	r2,-612(fp)
    5228:	1885883a 	add	r2,r3,r2
    522c:	11000005 	stb	r4,0(r2)
        sha512_Raw(key, keylen, buf);
    } else {
        memcpy(buf, key, keylen);
    }

    for (i = 0; i < SHA512_BLOCK_LENGTH; i++) {
    5230:	e0bf6717 	ldw	r2,-612(fp)
    5234:	10800044 	addi	r2,r2,1
    5238:	e0bf6715 	stw	r2,-612(fp)
    523c:	e0bf6717 	ldw	r2,-612(fp)
    5240:	10802010 	cmplti	r2,r2,128
    5244:	103fe61e 	bne	r2,zero,51e0 <__alt_mem_epcs_flash_controller+0xfdffc1e0>
        o_key_pad[i] = buf[i] ^ 0x5c;
        i_key_pad[i] = buf[i] ^ 0x36;
    }

    sha512_Init(&ctx);
    5248:	e0bfc804 	addi	r2,fp,-224
    524c:	1009883a 	mov	r4,r2
    5250:	000336c0 	call	336c <sha512_Init>
    sha512_Update(&ctx, i_key_pad, SHA512_BLOCK_LENGTH);
    5254:	e0ffa804 	addi	r3,fp,-352
    5258:	e0bfc804 	addi	r2,fp,-224
    525c:	01802004 	movi	r6,128
    5260:	180b883a 	mov	r5,r3
    5264:	1009883a 	mov	r4,r2
    5268:	00044580 	call	4458 <sha512_Update>
    sha512_Update(&ctx, msg, msglen);
    526c:	e0bfc804 	addi	r2,fp,-224
    5270:	e1bfff17 	ldw	r6,-4(fp)
    5274:	e17ffe17 	ldw	r5,-8(fp)
    5278:	1009883a 	mov	r4,r2
    527c:	00044580 	call	4458 <sha512_Update>
    sha512_Final(buf, &ctx);
    5280:	e0ffc804 	addi	r3,fp,-224
    5284:	e0bf6804 	addi	r2,fp,-608
    5288:	180b883a 	mov	r5,r3
    528c:	1009883a 	mov	r4,r2
    5290:	0004d340 	call	4d34 <sha512_Final>

    sha512_Init(&ctx);
    5294:	e0bfc804 	addi	r2,fp,-224
    5298:	1009883a 	mov	r4,r2
    529c:	000336c0 	call	336c <sha512_Init>
    sha512_Update(&ctx, o_key_pad, SHA512_BLOCK_LENGTH);
    52a0:	e0ff8804 	addi	r3,fp,-480
    52a4:	e0bfc804 	addi	r2,fp,-224
    52a8:	01802004 	movi	r6,128
    52ac:	180b883a 	mov	r5,r3
    52b0:	1009883a 	mov	r4,r2
    52b4:	00044580 	call	4458 <sha512_Update>
    sha512_Update(&ctx, buf, SHA512_DIGEST_LENGTH);
    52b8:	e0ff6804 	addi	r3,fp,-608
    52bc:	e0bfc804 	addi	r2,fp,-224
    52c0:	01801004 	movi	r6,64
    52c4:	180b883a 	mov	r5,r3
    52c8:	1009883a 	mov	r4,r2
    52cc:	00044580 	call	4458 <sha512_Update>
    sha512_Final(hmac, &ctx);
    52d0:	e0bfc804 	addi	r2,fp,-224
    52d4:	100b883a 	mov	r5,r2
    52d8:	e1000217 	ldw	r4,8(fp)
    52dc:	0004d340 	call	4d34 <sha512_Final>
}
    52e0:	0001883a 	nop
    52e4:	e037883a 	mov	sp,fp
    52e8:	dfc00117 	ldw	ra,4(sp)
    52ec:	df000017 	ldw	fp,0(sp)
    52f0:	dec00204 	addi	sp,sp,8
    52f4:	f800283a 	ret

000052f8 <trezor_sha1_Init>:
 */
static const char *sha2_hex_digits = "0123456789abcdef";


/*** SHA-1: ***********************************************************/
void trezor_sha1_Init(SHA1_CTX* context) {
    52f8:	defffd04 	addi	sp,sp,-12
    52fc:	dfc00215 	stw	ra,8(sp)
    5300:	df000115 	stw	fp,4(sp)
    5304:	df000104 	addi	fp,sp,4
    5308:	e13fff15 	stw	r4,-4(fp)
	MEMCPY_BCOPY(context->state, sha1_initial_hash_value, SHA1_DIGEST_LENGTH);
    530c:	e0bfff17 	ldw	r2,-4(fp)
    5310:	01800504 	movi	r6,20
    5314:	01400074 	movhi	r5,1
    5318:	29598a04 	addi	r5,r5,26152
    531c:	1009883a 	mov	r4,r2
    5320:	00095dc0 	call	95dc <memcpy>
	memzero(context->buffer, SHA1_BLOCK_LENGTH);
    5324:	e0bfff17 	ldw	r2,-4(fp)
    5328:	10800704 	addi	r2,r2,28
    532c:	01401004 	movi	r5,64
    5330:	1009883a 	mov	r4,r2
    5334:	00017c40 	call	17c4 <memzero>
	context->bitcount = 0;
    5338:	e0bfff17 	ldw	r2,-4(fp)
    533c:	10000515 	stw	zero,20(r2)
    5340:	10000615 	stw	zero,24(r2)
}
    5344:	0001883a 	nop
    5348:	e037883a 	mov	sp,fp
    534c:	dfc00117 	ldw	ra,4(sp)
    5350:	df000017 	ldw	fp,0(sp)
    5354:	dec00204 	addi	sp,sp,8
    5358:	f800283a 	ret

0000535c <trezor_sha1_Transform>:
	a = b = c = d = e = T1 = 0;
}

#else  /* SHA2_UNROLL_TRANSFORM */

void trezor_sha1_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    535c:	deffe504 	addi	sp,sp,-108
    5360:	df001a15 	stw	fp,104(sp)
    5364:	df001a04 	addi	fp,sp,104
    5368:	e13ffd15 	stw	r4,-12(fp)
    536c:	e17ffe15 	stw	r5,-8(fp)
    5370:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	T1;
	sha2_word32	W1[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    5374:	e0bffd17 	ldw	r2,-12(fp)
    5378:	10800017 	ldw	r2,0(r2)
    537c:	e0bfe615 	stw	r2,-104(fp)
	b = state_in[1];
    5380:	e0bffd17 	ldw	r2,-12(fp)
    5384:	10800117 	ldw	r2,4(r2)
    5388:	e0bfe715 	stw	r2,-100(fp)
	c = state_in[2];
    538c:	e0bffd17 	ldw	r2,-12(fp)
    5390:	10800217 	ldw	r2,8(r2)
    5394:	e0bfe815 	stw	r2,-96(fp)
	d = state_in[3];
    5398:	e0bffd17 	ldw	r2,-12(fp)
    539c:	10800317 	ldw	r2,12(r2)
    53a0:	e0bfe915 	stw	r2,-92(fp)
	e = state_in[4];
    53a4:	e0bffd17 	ldw	r2,-12(fp)
    53a8:	10800417 	ldw	r2,16(r2)
    53ac:	e0bfea15 	stw	r2,-88(fp)
	j = 0;
    53b0:	e03feb15 	stw	zero,-84(fp)
	do {
		T1 = ROTL32(5, a) + Ch(b, c, d) + e + K1_0_TO_19 + (W1[j] = *data++);
    53b4:	e0bfe617 	ldw	r2,-104(fp)
    53b8:	1006117a 	roli	r3,r2,5
    53bc:	e13fe717 	ldw	r4,-100(fp)
    53c0:	e0bfe817 	ldw	r2,-96(fp)
    53c4:	2088703a 	and	r4,r4,r2
    53c8:	e0bfe717 	ldw	r2,-100(fp)
    53cc:	008a303a 	nor	r5,zero,r2
    53d0:	e0bfe917 	ldw	r2,-92(fp)
    53d4:	2884703a 	and	r2,r5,r2
    53d8:	2084f03a 	xor	r2,r4,r2
    53dc:	1887883a 	add	r3,r3,r2
    53e0:	e0bfea17 	ldw	r2,-88(fp)
    53e4:	1887883a 	add	r3,r3,r2
    53e8:	e0bffe17 	ldw	r2,-8(fp)
    53ec:	11000104 	addi	r4,r2,4
    53f0:	e13ffe15 	stw	r4,-8(fp)
    53f4:	11000017 	ldw	r4,0(r2)
    53f8:	e0bfeb17 	ldw	r2,-84(fp)
    53fc:	1085883a 	add	r2,r2,r2
    5400:	1085883a 	add	r2,r2,r2
    5404:	e17fe604 	addi	r5,fp,-104
    5408:	2885883a 	add	r2,r5,r2
    540c:	10800704 	addi	r2,r2,28
    5410:	11000015 	stw	r4,0(r2)
    5414:	e0bfeb17 	ldw	r2,-84(fp)
    5418:	1085883a 	add	r2,r2,r2
    541c:	1085883a 	add	r2,r2,r2
    5420:	e1bfe604 	addi	r6,fp,-104
    5424:	3085883a 	add	r2,r6,r2
    5428:	10800704 	addi	r2,r2,28
    542c:	10800017 	ldw	r2,0(r2)
    5430:	1887883a 	add	r3,r3,r2
    5434:	0096a0b4 	movhi	r2,23170
    5438:	109e6644 	addi	r2,r2,31129
    543c:	1885883a 	add	r2,r3,r2
    5440:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    5444:	e0bfe917 	ldw	r2,-92(fp)
    5448:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    544c:	e0bfe817 	ldw	r2,-96(fp)
    5450:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    5454:	e0ffe717 	ldw	r3,-100(fp)
    5458:	00800084 	movi	r2,2
    545c:	1884583a 	ror	r2,r3,r2
    5460:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    5464:	e0bfe617 	ldw	r2,-104(fp)
    5468:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    546c:	e0bfec17 	ldw	r2,-80(fp)
    5470:	e0bfe615 	stw	r2,-104(fp)
		j++;
    5474:	e0bfeb17 	ldw	r2,-84(fp)
    5478:	10800044 	addi	r2,r2,1
    547c:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 16);
    5480:	e0bfeb17 	ldw	r2,-84(fp)
    5484:	10800410 	cmplti	r2,r2,16
    5488:	103fca1e 	bne	r2,zero,53b4 <__alt_mem_epcs_flash_controller+0xfdffc3b4>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    548c:	e0bfeb17 	ldw	r2,-84(fp)
    5490:	10800344 	addi	r2,r2,13
    5494:	108003cc 	andi	r2,r2,15
    5498:	1085883a 	add	r2,r2,r2
    549c:	1085883a 	add	r2,r2,r2
    54a0:	e0ffe604 	addi	r3,fp,-104
    54a4:	1885883a 	add	r2,r3,r2
    54a8:	10800704 	addi	r2,r2,28
    54ac:	10c00017 	ldw	r3,0(r2)
    54b0:	e0bfeb17 	ldw	r2,-84(fp)
    54b4:	10800204 	addi	r2,r2,8
    54b8:	108003cc 	andi	r2,r2,15
    54bc:	1085883a 	add	r2,r2,r2
    54c0:	1085883a 	add	r2,r2,r2
    54c4:	e13fe604 	addi	r4,fp,-104
    54c8:	2085883a 	add	r2,r4,r2
    54cc:	10800704 	addi	r2,r2,28
    54d0:	10800017 	ldw	r2,0(r2)
    54d4:	1886f03a 	xor	r3,r3,r2
    54d8:	e0bfeb17 	ldw	r2,-84(fp)
    54dc:	10800084 	addi	r2,r2,2
    54e0:	108003cc 	andi	r2,r2,15
    54e4:	1085883a 	add	r2,r2,r2
    54e8:	1085883a 	add	r2,r2,r2
    54ec:	e17fe604 	addi	r5,fp,-104
    54f0:	2885883a 	add	r2,r5,r2
    54f4:	10800704 	addi	r2,r2,28
    54f8:	10800017 	ldw	r2,0(r2)
    54fc:	1886f03a 	xor	r3,r3,r2
    5500:	e0bfeb17 	ldw	r2,-84(fp)
    5504:	108003cc 	andi	r2,r2,15
    5508:	1085883a 	add	r2,r2,r2
    550c:	1085883a 	add	r2,r2,r2
    5510:	e1bfe604 	addi	r6,fp,-104
    5514:	3085883a 	add	r2,r6,r2
    5518:	10800704 	addi	r2,r2,28
    551c:	10800017 	ldw	r2,0(r2)
    5520:	1884f03a 	xor	r2,r3,r2
    5524:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Ch(b,c,d) + e + K1_0_TO_19 + (W1[j&0x0f] = ROTL32(1, T1));
    5528:	e0bfe617 	ldw	r2,-104(fp)
    552c:	1006117a 	roli	r3,r2,5
    5530:	e13fe717 	ldw	r4,-100(fp)
    5534:	e0bfe817 	ldw	r2,-96(fp)
    5538:	2088703a 	and	r4,r4,r2
    553c:	e0bfe717 	ldw	r2,-100(fp)
    5540:	008a303a 	nor	r5,zero,r2
    5544:	e0bfe917 	ldw	r2,-92(fp)
    5548:	2884703a 	and	r2,r5,r2
    554c:	2084f03a 	xor	r2,r4,r2
    5550:	1887883a 	add	r3,r3,r2
    5554:	e0bfea17 	ldw	r2,-88(fp)
    5558:	1889883a 	add	r4,r3,r2
    555c:	e0bfeb17 	ldw	r2,-84(fp)
    5560:	108003cc 	andi	r2,r2,15
    5564:	e0ffec17 	ldw	r3,-80(fp)
    5568:	180a107a 	roli	r5,r3,1
    556c:	1087883a 	add	r3,r2,r2
    5570:	18c7883a 	add	r3,r3,r3
    5574:	e1bfe604 	addi	r6,fp,-104
    5578:	30c7883a 	add	r3,r6,r3
    557c:	18c00704 	addi	r3,r3,28
    5580:	19400015 	stw	r5,0(r3)
    5584:	1085883a 	add	r2,r2,r2
    5588:	1085883a 	add	r2,r2,r2
    558c:	e0ffe604 	addi	r3,fp,-104
    5590:	1885883a 	add	r2,r3,r2
    5594:	10800704 	addi	r2,r2,28
    5598:	10800017 	ldw	r2,0(r2)
    559c:	2087883a 	add	r3,r4,r2
    55a0:	0096a0b4 	movhi	r2,23170
    55a4:	109e6644 	addi	r2,r2,31129
    55a8:	1885883a 	add	r2,r3,r2
    55ac:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    55b0:	e0bfe917 	ldw	r2,-92(fp)
    55b4:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    55b8:	e0bfe817 	ldw	r2,-96(fp)
    55bc:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    55c0:	e0ffe717 	ldw	r3,-100(fp)
    55c4:	00800084 	movi	r2,2
    55c8:	1884583a 	ror	r2,r3,r2
    55cc:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    55d0:	e0bfe617 	ldw	r2,-104(fp)
    55d4:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    55d8:	e0bfec17 	ldw	r2,-80(fp)
    55dc:	e0bfe615 	stw	r2,-104(fp)
		j++;
    55e0:	e0bfeb17 	ldw	r2,-84(fp)
    55e4:	10800044 	addi	r2,r2,1
    55e8:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 20);
    55ec:	e0bfeb17 	ldw	r2,-84(fp)
    55f0:	10800510 	cmplti	r2,r2,20
    55f4:	103fa51e 	bne	r2,zero,548c <__alt_mem_epcs_flash_controller+0xfdffc48c>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    55f8:	e0bfeb17 	ldw	r2,-84(fp)
    55fc:	10800344 	addi	r2,r2,13
    5600:	108003cc 	andi	r2,r2,15
    5604:	1085883a 	add	r2,r2,r2
    5608:	1085883a 	add	r2,r2,r2
    560c:	e13fe604 	addi	r4,fp,-104
    5610:	2085883a 	add	r2,r4,r2
    5614:	10800704 	addi	r2,r2,28
    5618:	10c00017 	ldw	r3,0(r2)
    561c:	e0bfeb17 	ldw	r2,-84(fp)
    5620:	10800204 	addi	r2,r2,8
    5624:	108003cc 	andi	r2,r2,15
    5628:	1085883a 	add	r2,r2,r2
    562c:	1085883a 	add	r2,r2,r2
    5630:	e17fe604 	addi	r5,fp,-104
    5634:	2885883a 	add	r2,r5,r2
    5638:	10800704 	addi	r2,r2,28
    563c:	10800017 	ldw	r2,0(r2)
    5640:	1886f03a 	xor	r3,r3,r2
    5644:	e0bfeb17 	ldw	r2,-84(fp)
    5648:	10800084 	addi	r2,r2,2
    564c:	108003cc 	andi	r2,r2,15
    5650:	1085883a 	add	r2,r2,r2
    5654:	1085883a 	add	r2,r2,r2
    5658:	e1bfe604 	addi	r6,fp,-104
    565c:	3085883a 	add	r2,r6,r2
    5660:	10800704 	addi	r2,r2,28
    5664:	10800017 	ldw	r2,0(r2)
    5668:	1886f03a 	xor	r3,r3,r2
    566c:	e0bfeb17 	ldw	r2,-84(fp)
    5670:	108003cc 	andi	r2,r2,15
    5674:	1085883a 	add	r2,r2,r2
    5678:	1085883a 	add	r2,r2,r2
    567c:	e13fe604 	addi	r4,fp,-104
    5680:	2085883a 	add	r2,r4,r2
    5684:	10800704 	addi	r2,r2,28
    5688:	10800017 	ldw	r2,0(r2)
    568c:	1884f03a 	xor	r2,r3,r2
    5690:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_20_TO_39 + (W1[j&0x0f] = ROTL32(1, T1));
    5694:	e0bfe617 	ldw	r2,-104(fp)
    5698:	1006117a 	roli	r3,r2,5
    569c:	e13fe717 	ldw	r4,-100(fp)
    56a0:	e0bfe817 	ldw	r2,-96(fp)
    56a4:	2088f03a 	xor	r4,r4,r2
    56a8:	e0bfe917 	ldw	r2,-92(fp)
    56ac:	2084f03a 	xor	r2,r4,r2
    56b0:	1887883a 	add	r3,r3,r2
    56b4:	e0bfea17 	ldw	r2,-88(fp)
    56b8:	1889883a 	add	r4,r3,r2
    56bc:	e0bfeb17 	ldw	r2,-84(fp)
    56c0:	108003cc 	andi	r2,r2,15
    56c4:	e0ffec17 	ldw	r3,-80(fp)
    56c8:	180a107a 	roli	r5,r3,1
    56cc:	1087883a 	add	r3,r2,r2
    56d0:	18c7883a 	add	r3,r3,r3
    56d4:	e1bfe604 	addi	r6,fp,-104
    56d8:	30c7883a 	add	r3,r6,r3
    56dc:	18c00704 	addi	r3,r3,28
    56e0:	19400015 	stw	r5,0(r3)
    56e4:	1085883a 	add	r2,r2,r2
    56e8:	1085883a 	add	r2,r2,r2
    56ec:	e0ffe604 	addi	r3,fp,-104
    56f0:	1885883a 	add	r2,r3,r2
    56f4:	10800704 	addi	r2,r2,28
    56f8:	10800017 	ldw	r2,0(r2)
    56fc:	2087883a 	add	r3,r4,r2
    5700:	009bb6b4 	movhi	r2,28378
    5704:	10bae844 	addi	r2,r2,-5215
    5708:	1885883a 	add	r2,r3,r2
    570c:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    5710:	e0bfe917 	ldw	r2,-92(fp)
    5714:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    5718:	e0bfe817 	ldw	r2,-96(fp)
    571c:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    5720:	e0ffe717 	ldw	r3,-100(fp)
    5724:	00800084 	movi	r2,2
    5728:	1884583a 	ror	r2,r3,r2
    572c:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    5730:	e0bfe617 	ldw	r2,-104(fp)
    5734:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    5738:	e0bfec17 	ldw	r2,-80(fp)
    573c:	e0bfe615 	stw	r2,-104(fp)
		j++;
    5740:	e0bfeb17 	ldw	r2,-84(fp)
    5744:	10800044 	addi	r2,r2,1
    5748:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 40);
    574c:	e0bfeb17 	ldw	r2,-84(fp)
    5750:	10800a10 	cmplti	r2,r2,40
    5754:	103fa81e 	bne	r2,zero,55f8 <__alt_mem_epcs_flash_controller+0xfdffc5f8>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    5758:	e0bfeb17 	ldw	r2,-84(fp)
    575c:	10800344 	addi	r2,r2,13
    5760:	108003cc 	andi	r2,r2,15
    5764:	1085883a 	add	r2,r2,r2
    5768:	1085883a 	add	r2,r2,r2
    576c:	e13fe604 	addi	r4,fp,-104
    5770:	2085883a 	add	r2,r4,r2
    5774:	10800704 	addi	r2,r2,28
    5778:	10c00017 	ldw	r3,0(r2)
    577c:	e0bfeb17 	ldw	r2,-84(fp)
    5780:	10800204 	addi	r2,r2,8
    5784:	108003cc 	andi	r2,r2,15
    5788:	1085883a 	add	r2,r2,r2
    578c:	1085883a 	add	r2,r2,r2
    5790:	e17fe604 	addi	r5,fp,-104
    5794:	2885883a 	add	r2,r5,r2
    5798:	10800704 	addi	r2,r2,28
    579c:	10800017 	ldw	r2,0(r2)
    57a0:	1886f03a 	xor	r3,r3,r2
    57a4:	e0bfeb17 	ldw	r2,-84(fp)
    57a8:	10800084 	addi	r2,r2,2
    57ac:	108003cc 	andi	r2,r2,15
    57b0:	1085883a 	add	r2,r2,r2
    57b4:	1085883a 	add	r2,r2,r2
    57b8:	e1bfe604 	addi	r6,fp,-104
    57bc:	3085883a 	add	r2,r6,r2
    57c0:	10800704 	addi	r2,r2,28
    57c4:	10800017 	ldw	r2,0(r2)
    57c8:	1886f03a 	xor	r3,r3,r2
    57cc:	e0bfeb17 	ldw	r2,-84(fp)
    57d0:	108003cc 	andi	r2,r2,15
    57d4:	1085883a 	add	r2,r2,r2
    57d8:	1085883a 	add	r2,r2,r2
    57dc:	e13fe604 	addi	r4,fp,-104
    57e0:	2085883a 	add	r2,r4,r2
    57e4:	10800704 	addi	r2,r2,28
    57e8:	10800017 	ldw	r2,0(r2)
    57ec:	1884f03a 	xor	r2,r3,r2
    57f0:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Maj(b,c,d) + e + K1_40_TO_59 + (W1[j&0x0f] = ROTL32(1, T1));
    57f4:	e0bfe617 	ldw	r2,-104(fp)
    57f8:	1006117a 	roli	r3,r2,5
    57fc:	e13fe717 	ldw	r4,-100(fp)
    5800:	e0bfe817 	ldw	r2,-96(fp)
    5804:	2088703a 	and	r4,r4,r2
    5808:	e17fe717 	ldw	r5,-100(fp)
    580c:	e0bfe917 	ldw	r2,-92(fp)
    5810:	2884703a 	and	r2,r5,r2
    5814:	2088f03a 	xor	r4,r4,r2
    5818:	e17fe817 	ldw	r5,-96(fp)
    581c:	e0bfe917 	ldw	r2,-92(fp)
    5820:	2884703a 	and	r2,r5,r2
    5824:	2084f03a 	xor	r2,r4,r2
    5828:	1887883a 	add	r3,r3,r2
    582c:	e0bfea17 	ldw	r2,-88(fp)
    5830:	1889883a 	add	r4,r3,r2
    5834:	e0bfeb17 	ldw	r2,-84(fp)
    5838:	108003cc 	andi	r2,r2,15
    583c:	e0ffec17 	ldw	r3,-80(fp)
    5840:	180a107a 	roli	r5,r3,1
    5844:	1087883a 	add	r3,r2,r2
    5848:	18c7883a 	add	r3,r3,r3
    584c:	e1bfe604 	addi	r6,fp,-104
    5850:	30c7883a 	add	r3,r6,r3
    5854:	18c00704 	addi	r3,r3,28
    5858:	19400015 	stw	r5,0(r3)
    585c:	1085883a 	add	r2,r2,r2
    5860:	1085883a 	add	r2,r2,r2
    5864:	e0ffe604 	addi	r3,fp,-104
    5868:	1885883a 	add	r2,r3,r2
    586c:	10800704 	addi	r2,r2,28
    5870:	10800017 	ldw	r2,0(r2)
    5874:	2087883a 	add	r3,r4,r2
    5878:	00a3c734 	movhi	r2,36636
    587c:	10af3704 	addi	r2,r2,-17188
    5880:	1885883a 	add	r2,r3,r2
    5884:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    5888:	e0bfe917 	ldw	r2,-92(fp)
    588c:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    5890:	e0bfe817 	ldw	r2,-96(fp)
    5894:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    5898:	e0ffe717 	ldw	r3,-100(fp)
    589c:	00800084 	movi	r2,2
    58a0:	1884583a 	ror	r2,r3,r2
    58a4:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    58a8:	e0bfe617 	ldw	r2,-104(fp)
    58ac:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    58b0:	e0bfec17 	ldw	r2,-80(fp)
    58b4:	e0bfe615 	stw	r2,-104(fp)
		j++;
    58b8:	e0bfeb17 	ldw	r2,-84(fp)
    58bc:	10800044 	addi	r2,r2,1
    58c0:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 60);
    58c4:	e0bfeb17 	ldw	r2,-84(fp)
    58c8:	10800f10 	cmplti	r2,r2,60
    58cc:	103fa21e 	bne	r2,zero,5758 <__alt_mem_epcs_flash_controller+0xfdffc758>

	do {
		T1 = W1[(j+13)&0x0f] ^ W1[(j+8)&0x0f] ^ W1[(j+2)&0x0f] ^ W1[j&0x0f];
    58d0:	e0bfeb17 	ldw	r2,-84(fp)
    58d4:	10800344 	addi	r2,r2,13
    58d8:	108003cc 	andi	r2,r2,15
    58dc:	1085883a 	add	r2,r2,r2
    58e0:	1085883a 	add	r2,r2,r2
    58e4:	e13fe604 	addi	r4,fp,-104
    58e8:	2085883a 	add	r2,r4,r2
    58ec:	10800704 	addi	r2,r2,28
    58f0:	10c00017 	ldw	r3,0(r2)
    58f4:	e0bfeb17 	ldw	r2,-84(fp)
    58f8:	10800204 	addi	r2,r2,8
    58fc:	108003cc 	andi	r2,r2,15
    5900:	1085883a 	add	r2,r2,r2
    5904:	1085883a 	add	r2,r2,r2
    5908:	e17fe604 	addi	r5,fp,-104
    590c:	2885883a 	add	r2,r5,r2
    5910:	10800704 	addi	r2,r2,28
    5914:	10800017 	ldw	r2,0(r2)
    5918:	1886f03a 	xor	r3,r3,r2
    591c:	e0bfeb17 	ldw	r2,-84(fp)
    5920:	10800084 	addi	r2,r2,2
    5924:	108003cc 	andi	r2,r2,15
    5928:	1085883a 	add	r2,r2,r2
    592c:	1085883a 	add	r2,r2,r2
    5930:	e1bfe604 	addi	r6,fp,-104
    5934:	3085883a 	add	r2,r6,r2
    5938:	10800704 	addi	r2,r2,28
    593c:	10800017 	ldw	r2,0(r2)
    5940:	1886f03a 	xor	r3,r3,r2
    5944:	e0bfeb17 	ldw	r2,-84(fp)
    5948:	108003cc 	andi	r2,r2,15
    594c:	1085883a 	add	r2,r2,r2
    5950:	1085883a 	add	r2,r2,r2
    5954:	e13fe604 	addi	r4,fp,-104
    5958:	2085883a 	add	r2,r4,r2
    595c:	10800704 	addi	r2,r2,28
    5960:	10800017 	ldw	r2,0(r2)
    5964:	1884f03a 	xor	r2,r3,r2
    5968:	e0bfec15 	stw	r2,-80(fp)
		T1 = ROTL32(5, a) + Parity(b,c,d) + e + K1_60_TO_79 + (W1[j&0x0f] = ROTL32(1, T1));
    596c:	e0bfe617 	ldw	r2,-104(fp)
    5970:	1006117a 	roli	r3,r2,5
    5974:	e13fe717 	ldw	r4,-100(fp)
    5978:	e0bfe817 	ldw	r2,-96(fp)
    597c:	2088f03a 	xor	r4,r4,r2
    5980:	e0bfe917 	ldw	r2,-92(fp)
    5984:	2084f03a 	xor	r2,r4,r2
    5988:	1887883a 	add	r3,r3,r2
    598c:	e0bfea17 	ldw	r2,-88(fp)
    5990:	1889883a 	add	r4,r3,r2
    5994:	e0bfeb17 	ldw	r2,-84(fp)
    5998:	108003cc 	andi	r2,r2,15
    599c:	e0ffec17 	ldw	r3,-80(fp)
    59a0:	180a107a 	roli	r5,r3,1
    59a4:	1087883a 	add	r3,r2,r2
    59a8:	18c7883a 	add	r3,r3,r3
    59ac:	e1bfe604 	addi	r6,fp,-104
    59b0:	30c7883a 	add	r3,r6,r3
    59b4:	18c00704 	addi	r3,r3,28
    59b8:	19400015 	stw	r5,0(r3)
    59bc:	1085883a 	add	r2,r2,r2
    59c0:	1085883a 	add	r2,r2,r2
    59c4:	e0ffe604 	addi	r3,fp,-104
    59c8:	1885883a 	add	r2,r3,r2
    59cc:	10800704 	addi	r2,r2,28
    59d0:	10800017 	ldw	r2,0(r2)
    59d4:	2087883a 	add	r3,r4,r2
    59d8:	00b298f4 	movhi	r2,51811
    59dc:	10b07584 	addi	r2,r2,-15914
    59e0:	1885883a 	add	r2,r3,r2
    59e4:	e0bfec15 	stw	r2,-80(fp)
		e = d;
    59e8:	e0bfe917 	ldw	r2,-92(fp)
    59ec:	e0bfea15 	stw	r2,-88(fp)
		d = c;
    59f0:	e0bfe817 	ldw	r2,-96(fp)
    59f4:	e0bfe915 	stw	r2,-92(fp)
		c = ROTL32(30, b);
    59f8:	e0ffe717 	ldw	r3,-100(fp)
    59fc:	00800084 	movi	r2,2
    5a00:	1884583a 	ror	r2,r3,r2
    5a04:	e0bfe815 	stw	r2,-96(fp)
		b = a;
    5a08:	e0bfe617 	ldw	r2,-104(fp)
    5a0c:	e0bfe715 	stw	r2,-100(fp)
		a = T1;
    5a10:	e0bfec17 	ldw	r2,-80(fp)
    5a14:	e0bfe615 	stw	r2,-104(fp)
		j++;
    5a18:	e0bfeb17 	ldw	r2,-84(fp)
    5a1c:	10800044 	addi	r2,r2,1
    5a20:	e0bfeb15 	stw	r2,-84(fp)
	} while (j < 80);
    5a24:	e0bfeb17 	ldw	r2,-84(fp)
    5a28:	10801410 	cmplti	r2,r2,80
    5a2c:	103fa81e 	bne	r2,zero,58d0 <__alt_mem_epcs_flash_controller+0xfdffc8d0>


	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    5a30:	e0bffd17 	ldw	r2,-12(fp)
    5a34:	10c00017 	ldw	r3,0(r2)
    5a38:	e0bfe617 	ldw	r2,-104(fp)
    5a3c:	1887883a 	add	r3,r3,r2
    5a40:	e0bfff17 	ldw	r2,-4(fp)
    5a44:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    5a48:	e0bfff17 	ldw	r2,-4(fp)
    5a4c:	10800104 	addi	r2,r2,4
    5a50:	e0fffd17 	ldw	r3,-12(fp)
    5a54:	18c00104 	addi	r3,r3,4
    5a58:	19000017 	ldw	r4,0(r3)
    5a5c:	e0ffe717 	ldw	r3,-100(fp)
    5a60:	20c7883a 	add	r3,r4,r3
    5a64:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    5a68:	e0bfff17 	ldw	r2,-4(fp)
    5a6c:	10800204 	addi	r2,r2,8
    5a70:	e0fffd17 	ldw	r3,-12(fp)
    5a74:	18c00204 	addi	r3,r3,8
    5a78:	19000017 	ldw	r4,0(r3)
    5a7c:	e0ffe817 	ldw	r3,-96(fp)
    5a80:	20c7883a 	add	r3,r4,r3
    5a84:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    5a88:	e0bfff17 	ldw	r2,-4(fp)
    5a8c:	10800304 	addi	r2,r2,12
    5a90:	e0fffd17 	ldw	r3,-12(fp)
    5a94:	18c00304 	addi	r3,r3,12
    5a98:	19000017 	ldw	r4,0(r3)
    5a9c:	e0ffe917 	ldw	r3,-92(fp)
    5aa0:	20c7883a 	add	r3,r4,r3
    5aa4:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    5aa8:	e0bfff17 	ldw	r2,-4(fp)
    5aac:	10800404 	addi	r2,r2,16
    5ab0:	e0fffd17 	ldw	r3,-12(fp)
    5ab4:	18c00404 	addi	r3,r3,16
    5ab8:	19000017 	ldw	r4,0(r3)
    5abc:	e0ffea17 	ldw	r3,-88(fp)
    5ac0:	20c7883a 	add	r3,r4,r3
    5ac4:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = T1 = 0;
    5ac8:	e03fec15 	stw	zero,-80(fp)
    5acc:	e0bfec17 	ldw	r2,-80(fp)
    5ad0:	e0bfea15 	stw	r2,-88(fp)
    5ad4:	e0bfea17 	ldw	r2,-88(fp)
    5ad8:	e0bfe915 	stw	r2,-92(fp)
    5adc:	e0bfe917 	ldw	r2,-92(fp)
    5ae0:	e0bfe815 	stw	r2,-96(fp)
    5ae4:	e0bfe817 	ldw	r2,-96(fp)
    5ae8:	e0bfe715 	stw	r2,-100(fp)
    5aec:	e0bfe717 	ldw	r2,-100(fp)
    5af0:	e0bfe615 	stw	r2,-104(fp)
}
    5af4:	0001883a 	nop
    5af8:	e037883a 	mov	sp,fp
    5afc:	df000017 	ldw	fp,0(sp)
    5b00:	dec00104 	addi	sp,sp,4
    5b04:	f800283a 	ret

00005b08 <trezor_sha1_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void trezor_sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
    5b08:	deffef04 	addi	sp,sp,-68
    5b0c:	dfc01015 	stw	ra,64(sp)
    5b10:	df000f15 	stw	fp,60(sp)
    5b14:	dd400e15 	stw	r21,56(sp)
    5b18:	dd000d15 	stw	r20,52(sp)
    5b1c:	dcc00c15 	stw	r19,48(sp)
    5b20:	dc800b15 	stw	r18,44(sp)
    5b24:	dc400a15 	stw	r17,40(sp)
    5b28:	dc000915 	stw	r16,36(sp)
    5b2c:	df000f04 	addi	fp,sp,60
    5b30:	e13ff715 	stw	r4,-36(fp)
    5b34:	e17ff815 	stw	r5,-32(fp)
    5b38:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    5b3c:	e0bff917 	ldw	r2,-28(fp)
    5b40:	1000e726 	beq	r2,zero,5ee0 <trezor_sha1_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    5b44:	e13ff717 	ldw	r4,-36(fp)
    5b48:	20800517 	ldw	r2,20(r4)
    5b4c:	20c00617 	ldw	r3,24(r4)
    5b50:	1808977a 	slli	r4,r3,29
    5b54:	100ed0fa 	srli	r7,r2,3
    5b58:	21ceb03a 	or	r7,r4,r7
    5b5c:	1810d0fa 	srli	r8,r3,3
    5b60:	3805883a 	mov	r2,r7
    5b64:	10800fcc 	andi	r2,r2,63
    5b68:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    5b6c:	e0bff317 	ldw	r2,-52(fp)
    5b70:	1000bb26 	beq	r2,zero,5e60 <trezor_sha1_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA1_BLOCK_LENGTH - usedspace;
    5b74:	00c01004 	movi	r3,64
    5b78:	e0bff317 	ldw	r2,-52(fp)
    5b7c:	1885c83a 	sub	r2,r3,r2
    5b80:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    5b84:	e0fff917 	ldw	r3,-28(fp)
    5b88:	e0bff417 	ldw	r2,-48(fp)
    5b8c:	18804f36 	bltu	r3,r2,5ccc <trezor_sha1_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    5b90:	e0bff717 	ldw	r2,-36(fp)
    5b94:	10c00704 	addi	r3,r2,28
    5b98:	e0bff317 	ldw	r2,-52(fp)
    5b9c:	1885883a 	add	r2,r3,r2
    5ba0:	e1bff417 	ldw	r6,-48(fp)
    5ba4:	e17ff817 	ldw	r5,-32(fp)
    5ba8:	1009883a 	mov	r4,r2
    5bac:	00095dc0 	call	95dc <memcpy>
			context->bitcount += freespace << 3;
    5bb0:	e0bff717 	ldw	r2,-36(fp)
    5bb4:	11000517 	ldw	r4,20(r2)
    5bb8:	11400617 	ldw	r5,24(r2)
    5bbc:	e0bff417 	ldw	r2,-48(fp)
    5bc0:	100490fa 	slli	r2,r2,3
    5bc4:	1029883a 	mov	r20,r2
    5bc8:	002b883a 	mov	r21,zero
    5bcc:	2505883a 	add	r2,r4,r20
    5bd0:	110d803a 	cmpltu	r6,r2,r4
    5bd4:	2d47883a 	add	r3,r5,r21
    5bd8:	30c9883a 	add	r4,r6,r3
    5bdc:	2007883a 	mov	r3,r4
    5be0:	1009883a 	mov	r4,r2
    5be4:	180b883a 	mov	r5,r3
    5be8:	e0bff717 	ldw	r2,-36(fp)
    5bec:	11000515 	stw	r4,20(r2)
    5bf0:	11400615 	stw	r5,24(r2)
			len -= freespace;
    5bf4:	e0fff917 	ldw	r3,-28(fp)
    5bf8:	e0bff417 	ldw	r2,-48(fp)
    5bfc:	1885c83a 	sub	r2,r3,r2
    5c00:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    5c04:	e0fff817 	ldw	r3,-32(fp)
    5c08:	e0bff417 	ldw	r2,-48(fp)
    5c0c:	1885883a 	add	r2,r3,r2
    5c10:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    5c14:	e03ff115 	stw	zero,-60(fp)
    5c18:	00002006 	br	5c9c <trezor_sha1_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    5c1c:	e0fff717 	ldw	r3,-36(fp)
    5c20:	e0bff117 	ldw	r2,-60(fp)
    5c24:	108001c4 	addi	r2,r2,7
    5c28:	1085883a 	add	r2,r2,r2
    5c2c:	1085883a 	add	r2,r2,r2
    5c30:	1885883a 	add	r2,r3,r2
    5c34:	10800017 	ldw	r2,0(r2)
    5c38:	e0bff515 	stw	r2,-44(fp)
    5c3c:	e0bff517 	ldw	r2,-44(fp)
    5c40:	1004143a 	roli	r2,r2,16
    5c44:	e0bff515 	stw	r2,-44(fp)
    5c48:	e0fff517 	ldw	r3,-44(fp)
    5c4c:	00bfc074 	movhi	r2,65281
    5c50:	10bfc004 	addi	r2,r2,-256
    5c54:	1884703a 	and	r2,r3,r2
    5c58:	1006d23a 	srli	r3,r2,8
    5c5c:	e13ff517 	ldw	r4,-44(fp)
    5c60:	00803ff4 	movhi	r2,255
    5c64:	10803fc4 	addi	r2,r2,255
    5c68:	2084703a 	and	r2,r4,r2
    5c6c:	1004923a 	slli	r2,r2,8
    5c70:	1886b03a 	or	r3,r3,r2
    5c74:	e13ff717 	ldw	r4,-36(fp)
    5c78:	e0bff117 	ldw	r2,-60(fp)
    5c7c:	108001c4 	addi	r2,r2,7
    5c80:	1085883a 	add	r2,r2,r2
    5c84:	1085883a 	add	r2,r2,r2
    5c88:	2085883a 	add	r2,r4,r2
    5c8c:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    5c90:	e0bff117 	ldw	r2,-60(fp)
    5c94:	10800044 	addi	r2,r2,1
    5c98:	e0bff115 	stw	r2,-60(fp)
    5c9c:	e0bff117 	ldw	r2,-60(fp)
    5ca0:	10800410 	cmplti	r2,r2,16
    5ca4:	103fdd1e 	bne	r2,zero,5c1c <__alt_mem_epcs_flash_controller+0xfdffcc1c>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			trezor_sha1_Transform(context->state, context->buffer, context->state);
    5ca8:	e0fff717 	ldw	r3,-36(fp)
    5cac:	e0bff717 	ldw	r2,-36(fp)
    5cb0:	10800704 	addi	r2,r2,28
    5cb4:	e13ff717 	ldw	r4,-36(fp)
    5cb8:	200d883a 	mov	r6,r4
    5cbc:	100b883a 	mov	r5,r2
    5cc0:	1809883a 	mov	r4,r3
    5cc4:	000535c0 	call	535c <trezor_sha1_Transform>
    5cc8:	00006506 	br	5e60 <trezor_sha1_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    5ccc:	e0bff717 	ldw	r2,-36(fp)
    5cd0:	10c00704 	addi	r3,r2,28
    5cd4:	e0bff317 	ldw	r2,-52(fp)
    5cd8:	1885883a 	add	r2,r3,r2
    5cdc:	e1bff917 	ldw	r6,-28(fp)
    5ce0:	e17ff817 	ldw	r5,-32(fp)
    5ce4:	1009883a 	mov	r4,r2
    5ce8:	00095dc0 	call	95dc <memcpy>
			context->bitcount += len << 3;
    5cec:	e0bff717 	ldw	r2,-36(fp)
    5cf0:	11000517 	ldw	r4,20(r2)
    5cf4:	11400617 	ldw	r5,24(r2)
    5cf8:	e0bff917 	ldw	r2,-28(fp)
    5cfc:	100490fa 	slli	r2,r2,3
    5d00:	1025883a 	mov	r18,r2
    5d04:	0027883a 	mov	r19,zero
    5d08:	2485883a 	add	r2,r4,r18
    5d0c:	110d803a 	cmpltu	r6,r2,r4
    5d10:	2cc7883a 	add	r3,r5,r19
    5d14:	30c9883a 	add	r4,r6,r3
    5d18:	2007883a 	mov	r3,r4
    5d1c:	1009883a 	mov	r4,r2
    5d20:	180b883a 	mov	r5,r3
    5d24:	e0bff717 	ldw	r2,-36(fp)
    5d28:	11000515 	stw	r4,20(r2)
    5d2c:	11400615 	stw	r5,24(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    5d30:	e03ff415 	stw	zero,-48(fp)
    5d34:	e0bff417 	ldw	r2,-48(fp)
    5d38:	e0bff315 	stw	r2,-52(fp)
			return;
    5d3c:	00006906 	br	5ee4 <trezor_sha1_Update+0x3dc>
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
    5d40:	e0bff717 	ldw	r2,-36(fp)
    5d44:	10800704 	addi	r2,r2,28
    5d48:	01801004 	movi	r6,64
    5d4c:	e17ff817 	ldw	r5,-32(fp)
    5d50:	1009883a 	mov	r4,r2
    5d54:	00095dc0 	call	95dc <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5d58:	e03ff215 	stw	zero,-56(fp)
    5d5c:	00002006 	br	5de0 <trezor_sha1_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    5d60:	e0fff717 	ldw	r3,-36(fp)
    5d64:	e0bff217 	ldw	r2,-56(fp)
    5d68:	108001c4 	addi	r2,r2,7
    5d6c:	1085883a 	add	r2,r2,r2
    5d70:	1085883a 	add	r2,r2,r2
    5d74:	1885883a 	add	r2,r3,r2
    5d78:	10800017 	ldw	r2,0(r2)
    5d7c:	e0bff615 	stw	r2,-40(fp)
    5d80:	e0bff617 	ldw	r2,-40(fp)
    5d84:	1004143a 	roli	r2,r2,16
    5d88:	e0bff615 	stw	r2,-40(fp)
    5d8c:	e0fff617 	ldw	r3,-40(fp)
    5d90:	00bfc074 	movhi	r2,65281
    5d94:	10bfc004 	addi	r2,r2,-256
    5d98:	1884703a 	and	r2,r3,r2
    5d9c:	1006d23a 	srli	r3,r2,8
    5da0:	e13ff617 	ldw	r4,-40(fp)
    5da4:	00803ff4 	movhi	r2,255
    5da8:	10803fc4 	addi	r2,r2,255
    5dac:	2084703a 	and	r2,r4,r2
    5db0:	1004923a 	slli	r2,r2,8
    5db4:	1886b03a 	or	r3,r3,r2
    5db8:	e13ff717 	ldw	r4,-36(fp)
    5dbc:	e0bff217 	ldw	r2,-56(fp)
    5dc0:	108001c4 	addi	r2,r2,7
    5dc4:	1085883a 	add	r2,r2,r2
    5dc8:	1085883a 	add	r2,r2,r2
    5dcc:	2085883a 	add	r2,r4,r2
    5dd0:	10c00015 	stw	r3,0(r2)
	while (len >= SHA1_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA1_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    5dd4:	e0bff217 	ldw	r2,-56(fp)
    5dd8:	10800044 	addi	r2,r2,1
    5ddc:	e0bff215 	stw	r2,-56(fp)
    5de0:	e0bff217 	ldw	r2,-56(fp)
    5de4:	10800410 	cmplti	r2,r2,16
    5de8:	103fdd1e 	bne	r2,zero,5d60 <__alt_mem_epcs_flash_controller+0xfdffcd60>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		trezor_sha1_Transform(context->state, context->buffer, context->state);
    5dec:	e0fff717 	ldw	r3,-36(fp)
    5df0:	e0bff717 	ldw	r2,-36(fp)
    5df4:	10800704 	addi	r2,r2,28
    5df8:	e13ff717 	ldw	r4,-36(fp)
    5dfc:	200d883a 	mov	r6,r4
    5e00:	100b883a 	mov	r5,r2
    5e04:	1809883a 	mov	r4,r3
    5e08:	000535c0 	call	535c <trezor_sha1_Transform>
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
    5e0c:	e0bff717 	ldw	r2,-36(fp)
    5e10:	11000517 	ldw	r4,20(r2)
    5e14:	11400617 	ldw	r5,24(r2)
    5e18:	01808004 	movi	r6,512
    5e1c:	000f883a 	mov	r7,zero
    5e20:	2185883a 	add	r2,r4,r6
    5e24:	1111803a 	cmpltu	r8,r2,r4
    5e28:	29c7883a 	add	r3,r5,r7
    5e2c:	40c9883a 	add	r4,r8,r3
    5e30:	2007883a 	mov	r3,r4
    5e34:	1009883a 	mov	r4,r2
    5e38:	180b883a 	mov	r5,r3
    5e3c:	e0bff717 	ldw	r2,-36(fp)
    5e40:	11000515 	stw	r4,20(r2)
    5e44:	11400615 	stw	r5,24(r2)
		len -= SHA1_BLOCK_LENGTH;
    5e48:	e0bff917 	ldw	r2,-28(fp)
    5e4c:	10bff004 	addi	r2,r2,-64
    5e50:	e0bff915 	stw	r2,-28(fp)
		data += SHA1_BLOCK_LENGTH;
    5e54:	e0bff817 	ldw	r2,-32(fp)
    5e58:	10801004 	addi	r2,r2,64
    5e5c:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA1_BLOCK_LENGTH) {
    5e60:	e0bff917 	ldw	r2,-28(fp)
    5e64:	10801028 	cmpgeui	r2,r2,64
    5e68:	103fb51e 	bne	r2,zero,5d40 <__alt_mem_epcs_flash_controller+0xfdffcd40>
		trezor_sha1_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA1_BLOCK_LENGTH << 3;
		len -= SHA1_BLOCK_LENGTH;
		data += SHA1_BLOCK_LENGTH;
	}
	if (len > 0) {
    5e6c:	e0bff917 	ldw	r2,-28(fp)
    5e70:	10001726 	beq	r2,zero,5ed0 <trezor_sha1_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    5e74:	e0bff717 	ldw	r2,-36(fp)
    5e78:	10800704 	addi	r2,r2,28
    5e7c:	e1bff917 	ldw	r6,-28(fp)
    5e80:	e17ff817 	ldw	r5,-32(fp)
    5e84:	1009883a 	mov	r4,r2
    5e88:	00095dc0 	call	95dc <memcpy>
		context->bitcount += len << 3;
    5e8c:	e0bff717 	ldw	r2,-36(fp)
    5e90:	11000517 	ldw	r4,20(r2)
    5e94:	11400617 	ldw	r5,24(r2)
    5e98:	e0bff917 	ldw	r2,-28(fp)
    5e9c:	100490fa 	slli	r2,r2,3
    5ea0:	1021883a 	mov	r16,r2
    5ea4:	0023883a 	mov	r17,zero
    5ea8:	2405883a 	add	r2,r4,r16
    5eac:	110d803a 	cmpltu	r6,r2,r4
    5eb0:	2c47883a 	add	r3,r5,r17
    5eb4:	30c9883a 	add	r4,r6,r3
    5eb8:	2007883a 	mov	r3,r4
    5ebc:	1009883a 	mov	r4,r2
    5ec0:	180b883a 	mov	r5,r3
    5ec4:	e0bff717 	ldw	r2,-36(fp)
    5ec8:	11000515 	stw	r4,20(r2)
    5ecc:	11400615 	stw	r5,24(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    5ed0:	e03ff415 	stw	zero,-48(fp)
    5ed4:	e0bff417 	ldw	r2,-48(fp)
    5ed8:	e0bff315 	stw	r2,-52(fp)
    5edc:	00000106 	br	5ee4 <trezor_sha1_Update+0x3dc>
void trezor_sha1_Update(SHA1_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    5ee0:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    5ee4:	e6fffa04 	addi	sp,fp,-24
    5ee8:	dfc00717 	ldw	ra,28(sp)
    5eec:	df000617 	ldw	fp,24(sp)
    5ef0:	dd400517 	ldw	r21,20(sp)
    5ef4:	dd000417 	ldw	r20,16(sp)
    5ef8:	dcc00317 	ldw	r19,12(sp)
    5efc:	dc800217 	ldw	r18,8(sp)
    5f00:	dc400117 	ldw	r17,4(sp)
    5f04:	dc000017 	ldw	r16,0(sp)
    5f08:	dec00804 	addi	sp,sp,32
    5f0c:	f800283a 	ret

00005f10 <trezor_sha1_Final>:

void trezor_sha1_Final(SHA1_CTX* context, sha2_byte digest[]) {
    5f10:	defff304 	addi	sp,sp,-52
    5f14:	dfc00c15 	stw	ra,48(sp)
    5f18:	df000b15 	stw	fp,44(sp)
    5f1c:	dc400a15 	stw	r17,40(sp)
    5f20:	dc000915 	stw	r16,36(sp)
    5f24:	df000b04 	addi	fp,sp,44
    5f28:	e13ffc15 	stw	r4,-16(fp)
    5f2c:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    5f30:	e0bffd17 	ldw	r2,-12(fp)
    5f34:	1000b826 	beq	r2,zero,6218 <trezor_sha1_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA1_BLOCK_LENGTH;
    5f38:	e13ffc17 	ldw	r4,-16(fp)
    5f3c:	20800517 	ldw	r2,20(r4)
    5f40:	20c00617 	ldw	r3,24(r4)
    5f44:	1808977a 	slli	r4,r3,29
    5f48:	100cd0fa 	srli	r6,r2,3
    5f4c:	218cb03a 	or	r6,r4,r6
    5f50:	180ed0fa 	srli	r7,r3,3
    5f54:	3005883a 	mov	r2,r6
    5f58:	10800fcc 	andi	r2,r2,63
    5f5c:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    5f60:	e0bffc17 	ldw	r2,-16(fp)
    5f64:	10c00704 	addi	r3,r2,28
    5f68:	e0bff517 	ldw	r2,-44(fp)
    5f6c:	11000044 	addi	r4,r2,1
    5f70:	e13ff515 	stw	r4,-44(fp)
    5f74:	1885883a 	add	r2,r3,r2
    5f78:	00ffe004 	movi	r3,-128
    5f7c:	10c00005 	stb	r3,0(r2)

		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
    5f80:	e0bff517 	ldw	r2,-44(fp)
    5f84:	10800e70 	cmpltui	r2,r2,57
    5f88:	1000371e 	bne	r2,zero,6068 <trezor_sha1_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);
    5f8c:	e0bffc17 	ldw	r2,-16(fp)
    5f90:	10c00704 	addi	r3,r2,28
    5f94:	e0bff517 	ldw	r2,-44(fp)
    5f98:	1889883a 	add	r4,r3,r2
    5f9c:	00c01004 	movi	r3,64
    5fa0:	e0bff517 	ldw	r2,-44(fp)
    5fa4:	1885c83a 	sub	r2,r3,r2
    5fa8:	100b883a 	mov	r5,r2
    5fac:	00017c40 	call	17c4 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    5fb0:	e03ff615 	stw	zero,-40(fp)
    5fb4:	00002006 	br	6038 <trezor_sha1_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    5fb8:	e0fffc17 	ldw	r3,-16(fp)
    5fbc:	e0bff617 	ldw	r2,-40(fp)
    5fc0:	108001c4 	addi	r2,r2,7
    5fc4:	1085883a 	add	r2,r2,r2
    5fc8:	1085883a 	add	r2,r2,r2
    5fcc:	1885883a 	add	r2,r3,r2
    5fd0:	10800017 	ldw	r2,0(r2)
    5fd4:	e0bff915 	stw	r2,-28(fp)
    5fd8:	e0bff917 	ldw	r2,-28(fp)
    5fdc:	1004143a 	roli	r2,r2,16
    5fe0:	e0bff915 	stw	r2,-28(fp)
    5fe4:	e0fff917 	ldw	r3,-28(fp)
    5fe8:	00bfc074 	movhi	r2,65281
    5fec:	10bfc004 	addi	r2,r2,-256
    5ff0:	1884703a 	and	r2,r3,r2
    5ff4:	1006d23a 	srli	r3,r2,8
    5ff8:	e13ff917 	ldw	r4,-28(fp)
    5ffc:	00803ff4 	movhi	r2,255
    6000:	10803fc4 	addi	r2,r2,255
    6004:	2084703a 	and	r2,r4,r2
    6008:	1004923a 	slli	r2,r2,8
    600c:	1886b03a 	or	r3,r3,r2
    6010:	e13ffc17 	ldw	r4,-16(fp)
    6014:	e0bff617 	ldw	r2,-40(fp)
    6018:	108001c4 	addi	r2,r2,7
    601c:	1085883a 	add	r2,r2,r2
    6020:	1085883a 	add	r2,r2,r2
    6024:	2085883a 	add	r2,r4,r2
    6028:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA1_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA1_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    602c:	e0bff617 	ldw	r2,-40(fp)
    6030:	10800044 	addi	r2,r2,1
    6034:	e0bff615 	stw	r2,-40(fp)
    6038:	e0bff617 	ldw	r2,-40(fp)
    603c:	10800410 	cmplti	r2,r2,16
    6040:	103fdd1e 	bne	r2,zero,5fb8 <__alt_mem_epcs_flash_controller+0xfdffcfb8>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			trezor_sha1_Transform(context->state, context->buffer, context->state);
    6044:	e0fffc17 	ldw	r3,-16(fp)
    6048:	e0bffc17 	ldw	r2,-16(fp)
    604c:	10800704 	addi	r2,r2,28
    6050:	e13ffc17 	ldw	r4,-16(fp)
    6054:	200d883a 	mov	r6,r4
    6058:	100b883a 	mov	r5,r2
    605c:	1809883a 	mov	r4,r3
    6060:	000535c0 	call	535c <trezor_sha1_Transform>

			/* And prepare the last transform: */
			usedspace = 0;
    6064:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);
    6068:	e0bffc17 	ldw	r2,-16(fp)
    606c:	10c00704 	addi	r3,r2,28
    6070:	e0bff517 	ldw	r2,-44(fp)
    6074:	1889883a 	add	r4,r3,r2
    6078:	00c00e04 	movi	r3,56
    607c:	e0bff517 	ldw	r2,-44(fp)
    6080:	1885c83a 	sub	r2,r3,r2
    6084:	100b883a 	mov	r5,r2
    6088:	00017c40 	call	17c4 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    608c:	e03ff715 	stw	zero,-36(fp)
    6090:	00002006 	br	6114 <trezor_sha1_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    6094:	e0fffc17 	ldw	r3,-16(fp)
    6098:	e0bff717 	ldw	r2,-36(fp)
    609c:	108001c4 	addi	r2,r2,7
    60a0:	1085883a 	add	r2,r2,r2
    60a4:	1085883a 	add	r2,r2,r2
    60a8:	1885883a 	add	r2,r3,r2
    60ac:	10800017 	ldw	r2,0(r2)
    60b0:	e0bffa15 	stw	r2,-24(fp)
    60b4:	e0bffa17 	ldw	r2,-24(fp)
    60b8:	1004143a 	roli	r2,r2,16
    60bc:	e0bffa15 	stw	r2,-24(fp)
    60c0:	e0fffa17 	ldw	r3,-24(fp)
    60c4:	00bfc074 	movhi	r2,65281
    60c8:	10bfc004 	addi	r2,r2,-256
    60cc:	1884703a 	and	r2,r3,r2
    60d0:	1006d23a 	srli	r3,r2,8
    60d4:	e13ffa17 	ldw	r4,-24(fp)
    60d8:	00803ff4 	movhi	r2,255
    60dc:	10803fc4 	addi	r2,r2,255
    60e0:	2084703a 	and	r2,r4,r2
    60e4:	1004923a 	slli	r2,r2,8
    60e8:	1886b03a 	or	r3,r3,r2
    60ec:	e13ffc17 	ldw	r4,-16(fp)
    60f0:	e0bff717 	ldw	r2,-36(fp)
    60f4:	108001c4 	addi	r2,r2,7
    60f8:	1085883a 	add	r2,r2,r2
    60fc:	1085883a 	add	r2,r2,r2
    6100:	2085883a 	add	r2,r4,r2
    6104:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA1_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    6108:	e0bff717 	ldw	r2,-36(fp)
    610c:	10800044 	addi	r2,r2,1
    6110:	e0bff715 	stw	r2,-36(fp)
    6114:	e0bff717 	ldw	r2,-36(fp)
    6118:	10800390 	cmplti	r2,r2,14
    611c:	103fdd1e 	bne	r2,zero,6094 <__alt_mem_epcs_flash_controller+0xfdffd094>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    6120:	e13ffc17 	ldw	r4,-16(fp)
    6124:	20800517 	ldw	r2,20(r4)
    6128:	20c00617 	ldw	r3,24(r4)
    612c:	1820d83a 	srl	r16,r3,zero
    6130:	0023883a 	mov	r17,zero
    6134:	8007883a 	mov	r3,r16
    6138:	e0bffc17 	ldw	r2,-16(fp)
    613c:	10c01515 	stw	r3,84(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    6140:	e13ffc17 	ldw	r4,-16(fp)
    6144:	20800517 	ldw	r2,20(r4)
    6148:	20c00617 	ldw	r3,24(r4)
    614c:	1007883a 	mov	r3,r2
    6150:	e0bffc17 	ldw	r2,-16(fp)
    6154:	10c01615 	stw	r3,88(r2)

		/* Final transform: */
		trezor_sha1_Transform(context->state, context->buffer, context->state);
    6158:	e0fffc17 	ldw	r3,-16(fp)
    615c:	e0bffc17 	ldw	r2,-16(fp)
    6160:	10800704 	addi	r2,r2,28
    6164:	e13ffc17 	ldw	r4,-16(fp)
    6168:	200d883a 	mov	r6,r4
    616c:	100b883a 	mov	r5,r2
    6170:	1809883a 	mov	r4,r3
    6174:	000535c0 	call	535c <trezor_sha1_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    6178:	e03ff815 	stw	zero,-32(fp)
    617c:	00001e06 	br	61f8 <trezor_sha1_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    6180:	e0fffc17 	ldw	r3,-16(fp)
    6184:	e0bff817 	ldw	r2,-32(fp)
    6188:	1085883a 	add	r2,r2,r2
    618c:	1085883a 	add	r2,r2,r2
    6190:	1885883a 	add	r2,r3,r2
    6194:	10800017 	ldw	r2,0(r2)
    6198:	e0bffb15 	stw	r2,-20(fp)
    619c:	e0bffb17 	ldw	r2,-20(fp)
    61a0:	1004143a 	roli	r2,r2,16
    61a4:	e0bffb15 	stw	r2,-20(fp)
    61a8:	e0fffb17 	ldw	r3,-20(fp)
    61ac:	00bfc074 	movhi	r2,65281
    61b0:	10bfc004 	addi	r2,r2,-256
    61b4:	1884703a 	and	r2,r3,r2
    61b8:	1006d23a 	srli	r3,r2,8
    61bc:	e13ffb17 	ldw	r4,-20(fp)
    61c0:	00803ff4 	movhi	r2,255
    61c4:	10803fc4 	addi	r2,r2,255
    61c8:	2084703a 	and	r2,r4,r2
    61cc:	1004923a 	slli	r2,r2,8
    61d0:	1886b03a 	or	r3,r3,r2
    61d4:	e13ffc17 	ldw	r4,-16(fp)
    61d8:	e0bff817 	ldw	r2,-32(fp)
    61dc:	1085883a 	add	r2,r2,r2
    61e0:	1085883a 	add	r2,r2,r2
    61e4:	2085883a 	add	r2,r4,r2
    61e8:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		trezor_sha1_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 5; j++) {
    61ec:	e0bff817 	ldw	r2,-32(fp)
    61f0:	10800044 	addi	r2,r2,1
    61f4:	e0bff815 	stw	r2,-32(fp)
    61f8:	e0bff817 	ldw	r2,-32(fp)
    61fc:	10800150 	cmplti	r2,r2,5
    6200:	103fdf1e 	bne	r2,zero,6180 <__alt_mem_epcs_flash_controller+0xfdffd180>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA1_DIGEST_LENGTH);
    6204:	e0bffc17 	ldw	r2,-16(fp)
    6208:	01800504 	movi	r6,20
    620c:	100b883a 	mov	r5,r2
    6210:	e13ffd17 	ldw	r4,-12(fp)
    6214:	00095dc0 	call	95dc <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA1_CTX));
    6218:	01401704 	movi	r5,92
    621c:	e13ffc17 	ldw	r4,-16(fp)
    6220:	00017c40 	call	17c4 <memzero>
	usedspace = 0;
    6224:	e03ff515 	stw	zero,-44(fp)
}
    6228:	0001883a 	nop
    622c:	e6fffe04 	addi	sp,fp,-8
    6230:	dfc00317 	ldw	ra,12(sp)
    6234:	df000217 	ldw	fp,8(sp)
    6238:	dc400117 	ldw	r17,4(sp)
    623c:	dc000017 	ldw	r16,0(sp)
    6240:	dec00404 	addi	sp,sp,16
    6244:	f800283a 	ret

00006248 <trezor_sha1_End>:

char *trezor_sha1_End(SHA1_CTX* context, char buffer[]) {
    6248:	defff504 	addi	sp,sp,-44
    624c:	dfc00a15 	stw	ra,40(sp)
    6250:	df000915 	stw	fp,36(sp)
    6254:	df000904 	addi	fp,sp,36
    6258:	e13ffe15 	stw	r4,-8(fp)
    625c:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA1_DIGEST_LENGTH], *d = digest;
    6260:	e0bff904 	addi	r2,fp,-28
    6264:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
    6268:	e0bfff17 	ldw	r2,-4(fp)
    626c:	10002926 	beq	r2,zero,6314 <trezor_sha1_End+0xcc>
		trezor_sha1_Final(context, digest);
    6270:	e0bff904 	addi	r2,fp,-28
    6274:	100b883a 	mov	r5,r2
    6278:	e13ffe17 	ldw	r4,-8(fp)
    627c:	0005f100 	call	5f10 <trezor_sha1_Final>

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    6280:	e03ff815 	stw	zero,-32(fp)
    6284:	00001d06 	br	62fc <trezor_sha1_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    6288:	e0bfff17 	ldw	r2,-4(fp)
    628c:	10c00044 	addi	r3,r2,1
    6290:	e0ffff15 	stw	r3,-4(fp)
    6294:	d1200017 	ldw	r4,-32768(gp)
    6298:	e0fff717 	ldw	r3,-36(fp)
    629c:	18c00003 	ldbu	r3,0(r3)
    62a0:	18c03fcc 	andi	r3,r3,255
    62a4:	1806d13a 	srli	r3,r3,4
    62a8:	18c03fcc 	andi	r3,r3,255
    62ac:	20c7883a 	add	r3,r4,r3
    62b0:	18c00003 	ldbu	r3,0(r3)
    62b4:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    62b8:	e0bfff17 	ldw	r2,-4(fp)
    62bc:	10c00044 	addi	r3,r2,1
    62c0:	e0ffff15 	stw	r3,-4(fp)
    62c4:	d1200017 	ldw	r4,-32768(gp)
    62c8:	e0fff717 	ldw	r3,-36(fp)
    62cc:	18c00003 	ldbu	r3,0(r3)
    62d0:	18c03fcc 	andi	r3,r3,255
    62d4:	18c003cc 	andi	r3,r3,15
    62d8:	20c7883a 	add	r3,r4,r3
    62dc:	18c00003 	ldbu	r3,0(r3)
    62e0:	10c00005 	stb	r3,0(r2)
			d++;
    62e4:	e0bff717 	ldw	r2,-36(fp)
    62e8:	10800044 	addi	r2,r2,1
    62ec:	e0bff715 	stw	r2,-36(fp)
	int		i;

	if (buffer != (char*)0) {
		trezor_sha1_Final(context, digest);

		for (i = 0; i < SHA1_DIGEST_LENGTH; i++) {
    62f0:	e0bff817 	ldw	r2,-32(fp)
    62f4:	10800044 	addi	r2,r2,1
    62f8:	e0bff815 	stw	r2,-32(fp)
    62fc:	e0bff817 	ldw	r2,-32(fp)
    6300:	10800510 	cmplti	r2,r2,20
    6304:	103fe01e 	bne	r2,zero,6288 <__alt_mem_epcs_flash_controller+0xfdffd288>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    6308:	e0bfff17 	ldw	r2,-4(fp)
    630c:	10000005 	stb	zero,0(r2)
    6310:	00000306 	br	6320 <trezor_sha1_End+0xd8>
	} else {
		memzero(context, sizeof(SHA1_CTX));
    6314:	01401704 	movi	r5,92
    6318:	e13ffe17 	ldw	r4,-8(fp)
    631c:	00017c40 	call	17c4 <memzero>
	}
	memzero(digest, SHA1_DIGEST_LENGTH);
    6320:	e0bff904 	addi	r2,fp,-28
    6324:	01400504 	movi	r5,20
    6328:	1009883a 	mov	r4,r2
    632c:	00017c40 	call	17c4 <memzero>
	return buffer;
    6330:	e0bfff17 	ldw	r2,-4(fp)
}
    6334:	e037883a 	mov	sp,fp
    6338:	dfc00117 	ldw	ra,4(sp)
    633c:	df000017 	ldw	fp,0(sp)
    6340:	dec00204 	addi	sp,sp,8
    6344:	f800283a 	ret

00006348 <trezor_sha1_Raw>:

void trezor_sha1_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA1_DIGEST_LENGTH]) {
    6348:	deffe404 	addi	sp,sp,-112
    634c:	dfc01b15 	stw	ra,108(sp)
    6350:	df001a15 	stw	fp,104(sp)
    6354:	df001a04 	addi	fp,sp,104
    6358:	e13ffd15 	stw	r4,-12(fp)
    635c:	e17ffe15 	stw	r5,-8(fp)
    6360:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;
	trezor_sha1_Init(&context);
    6364:	e13fe604 	addi	r4,fp,-104
    6368:	00052f80 	call	52f8 <trezor_sha1_Init>
	trezor_sha1_Update(&context, data, len);
    636c:	e1bffe17 	ldw	r6,-8(fp)
    6370:	e17ffd17 	ldw	r5,-12(fp)
    6374:	e13fe604 	addi	r4,fp,-104
    6378:	0005b080 	call	5b08 <trezor_sha1_Update>
	trezor_sha1_Final(&context, digest);
    637c:	e17fff17 	ldw	r5,-4(fp)
    6380:	e13fe604 	addi	r4,fp,-104
    6384:	0005f100 	call	5f10 <trezor_sha1_Final>
}
    6388:	0001883a 	nop
    638c:	e037883a 	mov	sp,fp
    6390:	dfc00117 	ldw	ra,4(sp)
    6394:	df000017 	ldw	fp,0(sp)
    6398:	dec00204 	addi	sp,sp,8
    639c:	f800283a 	ret

000063a0 <trezor_sha1_Data>:

char* trezor_sha1_Data(const sha2_byte* data, size_t len, char digest[SHA1_DIGEST_STRING_LENGTH]) {
    63a0:	deffe404 	addi	sp,sp,-112
    63a4:	dfc01b15 	stw	ra,108(sp)
    63a8:	df001a15 	stw	fp,104(sp)
    63ac:	df001a04 	addi	fp,sp,104
    63b0:	e13ffd15 	stw	r4,-12(fp)
    63b4:	e17ffe15 	stw	r5,-8(fp)
    63b8:	e1bfff15 	stw	r6,-4(fp)
	SHA1_CTX	context;

	trezor_sha1_Init(&context);
    63bc:	e13fe604 	addi	r4,fp,-104
    63c0:	00052f80 	call	52f8 <trezor_sha1_Init>
	trezor_sha1_Update(&context, data, len);
    63c4:	e1bffe17 	ldw	r6,-8(fp)
    63c8:	e17ffd17 	ldw	r5,-12(fp)
    63cc:	e13fe604 	addi	r4,fp,-104
    63d0:	0005b080 	call	5b08 <trezor_sha1_Update>
	return trezor_sha1_End(&context, digest);
    63d4:	e17fff17 	ldw	r5,-4(fp)
    63d8:	e13fe604 	addi	r4,fp,-104
    63dc:	00062480 	call	6248 <trezor_sha1_End>
}
    63e0:	e037883a 	mov	sp,fp
    63e4:	dfc00117 	ldw	ra,4(sp)
    63e8:	df000017 	ldw	fp,0(sp)
    63ec:	dec00204 	addi	sp,sp,8
    63f0:	f800283a 	ret

000063f4 <trezor_sha256_Init>:

/*** SHA-256: *********************************************************/
void trezor_sha256_Init(SHA256_CTX* context) {
    63f4:	defffd04 	addi	sp,sp,-12
    63f8:	dfc00215 	stw	ra,8(sp)
    63fc:	df000115 	stw	fp,4(sp)
    6400:	df000104 	addi	fp,sp,4
    6404:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA256_CTX*)0) {
    6408:	e0bfff17 	ldw	r2,-4(fp)
    640c:	10000f26 	beq	r2,zero,644c <trezor_sha256_Init+0x58>
		return;
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
    6410:	e0bfff17 	ldw	r2,-4(fp)
    6414:	01800804 	movi	r6,32
    6418:	01400074 	movhi	r5,1
    641c:	2959cf04 	addi	r5,r5,26428
    6420:	1009883a 	mov	r4,r2
    6424:	00095dc0 	call	95dc <memcpy>
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
    6428:	e0bfff17 	ldw	r2,-4(fp)
    642c:	10800a04 	addi	r2,r2,40
    6430:	01401004 	movi	r5,64
    6434:	1009883a 	mov	r4,r2
    6438:	00017c40 	call	17c4 <memzero>
	context->bitcount = 0;
    643c:	e0bfff17 	ldw	r2,-4(fp)
    6440:	10000815 	stw	zero,32(r2)
    6444:	10000915 	stw	zero,36(r2)
    6448:	00000106 	br	6450 <trezor_sha256_Init+0x5c>
}

/*** SHA-256: *********************************************************/
void trezor_sha256_Init(SHA256_CTX* context) {
	if (context == (SHA256_CTX*)0) {
		return;
    644c:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
	memzero(context->buffer, SHA256_BLOCK_LENGTH);
	context->bitcount = 0;
}
    6450:	e037883a 	mov	sp,fp
    6454:	dfc00117 	ldw	ra,4(sp)
    6458:	df000017 	ldw	fp,0(sp)
    645c:	dec00204 	addi	sp,sp,8
    6460:	f800283a 	ret

00006464 <trezor_sha256_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void trezor_sha256_Transform(const sha2_word32* state_in, const sha2_word32* data, sha2_word32* state_out) {
    6464:	deffdf04 	addi	sp,sp,-132
    6468:	df002015 	stw	fp,128(sp)
    646c:	df002004 	addi	fp,sp,128
    6470:	e13ffd15 	stw	r4,-12(fp)
    6474:	e17ffe15 	stw	r5,-8(fp)
    6478:	e1bfff15 	stw	r6,-4(fp)
	sha2_word32	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word32	T1, T2, W256[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    647c:	e0bffd17 	ldw	r2,-12(fp)
    6480:	10800017 	ldw	r2,0(r2)
    6484:	e0bfe015 	stw	r2,-128(fp)
	b = state_in[1];
    6488:	e0bffd17 	ldw	r2,-12(fp)
    648c:	10800117 	ldw	r2,4(r2)
    6490:	e0bfe115 	stw	r2,-124(fp)
	c = state_in[2];
    6494:	e0bffd17 	ldw	r2,-12(fp)
    6498:	10800217 	ldw	r2,8(r2)
    649c:	e0bfe215 	stw	r2,-120(fp)
	d = state_in[3];
    64a0:	e0bffd17 	ldw	r2,-12(fp)
    64a4:	10800317 	ldw	r2,12(r2)
    64a8:	e0bfe315 	stw	r2,-116(fp)
	e = state_in[4];
    64ac:	e0bffd17 	ldw	r2,-12(fp)
    64b0:	10800417 	ldw	r2,16(r2)
    64b4:	e0bfe415 	stw	r2,-112(fp)
	f = state_in[5];
    64b8:	e0bffd17 	ldw	r2,-12(fp)
    64bc:	10800517 	ldw	r2,20(r2)
    64c0:	e0bfe515 	stw	r2,-108(fp)
	g = state_in[6];
    64c4:	e0bffd17 	ldw	r2,-12(fp)
    64c8:	10800617 	ldw	r2,24(r2)
    64cc:	e0bfe615 	stw	r2,-104(fp)
	h = state_in[7];
    64d0:	e0bffd17 	ldw	r2,-12(fp)
    64d4:	10800717 	ldw	r2,28(r2)
    64d8:	e0bfe715 	stw	r2,-100(fp)

	j = 0;
    64dc:	e03fe815 	stw	zero,-96(fp)
	do {
		/* Apply the SHA-256 compression function to update a..h with copy */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
    64e0:	e0ffe417 	ldw	r3,-112(fp)
    64e4:	00800184 	movi	r2,6
    64e8:	1886583a 	ror	r3,r3,r2
    64ec:	e13fe417 	ldw	r4,-112(fp)
    64f0:	008002c4 	movi	r2,11
    64f4:	2084583a 	ror	r2,r4,r2
    64f8:	1886f03a 	xor	r3,r3,r2
    64fc:	e0bfe417 	ldw	r2,-112(fp)
    6500:	100411fa 	roli	r2,r2,7
    6504:	1886f03a 	xor	r3,r3,r2
    6508:	e0bfe717 	ldw	r2,-100(fp)
    650c:	1887883a 	add	r3,r3,r2
    6510:	e13fe417 	ldw	r4,-112(fp)
    6514:	e0bfe517 	ldw	r2,-108(fp)
    6518:	2088703a 	and	r4,r4,r2
    651c:	e0bfe417 	ldw	r2,-112(fp)
    6520:	008a303a 	nor	r5,zero,r2
    6524:	e0bfe617 	ldw	r2,-104(fp)
    6528:	2884703a 	and	r2,r5,r2
    652c:	2084f03a 	xor	r2,r4,r2
    6530:	1889883a 	add	r4,r3,r2
    6534:	00800074 	movhi	r2,1
    6538:	10998f04 	addi	r2,r2,26172
    653c:	e0ffe817 	ldw	r3,-96(fp)
    6540:	18c7883a 	add	r3,r3,r3
    6544:	18c7883a 	add	r3,r3,r3
    6548:	10c5883a 	add	r2,r2,r3
    654c:	10800017 	ldw	r2,0(r2)
    6550:	2087883a 	add	r3,r4,r2
    6554:	e0bffe17 	ldw	r2,-8(fp)
    6558:	11000104 	addi	r4,r2,4
    655c:	e13ffe15 	stw	r4,-8(fp)
    6560:	11000017 	ldw	r4,0(r2)
    6564:	e0bfe817 	ldw	r2,-96(fp)
    6568:	1085883a 	add	r2,r2,r2
    656c:	1085883a 	add	r2,r2,r2
    6570:	e17fe004 	addi	r5,fp,-128
    6574:	2885883a 	add	r2,r5,r2
    6578:	10800d04 	addi	r2,r2,52
    657c:	11000015 	stw	r4,0(r2)
    6580:	e0bfe817 	ldw	r2,-96(fp)
    6584:	1085883a 	add	r2,r2,r2
    6588:	1085883a 	add	r2,r2,r2
    658c:	e1bfe004 	addi	r6,fp,-128
    6590:	3085883a 	add	r2,r6,r2
    6594:	10800d04 	addi	r2,r2,52
    6598:	10800017 	ldw	r2,0(r2)
    659c:	1885883a 	add	r2,r3,r2
    65a0:	e0bfe915 	stw	r2,-92(fp)
		T2 = Sigma0_256(a) + Maj(a, b, c);
    65a4:	e0ffe017 	ldw	r3,-128(fp)
    65a8:	00800084 	movi	r2,2
    65ac:	1886583a 	ror	r3,r3,r2
    65b0:	e13fe017 	ldw	r4,-128(fp)
    65b4:	00800344 	movi	r2,13
    65b8:	2084583a 	ror	r2,r4,r2
    65bc:	1886f03a 	xor	r3,r3,r2
    65c0:	e0bfe017 	ldw	r2,-128(fp)
    65c4:	100412ba 	roli	r2,r2,10
    65c8:	1886f03a 	xor	r3,r3,r2
    65cc:	e13fe017 	ldw	r4,-128(fp)
    65d0:	e0bfe117 	ldw	r2,-124(fp)
    65d4:	2088703a 	and	r4,r4,r2
    65d8:	e17fe017 	ldw	r5,-128(fp)
    65dc:	e0bfe217 	ldw	r2,-120(fp)
    65e0:	2884703a 	and	r2,r5,r2
    65e4:	2088f03a 	xor	r4,r4,r2
    65e8:	e17fe117 	ldw	r5,-124(fp)
    65ec:	e0bfe217 	ldw	r2,-120(fp)
    65f0:	2884703a 	and	r2,r5,r2
    65f4:	2084f03a 	xor	r2,r4,r2
    65f8:	1885883a 	add	r2,r3,r2
    65fc:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    6600:	e0bfe617 	ldw	r2,-104(fp)
    6604:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    6608:	e0bfe517 	ldw	r2,-108(fp)
    660c:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    6610:	e0bfe417 	ldw	r2,-112(fp)
    6614:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    6618:	e0ffe317 	ldw	r3,-116(fp)
    661c:	e0bfe917 	ldw	r2,-92(fp)
    6620:	1885883a 	add	r2,r3,r2
    6624:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    6628:	e0bfe217 	ldw	r2,-120(fp)
    662c:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    6630:	e0bfe117 	ldw	r2,-124(fp)
    6634:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    6638:	e0bfe017 	ldw	r2,-128(fp)
    663c:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    6640:	e0ffe917 	ldw	r3,-92(fp)
    6644:	e0bfea17 	ldw	r2,-88(fp)
    6648:	1885883a 	add	r2,r3,r2
    664c:	e0bfe015 	stw	r2,-128(fp)

		j++;
    6650:	e0bfe817 	ldw	r2,-96(fp)
    6654:	10800044 	addi	r2,r2,1
    6658:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 16);
    665c:	e0bfe817 	ldw	r2,-96(fp)
    6660:	10800410 	cmplti	r2,r2,16
    6664:	103f9e1e 	bne	r2,zero,64e0 <__alt_mem_epcs_flash_controller+0xfdffd4e0>

	do {
		/* Part of the message block expansion: */
		s0 = W256[(j+1)&0x0f];
    6668:	e0bfe817 	ldw	r2,-96(fp)
    666c:	10800044 	addi	r2,r2,1
    6670:	108003cc 	andi	r2,r2,15
    6674:	1085883a 	add	r2,r2,r2
    6678:	1085883a 	add	r2,r2,r2
    667c:	e0ffe004 	addi	r3,fp,-128
    6680:	1885883a 	add	r2,r3,r2
    6684:	10800d04 	addi	r2,r2,52
    6688:	10800017 	ldw	r2,0(r2)
    668c:	e0bfeb15 	stw	r2,-84(fp)
		s0 = sigma0_256(s0);
    6690:	e0ffeb17 	ldw	r3,-84(fp)
    6694:	008001c4 	movi	r2,7
    6698:	1886583a 	ror	r3,r3,r2
    669c:	e0bfeb17 	ldw	r2,-84(fp)
    66a0:	100413ba 	roli	r2,r2,14
    66a4:	1886f03a 	xor	r3,r3,r2
    66a8:	e0bfeb17 	ldw	r2,-84(fp)
    66ac:	1004d0fa 	srli	r2,r2,3
    66b0:	1884f03a 	xor	r2,r3,r2
    66b4:	e0bfeb15 	stw	r2,-84(fp)
		s1 = W256[(j+14)&0x0f];	
    66b8:	e0bfe817 	ldw	r2,-96(fp)
    66bc:	10800384 	addi	r2,r2,14
    66c0:	108003cc 	andi	r2,r2,15
    66c4:	1085883a 	add	r2,r2,r2
    66c8:	1085883a 	add	r2,r2,r2
    66cc:	e13fe004 	addi	r4,fp,-128
    66d0:	2085883a 	add	r2,r4,r2
    66d4:	10800d04 	addi	r2,r2,52
    66d8:	10800017 	ldw	r2,0(r2)
    66dc:	e0bfec15 	stw	r2,-80(fp)
		s1 = sigma1_256(s1);
    66e0:	e0bfec17 	ldw	r2,-80(fp)
    66e4:	100613fa 	roli	r3,r2,15
    66e8:	e0bfec17 	ldw	r2,-80(fp)
    66ec:	1004137a 	roli	r2,r2,13
    66f0:	1886f03a 	xor	r3,r3,r2
    66f4:	e0bfec17 	ldw	r2,-80(fp)
    66f8:	1004d2ba 	srli	r2,r2,10
    66fc:	1884f03a 	xor	r2,r3,r2
    6700:	e0bfec15 	stw	r2,-80(fp)

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    6704:	e0ffe417 	ldw	r3,-112(fp)
    6708:	00800184 	movi	r2,6
    670c:	1886583a 	ror	r3,r3,r2
    6710:	e13fe417 	ldw	r4,-112(fp)
    6714:	008002c4 	movi	r2,11
    6718:	2084583a 	ror	r2,r4,r2
    671c:	1886f03a 	xor	r3,r3,r2
    6720:	e0bfe417 	ldw	r2,-112(fp)
    6724:	100411fa 	roli	r2,r2,7
    6728:	1886f03a 	xor	r3,r3,r2
    672c:	e0bfe717 	ldw	r2,-100(fp)
    6730:	1887883a 	add	r3,r3,r2
    6734:	e13fe417 	ldw	r4,-112(fp)
    6738:	e0bfe517 	ldw	r2,-108(fp)
    673c:	2088703a 	and	r4,r4,r2
    6740:	e0bfe417 	ldw	r2,-112(fp)
    6744:	008a303a 	nor	r5,zero,r2
    6748:	e0bfe617 	ldw	r2,-104(fp)
    674c:	2884703a 	and	r2,r5,r2
    6750:	2084f03a 	xor	r2,r4,r2
    6754:	1889883a 	add	r4,r3,r2
    6758:	00800074 	movhi	r2,1
    675c:	10998f04 	addi	r2,r2,26172
    6760:	e0ffe817 	ldw	r3,-96(fp)
    6764:	18c7883a 	add	r3,r3,r3
    6768:	18c7883a 	add	r3,r3,r3
    676c:	10c5883a 	add	r2,r2,r3
    6770:	10800017 	ldw	r2,0(r2)
    6774:	2089883a 	add	r4,r4,r2
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
    6778:	e0bfe817 	ldw	r2,-96(fp)
    677c:	108003cc 	andi	r2,r2,15
    6780:	e0ffe817 	ldw	r3,-96(fp)
    6784:	18c003cc 	andi	r3,r3,15
    6788:	18c7883a 	add	r3,r3,r3
    678c:	18c7883a 	add	r3,r3,r3
    6790:	e17fe004 	addi	r5,fp,-128
    6794:	28c7883a 	add	r3,r5,r3
    6798:	18c00d04 	addi	r3,r3,52
    679c:	19400017 	ldw	r5,0(r3)
    67a0:	e0ffe817 	ldw	r3,-96(fp)
    67a4:	18c00244 	addi	r3,r3,9
    67a8:	18c003cc 	andi	r3,r3,15
    67ac:	18c7883a 	add	r3,r3,r3
    67b0:	18c7883a 	add	r3,r3,r3
    67b4:	e1bfe004 	addi	r6,fp,-128
    67b8:	30c7883a 	add	r3,r6,r3
    67bc:	18c00d04 	addi	r3,r3,52
    67c0:	19800017 	ldw	r6,0(r3)
    67c4:	e0ffec17 	ldw	r3,-80(fp)
    67c8:	30cd883a 	add	r6,r6,r3
    67cc:	e0ffeb17 	ldw	r3,-84(fp)
    67d0:	30c7883a 	add	r3,r6,r3
    67d4:	28cb883a 	add	r5,r5,r3
    67d8:	1087883a 	add	r3,r2,r2
    67dc:	18c7883a 	add	r3,r3,r3
    67e0:	e1bfe004 	addi	r6,fp,-128
    67e4:	30c7883a 	add	r3,r6,r3
    67e8:	18c00d04 	addi	r3,r3,52
    67ec:	19400015 	stw	r5,0(r3)
    67f0:	1085883a 	add	r2,r2,r2
    67f4:	1085883a 	add	r2,r2,r2
    67f8:	e0ffe004 	addi	r3,fp,-128
    67fc:	1885883a 	add	r2,r3,r2
    6800:	10800d04 	addi	r2,r2,52
    6804:	10800017 	ldw	r2,0(r2)
		s0 = sigma0_256(s0);
		s1 = W256[(j+14)&0x0f];	
		s1 = sigma1_256(s1);

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
    6808:	2085883a 	add	r2,r4,r2
    680c:	e0bfe915 	stw	r2,-92(fp)
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
		T2 = Sigma0_256(a) + Maj(a, b, c);
    6810:	e0ffe017 	ldw	r3,-128(fp)
    6814:	00800084 	movi	r2,2
    6818:	1886583a 	ror	r3,r3,r2
    681c:	e13fe017 	ldw	r4,-128(fp)
    6820:	00800344 	movi	r2,13
    6824:	2084583a 	ror	r2,r4,r2
    6828:	1886f03a 	xor	r3,r3,r2
    682c:	e0bfe017 	ldw	r2,-128(fp)
    6830:	100412ba 	roli	r2,r2,10
    6834:	1886f03a 	xor	r3,r3,r2
    6838:	e13fe017 	ldw	r4,-128(fp)
    683c:	e0bfe117 	ldw	r2,-124(fp)
    6840:	2088703a 	and	r4,r4,r2
    6844:	e17fe017 	ldw	r5,-128(fp)
    6848:	e0bfe217 	ldw	r2,-120(fp)
    684c:	2884703a 	and	r2,r5,r2
    6850:	2088f03a 	xor	r4,r4,r2
    6854:	e17fe117 	ldw	r5,-124(fp)
    6858:	e0bfe217 	ldw	r2,-120(fp)
    685c:	2884703a 	and	r2,r5,r2
    6860:	2084f03a 	xor	r2,r4,r2
    6864:	1885883a 	add	r2,r3,r2
    6868:	e0bfea15 	stw	r2,-88(fp)
		h = g;
    686c:	e0bfe617 	ldw	r2,-104(fp)
    6870:	e0bfe715 	stw	r2,-100(fp)
		g = f;
    6874:	e0bfe517 	ldw	r2,-108(fp)
    6878:	e0bfe615 	stw	r2,-104(fp)
		f = e;
    687c:	e0bfe417 	ldw	r2,-112(fp)
    6880:	e0bfe515 	stw	r2,-108(fp)
		e = d + T1;
    6884:	e0ffe317 	ldw	r3,-116(fp)
    6888:	e0bfe917 	ldw	r2,-92(fp)
    688c:	1885883a 	add	r2,r3,r2
    6890:	e0bfe415 	stw	r2,-112(fp)
		d = c;
    6894:	e0bfe217 	ldw	r2,-120(fp)
    6898:	e0bfe315 	stw	r2,-116(fp)
		c = b;
    689c:	e0bfe117 	ldw	r2,-124(fp)
    68a0:	e0bfe215 	stw	r2,-120(fp)
		b = a;
    68a4:	e0bfe017 	ldw	r2,-128(fp)
    68a8:	e0bfe115 	stw	r2,-124(fp)
		a = T1 + T2;
    68ac:	e0ffe917 	ldw	r3,-92(fp)
    68b0:	e0bfea17 	ldw	r2,-88(fp)
    68b4:	1885883a 	add	r2,r3,r2
    68b8:	e0bfe015 	stw	r2,-128(fp)

		j++;
    68bc:	e0bfe817 	ldw	r2,-96(fp)
    68c0:	10800044 	addi	r2,r2,1
    68c4:	e0bfe815 	stw	r2,-96(fp)
	} while (j < 64);
    68c8:	e0bfe817 	ldw	r2,-96(fp)
    68cc:	10801010 	cmplti	r2,r2,64
    68d0:	103f651e 	bne	r2,zero,6668 <__alt_mem_epcs_flash_controller+0xfdffd668>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    68d4:	e0bffd17 	ldw	r2,-12(fp)
    68d8:	10c00017 	ldw	r3,0(r2)
    68dc:	e0bfe017 	ldw	r2,-128(fp)
    68e0:	1887883a 	add	r3,r3,r2
    68e4:	e0bfff17 	ldw	r2,-4(fp)
    68e8:	10c00015 	stw	r3,0(r2)
	state_out[1] = state_in[1] + b;
    68ec:	e0bfff17 	ldw	r2,-4(fp)
    68f0:	10800104 	addi	r2,r2,4
    68f4:	e0fffd17 	ldw	r3,-12(fp)
    68f8:	18c00104 	addi	r3,r3,4
    68fc:	19000017 	ldw	r4,0(r3)
    6900:	e0ffe117 	ldw	r3,-124(fp)
    6904:	20c7883a 	add	r3,r4,r3
    6908:	10c00015 	stw	r3,0(r2)
	state_out[2] = state_in[2] + c;
    690c:	e0bfff17 	ldw	r2,-4(fp)
    6910:	10800204 	addi	r2,r2,8
    6914:	e0fffd17 	ldw	r3,-12(fp)
    6918:	18c00204 	addi	r3,r3,8
    691c:	19000017 	ldw	r4,0(r3)
    6920:	e0ffe217 	ldw	r3,-120(fp)
    6924:	20c7883a 	add	r3,r4,r3
    6928:	10c00015 	stw	r3,0(r2)
	state_out[3] = state_in[3] + d;
    692c:	e0bfff17 	ldw	r2,-4(fp)
    6930:	10800304 	addi	r2,r2,12
    6934:	e0fffd17 	ldw	r3,-12(fp)
    6938:	18c00304 	addi	r3,r3,12
    693c:	19000017 	ldw	r4,0(r3)
    6940:	e0ffe317 	ldw	r3,-116(fp)
    6944:	20c7883a 	add	r3,r4,r3
    6948:	10c00015 	stw	r3,0(r2)
	state_out[4] = state_in[4] + e;
    694c:	e0bfff17 	ldw	r2,-4(fp)
    6950:	10800404 	addi	r2,r2,16
    6954:	e0fffd17 	ldw	r3,-12(fp)
    6958:	18c00404 	addi	r3,r3,16
    695c:	19000017 	ldw	r4,0(r3)
    6960:	e0ffe417 	ldw	r3,-112(fp)
    6964:	20c7883a 	add	r3,r4,r3
    6968:	10c00015 	stw	r3,0(r2)
	state_out[5] = state_in[5] + f;
    696c:	e0bfff17 	ldw	r2,-4(fp)
    6970:	10800504 	addi	r2,r2,20
    6974:	e0fffd17 	ldw	r3,-12(fp)
    6978:	18c00504 	addi	r3,r3,20
    697c:	19000017 	ldw	r4,0(r3)
    6980:	e0ffe517 	ldw	r3,-108(fp)
    6984:	20c7883a 	add	r3,r4,r3
    6988:	10c00015 	stw	r3,0(r2)
	state_out[6] = state_in[6] + g;
    698c:	e0bfff17 	ldw	r2,-4(fp)
    6990:	10800604 	addi	r2,r2,24
    6994:	e0fffd17 	ldw	r3,-12(fp)
    6998:	18c00604 	addi	r3,r3,24
    699c:	19000017 	ldw	r4,0(r3)
    69a0:	e0ffe617 	ldw	r3,-104(fp)
    69a4:	20c7883a 	add	r3,r4,r3
    69a8:	10c00015 	stw	r3,0(r2)
	state_out[7] = state_in[7] + h;
    69ac:	e0bfff17 	ldw	r2,-4(fp)
    69b0:	10800704 	addi	r2,r2,28
    69b4:	e0fffd17 	ldw	r3,-12(fp)
    69b8:	18c00704 	addi	r3,r3,28
    69bc:	19000017 	ldw	r4,0(r3)
    69c0:	e0ffe717 	ldw	r3,-100(fp)
    69c4:	20c7883a 	add	r3,r4,r3
    69c8:	10c00015 	stw	r3,0(r2)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    69cc:	e03fea15 	stw	zero,-88(fp)
    69d0:	e0bfea17 	ldw	r2,-88(fp)
    69d4:	e0bfe915 	stw	r2,-92(fp)
    69d8:	e0bfe917 	ldw	r2,-92(fp)
    69dc:	e0bfe715 	stw	r2,-100(fp)
    69e0:	e0bfe717 	ldw	r2,-100(fp)
    69e4:	e0bfe615 	stw	r2,-104(fp)
    69e8:	e0bfe617 	ldw	r2,-104(fp)
    69ec:	e0bfe515 	stw	r2,-108(fp)
    69f0:	e0bfe517 	ldw	r2,-108(fp)
    69f4:	e0bfe415 	stw	r2,-112(fp)
    69f8:	e0bfe417 	ldw	r2,-112(fp)
    69fc:	e0bfe315 	stw	r2,-116(fp)
    6a00:	e0bfe317 	ldw	r2,-116(fp)
    6a04:	e0bfe215 	stw	r2,-120(fp)
    6a08:	e0bfe217 	ldw	r2,-120(fp)
    6a0c:	e0bfe115 	stw	r2,-124(fp)
    6a10:	e0bfe117 	ldw	r2,-124(fp)
    6a14:	e0bfe015 	stw	r2,-128(fp)
}
    6a18:	0001883a 	nop
    6a1c:	e037883a 	mov	sp,fp
    6a20:	df000017 	ldw	fp,0(sp)
    6a24:	dec00104 	addi	sp,sp,4
    6a28:	f800283a 	ret

00006a2c <trezor_sha256_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void trezor_sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
    6a2c:	deffef04 	addi	sp,sp,-68
    6a30:	dfc01015 	stw	ra,64(sp)
    6a34:	df000f15 	stw	fp,60(sp)
    6a38:	dd400e15 	stw	r21,56(sp)
    6a3c:	dd000d15 	stw	r20,52(sp)
    6a40:	dcc00c15 	stw	r19,48(sp)
    6a44:	dc800b15 	stw	r18,44(sp)
    6a48:	dc400a15 	stw	r17,40(sp)
    6a4c:	dc000915 	stw	r16,36(sp)
    6a50:	df000f04 	addi	fp,sp,60
    6a54:	e13ff715 	stw	r4,-36(fp)
    6a58:	e17ff815 	stw	r5,-32(fp)
    6a5c:	e1bff915 	stw	r6,-28(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    6a60:	e0bff917 	ldw	r2,-28(fp)
    6a64:	1000e726 	beq	r2,zero,6e04 <trezor_sha256_Update+0x3d8>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    6a68:	e13ff717 	ldw	r4,-36(fp)
    6a6c:	20800817 	ldw	r2,32(r4)
    6a70:	20c00917 	ldw	r3,36(r4)
    6a74:	1808977a 	slli	r4,r3,29
    6a78:	100ed0fa 	srli	r7,r2,3
    6a7c:	21ceb03a 	or	r7,r4,r7
    6a80:	1810d0fa 	srli	r8,r3,3
    6a84:	3805883a 	mov	r2,r7
    6a88:	10800fcc 	andi	r2,r2,63
    6a8c:	e0bff315 	stw	r2,-52(fp)
	if (usedspace > 0) {
    6a90:	e0bff317 	ldw	r2,-52(fp)
    6a94:	1000bb26 	beq	r2,zero,6d84 <trezor_sha256_Update+0x358>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA256_BLOCK_LENGTH - usedspace;
    6a98:	00c01004 	movi	r3,64
    6a9c:	e0bff317 	ldw	r2,-52(fp)
    6aa0:	1885c83a 	sub	r2,r3,r2
    6aa4:	e0bff415 	stw	r2,-48(fp)

		if (len >= freespace) {
    6aa8:	e0fff917 	ldw	r3,-28(fp)
    6aac:	e0bff417 	ldw	r2,-48(fp)
    6ab0:	18804f36 	bltu	r3,r2,6bf0 <trezor_sha256_Update+0x1c4>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    6ab4:	e0bff717 	ldw	r2,-36(fp)
    6ab8:	10c00a04 	addi	r3,r2,40
    6abc:	e0bff317 	ldw	r2,-52(fp)
    6ac0:	1885883a 	add	r2,r3,r2
    6ac4:	e1bff417 	ldw	r6,-48(fp)
    6ac8:	e17ff817 	ldw	r5,-32(fp)
    6acc:	1009883a 	mov	r4,r2
    6ad0:	00095dc0 	call	95dc <memcpy>
			context->bitcount += freespace << 3;
    6ad4:	e0bff717 	ldw	r2,-36(fp)
    6ad8:	11000817 	ldw	r4,32(r2)
    6adc:	11400917 	ldw	r5,36(r2)
    6ae0:	e0bff417 	ldw	r2,-48(fp)
    6ae4:	100490fa 	slli	r2,r2,3
    6ae8:	1029883a 	mov	r20,r2
    6aec:	002b883a 	mov	r21,zero
    6af0:	2505883a 	add	r2,r4,r20
    6af4:	110d803a 	cmpltu	r6,r2,r4
    6af8:	2d47883a 	add	r3,r5,r21
    6afc:	30c9883a 	add	r4,r6,r3
    6b00:	2007883a 	mov	r3,r4
    6b04:	1009883a 	mov	r4,r2
    6b08:	180b883a 	mov	r5,r3
    6b0c:	e0bff717 	ldw	r2,-36(fp)
    6b10:	11000815 	stw	r4,32(r2)
    6b14:	11400915 	stw	r5,36(r2)
			len -= freespace;
    6b18:	e0fff917 	ldw	r3,-28(fp)
    6b1c:	e0bff417 	ldw	r2,-48(fp)
    6b20:	1885c83a 	sub	r2,r3,r2
    6b24:	e0bff915 	stw	r2,-28(fp)
			data += freespace;
    6b28:	e0fff817 	ldw	r3,-32(fp)
    6b2c:	e0bff417 	ldw	r2,-48(fp)
    6b30:	1885883a 	add	r2,r3,r2
    6b34:	e0bff815 	stw	r2,-32(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    6b38:	e03ff115 	stw	zero,-60(fp)
    6b3c:	00002006 	br	6bc0 <trezor_sha256_Update+0x194>
				REVERSE32(context->buffer[j],context->buffer[j]);
    6b40:	e0fff717 	ldw	r3,-36(fp)
    6b44:	e0bff117 	ldw	r2,-60(fp)
    6b48:	10800284 	addi	r2,r2,10
    6b4c:	1085883a 	add	r2,r2,r2
    6b50:	1085883a 	add	r2,r2,r2
    6b54:	1885883a 	add	r2,r3,r2
    6b58:	10800017 	ldw	r2,0(r2)
    6b5c:	e0bff515 	stw	r2,-44(fp)
    6b60:	e0bff517 	ldw	r2,-44(fp)
    6b64:	1004143a 	roli	r2,r2,16
    6b68:	e0bff515 	stw	r2,-44(fp)
    6b6c:	e0fff517 	ldw	r3,-44(fp)
    6b70:	00bfc074 	movhi	r2,65281
    6b74:	10bfc004 	addi	r2,r2,-256
    6b78:	1884703a 	and	r2,r3,r2
    6b7c:	1006d23a 	srli	r3,r2,8
    6b80:	e13ff517 	ldw	r4,-44(fp)
    6b84:	00803ff4 	movhi	r2,255
    6b88:	10803fc4 	addi	r2,r2,255
    6b8c:	2084703a 	and	r2,r4,r2
    6b90:	1004923a 	slli	r2,r2,8
    6b94:	1886b03a 	or	r3,r3,r2
    6b98:	e13ff717 	ldw	r4,-36(fp)
    6b9c:	e0bff117 	ldw	r2,-60(fp)
    6ba0:	10800284 	addi	r2,r2,10
    6ba4:	1085883a 	add	r2,r2,r2
    6ba8:	1085883a 	add	r2,r2,r2
    6bac:	2085883a 	add	r2,r4,r2
    6bb0:	10c00015 	stw	r3,0(r2)
			context->bitcount += freespace << 3;
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    6bb4:	e0bff117 	ldw	r2,-60(fp)
    6bb8:	10800044 	addi	r2,r2,1
    6bbc:	e0bff115 	stw	r2,-60(fp)
    6bc0:	e0bff117 	ldw	r2,-60(fp)
    6bc4:	10800410 	cmplti	r2,r2,16
    6bc8:	103fdd1e 	bne	r2,zero,6b40 <__alt_mem_epcs_flash_controller+0xfdffdb40>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			trezor_sha256_Transform(context->state, context->buffer, context->state);
    6bcc:	e0fff717 	ldw	r3,-36(fp)
    6bd0:	e0bff717 	ldw	r2,-36(fp)
    6bd4:	10800a04 	addi	r2,r2,40
    6bd8:	e13ff717 	ldw	r4,-36(fp)
    6bdc:	200d883a 	mov	r6,r4
    6be0:	100b883a 	mov	r5,r2
    6be4:	1809883a 	mov	r4,r3
    6be8:	00064640 	call	6464 <trezor_sha256_Transform>
    6bec:	00006506 	br	6d84 <trezor_sha256_Update+0x358>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    6bf0:	e0bff717 	ldw	r2,-36(fp)
    6bf4:	10c00a04 	addi	r3,r2,40
    6bf8:	e0bff317 	ldw	r2,-52(fp)
    6bfc:	1885883a 	add	r2,r3,r2
    6c00:	e1bff917 	ldw	r6,-28(fp)
    6c04:	e17ff817 	ldw	r5,-32(fp)
    6c08:	1009883a 	mov	r4,r2
    6c0c:	00095dc0 	call	95dc <memcpy>
			context->bitcount += len << 3;
    6c10:	e0bff717 	ldw	r2,-36(fp)
    6c14:	11000817 	ldw	r4,32(r2)
    6c18:	11400917 	ldw	r5,36(r2)
    6c1c:	e0bff917 	ldw	r2,-28(fp)
    6c20:	100490fa 	slli	r2,r2,3
    6c24:	1025883a 	mov	r18,r2
    6c28:	0027883a 	mov	r19,zero
    6c2c:	2485883a 	add	r2,r4,r18
    6c30:	110d803a 	cmpltu	r6,r2,r4
    6c34:	2cc7883a 	add	r3,r5,r19
    6c38:	30c9883a 	add	r4,r6,r3
    6c3c:	2007883a 	mov	r3,r4
    6c40:	1009883a 	mov	r4,r2
    6c44:	180b883a 	mov	r5,r3
    6c48:	e0bff717 	ldw	r2,-36(fp)
    6c4c:	11000815 	stw	r4,32(r2)
    6c50:	11400915 	stw	r5,36(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    6c54:	e03ff415 	stw	zero,-48(fp)
    6c58:	e0bff417 	ldw	r2,-48(fp)
    6c5c:	e0bff315 	stw	r2,-52(fp)
			return;
    6c60:	00006906 	br	6e08 <trezor_sha256_Update+0x3dc>
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
    6c64:	e0bff717 	ldw	r2,-36(fp)
    6c68:	10800a04 	addi	r2,r2,40
    6c6c:	01801004 	movi	r6,64
    6c70:	e17ff817 	ldw	r5,-32(fp)
    6c74:	1009883a 	mov	r4,r2
    6c78:	00095dc0 	call	95dc <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    6c7c:	e03ff215 	stw	zero,-56(fp)
    6c80:	00002006 	br	6d04 <trezor_sha256_Update+0x2d8>
			REVERSE32(context->buffer[j],context->buffer[j]);
    6c84:	e0fff717 	ldw	r3,-36(fp)
    6c88:	e0bff217 	ldw	r2,-56(fp)
    6c8c:	10800284 	addi	r2,r2,10
    6c90:	1085883a 	add	r2,r2,r2
    6c94:	1085883a 	add	r2,r2,r2
    6c98:	1885883a 	add	r2,r3,r2
    6c9c:	10800017 	ldw	r2,0(r2)
    6ca0:	e0bff615 	stw	r2,-40(fp)
    6ca4:	e0bff617 	ldw	r2,-40(fp)
    6ca8:	1004143a 	roli	r2,r2,16
    6cac:	e0bff615 	stw	r2,-40(fp)
    6cb0:	e0fff617 	ldw	r3,-40(fp)
    6cb4:	00bfc074 	movhi	r2,65281
    6cb8:	10bfc004 	addi	r2,r2,-256
    6cbc:	1884703a 	and	r2,r3,r2
    6cc0:	1006d23a 	srli	r3,r2,8
    6cc4:	e13ff617 	ldw	r4,-40(fp)
    6cc8:	00803ff4 	movhi	r2,255
    6ccc:	10803fc4 	addi	r2,r2,255
    6cd0:	2084703a 	and	r2,r4,r2
    6cd4:	1004923a 	slli	r2,r2,8
    6cd8:	1886b03a 	or	r3,r3,r2
    6cdc:	e13ff717 	ldw	r4,-36(fp)
    6ce0:	e0bff217 	ldw	r2,-56(fp)
    6ce4:	10800284 	addi	r2,r2,10
    6ce8:	1085883a 	add	r2,r2,r2
    6cec:	1085883a 	add	r2,r2,r2
    6cf0:	2085883a 	add	r2,r4,r2
    6cf4:	10c00015 	stw	r3,0(r2)
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA256_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    6cf8:	e0bff217 	ldw	r2,-56(fp)
    6cfc:	10800044 	addi	r2,r2,1
    6d00:	e0bff215 	stw	r2,-56(fp)
    6d04:	e0bff217 	ldw	r2,-56(fp)
    6d08:	10800410 	cmplti	r2,r2,16
    6d0c:	103fdd1e 	bne	r2,zero,6c84 <__alt_mem_epcs_flash_controller+0xfdffdc84>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		trezor_sha256_Transform(context->state, context->buffer, context->state);
    6d10:	e0fff717 	ldw	r3,-36(fp)
    6d14:	e0bff717 	ldw	r2,-36(fp)
    6d18:	10800a04 	addi	r2,r2,40
    6d1c:	e13ff717 	ldw	r4,-36(fp)
    6d20:	200d883a 	mov	r6,r4
    6d24:	100b883a 	mov	r5,r2
    6d28:	1809883a 	mov	r4,r3
    6d2c:	00064640 	call	6464 <trezor_sha256_Transform>
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
    6d30:	e0bff717 	ldw	r2,-36(fp)
    6d34:	11000817 	ldw	r4,32(r2)
    6d38:	11400917 	ldw	r5,36(r2)
    6d3c:	01808004 	movi	r6,512
    6d40:	000f883a 	mov	r7,zero
    6d44:	2185883a 	add	r2,r4,r6
    6d48:	1111803a 	cmpltu	r8,r2,r4
    6d4c:	29c7883a 	add	r3,r5,r7
    6d50:	40c9883a 	add	r4,r8,r3
    6d54:	2007883a 	mov	r3,r4
    6d58:	1009883a 	mov	r4,r2
    6d5c:	180b883a 	mov	r5,r3
    6d60:	e0bff717 	ldw	r2,-36(fp)
    6d64:	11000815 	stw	r4,32(r2)
    6d68:	11400915 	stw	r5,36(r2)
		len -= SHA256_BLOCK_LENGTH;
    6d6c:	e0bff917 	ldw	r2,-28(fp)
    6d70:	10bff004 	addi	r2,r2,-64
    6d74:	e0bff915 	stw	r2,-28(fp)
		data += SHA256_BLOCK_LENGTH;
    6d78:	e0bff817 	ldw	r2,-32(fp)
    6d7c:	10801004 	addi	r2,r2,64
    6d80:	e0bff815 	stw	r2,-32(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
    6d84:	e0bff917 	ldw	r2,-28(fp)
    6d88:	10801028 	cmpgeui	r2,r2,64
    6d8c:	103fb51e 	bne	r2,zero,6c64 <__alt_mem_epcs_flash_controller+0xfdffdc64>
		trezor_sha256_Transform(context->state, context->buffer, context->state);
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
		len -= SHA256_BLOCK_LENGTH;
		data += SHA256_BLOCK_LENGTH;
	}
	if (len > 0) {
    6d90:	e0bff917 	ldw	r2,-28(fp)
    6d94:	10001726 	beq	r2,zero,6df4 <trezor_sha256_Update+0x3c8>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    6d98:	e0bff717 	ldw	r2,-36(fp)
    6d9c:	10800a04 	addi	r2,r2,40
    6da0:	e1bff917 	ldw	r6,-28(fp)
    6da4:	e17ff817 	ldw	r5,-32(fp)
    6da8:	1009883a 	mov	r4,r2
    6dac:	00095dc0 	call	95dc <memcpy>
		context->bitcount += len << 3;
    6db0:	e0bff717 	ldw	r2,-36(fp)
    6db4:	11000817 	ldw	r4,32(r2)
    6db8:	11400917 	ldw	r5,36(r2)
    6dbc:	e0bff917 	ldw	r2,-28(fp)
    6dc0:	100490fa 	slli	r2,r2,3
    6dc4:	1021883a 	mov	r16,r2
    6dc8:	0023883a 	mov	r17,zero
    6dcc:	2405883a 	add	r2,r4,r16
    6dd0:	110d803a 	cmpltu	r6,r2,r4
    6dd4:	2c47883a 	add	r3,r5,r17
    6dd8:	30c9883a 	add	r4,r6,r3
    6ddc:	2007883a 	mov	r3,r4
    6de0:	1009883a 	mov	r4,r2
    6de4:	180b883a 	mov	r5,r3
    6de8:	e0bff717 	ldw	r2,-36(fp)
    6dec:	11000815 	stw	r4,32(r2)
    6df0:	11400915 	stw	r5,36(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    6df4:	e03ff415 	stw	zero,-48(fp)
    6df8:	e0bff417 	ldw	r2,-48(fp)
    6dfc:	e0bff315 	stw	r2,-52(fp)
    6e00:	00000106 	br	6e08 <trezor_sha256_Update+0x3dc>
void trezor_sha256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    6e04:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		context->bitcount += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    6e08:	e6fffa04 	addi	sp,fp,-24
    6e0c:	dfc00717 	ldw	ra,28(sp)
    6e10:	df000617 	ldw	fp,24(sp)
    6e14:	dd400517 	ldw	r21,20(sp)
    6e18:	dd000417 	ldw	r20,16(sp)
    6e1c:	dcc00317 	ldw	r19,12(sp)
    6e20:	dc800217 	ldw	r18,8(sp)
    6e24:	dc400117 	ldw	r17,4(sp)
    6e28:	dc000017 	ldw	r16,0(sp)
    6e2c:	dec00804 	addi	sp,sp,32
    6e30:	f800283a 	ret

00006e34 <trezor_sha256_Final>:

void trezor_sha256_Final(SHA256_CTX* context, sha2_byte digest[]) {
    6e34:	defff304 	addi	sp,sp,-52
    6e38:	dfc00c15 	stw	ra,48(sp)
    6e3c:	df000b15 	stw	fp,44(sp)
    6e40:	dc400a15 	stw	r17,40(sp)
    6e44:	dc000915 	stw	r16,36(sp)
    6e48:	df000b04 	addi	fp,sp,44
    6e4c:	e13ffc15 	stw	r4,-16(fp)
    6e50:	e17ffd15 	stw	r5,-12(fp)
	unsigned int	usedspace;

	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    6e54:	e0bffd17 	ldw	r2,-12(fp)
    6e58:	1000b826 	beq	r2,zero,713c <trezor_sha256_Final+0x308>
		usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
    6e5c:	e13ffc17 	ldw	r4,-16(fp)
    6e60:	20800817 	ldw	r2,32(r4)
    6e64:	20c00917 	ldw	r3,36(r4)
    6e68:	1808977a 	slli	r4,r3,29
    6e6c:	100cd0fa 	srli	r6,r2,3
    6e70:	218cb03a 	or	r6,r4,r6
    6e74:	180ed0fa 	srli	r7,r3,3
    6e78:	3005883a 	mov	r2,r6
    6e7c:	10800fcc 	andi	r2,r2,63
    6e80:	e0bff515 	stw	r2,-44(fp)
		/* Begin padding with a 1 bit: */
		((uint8_t*)context->buffer)[usedspace++] = 0x80;
    6e84:	e0bffc17 	ldw	r2,-16(fp)
    6e88:	10c00a04 	addi	r3,r2,40
    6e8c:	e0bff517 	ldw	r2,-44(fp)
    6e90:	11000044 	addi	r4,r2,1
    6e94:	e13ff515 	stw	r4,-44(fp)
    6e98:	1885883a 	add	r2,r3,r2
    6e9c:	00ffe004 	movi	r3,-128
    6ea0:	10c00005 	stb	r3,0(r2)
		
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
    6ea4:	e0bff517 	ldw	r2,-44(fp)
    6ea8:	10800e70 	cmpltui	r2,r2,57
    6eac:	1000371e 	bne	r2,zero,6f8c <trezor_sha256_Final+0x158>
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);
    6eb0:	e0bffc17 	ldw	r2,-16(fp)
    6eb4:	10c00a04 	addi	r3,r2,40
    6eb8:	e0bff517 	ldw	r2,-44(fp)
    6ebc:	1889883a 	add	r4,r3,r2
    6ec0:	00c01004 	movi	r3,64
    6ec4:	e0bff517 	ldw	r2,-44(fp)
    6ec8:	1885c83a 	sub	r2,r3,r2
    6ecc:	100b883a 	mov	r5,r2
    6ed0:	00017c40 	call	17c4 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    6ed4:	e03ff615 	stw	zero,-40(fp)
    6ed8:	00002006 	br	6f5c <trezor_sha256_Final+0x128>
				REVERSE32(context->buffer[j],context->buffer[j]);
    6edc:	e0fffc17 	ldw	r3,-16(fp)
    6ee0:	e0bff617 	ldw	r2,-40(fp)
    6ee4:	10800284 	addi	r2,r2,10
    6ee8:	1085883a 	add	r2,r2,r2
    6eec:	1085883a 	add	r2,r2,r2
    6ef0:	1885883a 	add	r2,r3,r2
    6ef4:	10800017 	ldw	r2,0(r2)
    6ef8:	e0bff915 	stw	r2,-28(fp)
    6efc:	e0bff917 	ldw	r2,-28(fp)
    6f00:	1004143a 	roli	r2,r2,16
    6f04:	e0bff915 	stw	r2,-28(fp)
    6f08:	e0fff917 	ldw	r3,-28(fp)
    6f0c:	00bfc074 	movhi	r2,65281
    6f10:	10bfc004 	addi	r2,r2,-256
    6f14:	1884703a 	and	r2,r3,r2
    6f18:	1006d23a 	srli	r3,r2,8
    6f1c:	e13ff917 	ldw	r4,-28(fp)
    6f20:	00803ff4 	movhi	r2,255
    6f24:	10803fc4 	addi	r2,r2,255
    6f28:	2084703a 	and	r2,r4,r2
    6f2c:	1004923a 	slli	r2,r2,8
    6f30:	1886b03a 	or	r3,r3,r2
    6f34:	e13ffc17 	ldw	r4,-16(fp)
    6f38:	e0bff617 	ldw	r2,-40(fp)
    6f3c:	10800284 	addi	r2,r2,10
    6f40:	1085883a 	add	r2,r2,r2
    6f44:	1085883a 	add	r2,r2,r2
    6f48:	2085883a 	add	r2,r4,r2
    6f4c:	10c00015 	stw	r3,0(r2)
		if (usedspace > SHA256_SHORT_BLOCK_LENGTH) {
			memzero(((uint8_t*)context->buffer) + usedspace, SHA256_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    6f50:	e0bff617 	ldw	r2,-40(fp)
    6f54:	10800044 	addi	r2,r2,1
    6f58:	e0bff615 	stw	r2,-40(fp)
    6f5c:	e0bff617 	ldw	r2,-40(fp)
    6f60:	10800410 	cmplti	r2,r2,16
    6f64:	103fdd1e 	bne	r2,zero,6edc <__alt_mem_epcs_flash_controller+0xfdffdedc>
				REVERSE32(context->buffer[j],context->buffer[j]);
			}
#endif
			/* Do second-to-last transform: */
			trezor_sha256_Transform(context->state, context->buffer, context->state);
    6f68:	e0fffc17 	ldw	r3,-16(fp)
    6f6c:	e0bffc17 	ldw	r2,-16(fp)
    6f70:	10800a04 	addi	r2,r2,40
    6f74:	e13ffc17 	ldw	r4,-16(fp)
    6f78:	200d883a 	mov	r6,r4
    6f7c:	100b883a 	mov	r5,r2
    6f80:	1809883a 	mov	r4,r3
    6f84:	00064640 	call	6464 <trezor_sha256_Transform>
			
			/* And prepare the last transform: */
			usedspace = 0;
    6f88:	e03ff515 	stw	zero,-44(fp)
		}
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);
    6f8c:	e0bffc17 	ldw	r2,-16(fp)
    6f90:	10c00a04 	addi	r3,r2,40
    6f94:	e0bff517 	ldw	r2,-44(fp)
    6f98:	1889883a 	add	r4,r3,r2
    6f9c:	00c00e04 	movi	r3,56
    6fa0:	e0bff517 	ldw	r2,-44(fp)
    6fa4:	1885c83a 	sub	r2,r3,r2
    6fa8:	100b883a 	mov	r5,r2
    6fac:	00017c40 	call	17c4 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    6fb0:	e03ff715 	stw	zero,-36(fp)
    6fb4:	00002006 	br	7038 <trezor_sha256_Final+0x204>
			REVERSE32(context->buffer[j],context->buffer[j]);
    6fb8:	e0fffc17 	ldw	r3,-16(fp)
    6fbc:	e0bff717 	ldw	r2,-36(fp)
    6fc0:	10800284 	addi	r2,r2,10
    6fc4:	1085883a 	add	r2,r2,r2
    6fc8:	1085883a 	add	r2,r2,r2
    6fcc:	1885883a 	add	r2,r3,r2
    6fd0:	10800017 	ldw	r2,0(r2)
    6fd4:	e0bffa15 	stw	r2,-24(fp)
    6fd8:	e0bffa17 	ldw	r2,-24(fp)
    6fdc:	1004143a 	roli	r2,r2,16
    6fe0:	e0bffa15 	stw	r2,-24(fp)
    6fe4:	e0fffa17 	ldw	r3,-24(fp)
    6fe8:	00bfc074 	movhi	r2,65281
    6fec:	10bfc004 	addi	r2,r2,-256
    6ff0:	1884703a 	and	r2,r3,r2
    6ff4:	1006d23a 	srli	r3,r2,8
    6ff8:	e13ffa17 	ldw	r4,-24(fp)
    6ffc:	00803ff4 	movhi	r2,255
    7000:	10803fc4 	addi	r2,r2,255
    7004:	2084703a 	and	r2,r4,r2
    7008:	1004923a 	slli	r2,r2,8
    700c:	1886b03a 	or	r3,r3,r2
    7010:	e13ffc17 	ldw	r4,-16(fp)
    7014:	e0bff717 	ldw	r2,-36(fp)
    7018:	10800284 	addi	r2,r2,10
    701c:	1085883a 	add	r2,r2,r2
    7020:	1085883a 	add	r2,r2,r2
    7024:	2085883a 	add	r2,r4,r2
    7028:	10c00015 	stw	r3,0(r2)
		/* Set-up for the last transform: */
		memzero(((uint8_t*)context->buffer) + usedspace, SHA256_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 14; j++) {
    702c:	e0bff717 	ldw	r2,-36(fp)
    7030:	10800044 	addi	r2,r2,1
    7034:	e0bff715 	stw	r2,-36(fp)
    7038:	e0bff717 	ldw	r2,-36(fp)
    703c:	10800390 	cmplti	r2,r2,14
    7040:	103fdd1e 	bne	r2,zero,6fb8 <__alt_mem_epcs_flash_controller+0xfdffdfb8>
			REVERSE32(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Set the bit count: */
		context->buffer[14] = context->bitcount >> 32;
    7044:	e13ffc17 	ldw	r4,-16(fp)
    7048:	20800817 	ldw	r2,32(r4)
    704c:	20c00917 	ldw	r3,36(r4)
    7050:	1820d83a 	srl	r16,r3,zero
    7054:	0023883a 	mov	r17,zero
    7058:	8007883a 	mov	r3,r16
    705c:	e0bffc17 	ldw	r2,-16(fp)
    7060:	10c01815 	stw	r3,96(r2)
		context->buffer[15] = context->bitcount & 0xffffffff;
    7064:	e13ffc17 	ldw	r4,-16(fp)
    7068:	20800817 	ldw	r2,32(r4)
    706c:	20c00917 	ldw	r3,36(r4)
    7070:	1007883a 	mov	r3,r2
    7074:	e0bffc17 	ldw	r2,-16(fp)
    7078:	10c01915 	stw	r3,100(r2)

		/* Final transform: */
		trezor_sha256_Transform(context->state, context->buffer, context->state);
    707c:	e0fffc17 	ldw	r3,-16(fp)
    7080:	e0bffc17 	ldw	r2,-16(fp)
    7084:	10800a04 	addi	r2,r2,40
    7088:	e13ffc17 	ldw	r4,-16(fp)
    708c:	200d883a 	mov	r6,r4
    7090:	100b883a 	mov	r5,r2
    7094:	1809883a 	mov	r4,r3
    7098:	00064640 	call	6464 <trezor_sha256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    709c:	e03ff815 	stw	zero,-32(fp)
    70a0:	00001e06 	br	711c <trezor_sha256_Final+0x2e8>
			REVERSE32(context->state[j],context->state[j]);
    70a4:	e0fffc17 	ldw	r3,-16(fp)
    70a8:	e0bff817 	ldw	r2,-32(fp)
    70ac:	1085883a 	add	r2,r2,r2
    70b0:	1085883a 	add	r2,r2,r2
    70b4:	1885883a 	add	r2,r3,r2
    70b8:	10800017 	ldw	r2,0(r2)
    70bc:	e0bffb15 	stw	r2,-20(fp)
    70c0:	e0bffb17 	ldw	r2,-20(fp)
    70c4:	1004143a 	roli	r2,r2,16
    70c8:	e0bffb15 	stw	r2,-20(fp)
    70cc:	e0fffb17 	ldw	r3,-20(fp)
    70d0:	00bfc074 	movhi	r2,65281
    70d4:	10bfc004 	addi	r2,r2,-256
    70d8:	1884703a 	and	r2,r3,r2
    70dc:	1006d23a 	srli	r3,r2,8
    70e0:	e13ffb17 	ldw	r4,-20(fp)
    70e4:	00803ff4 	movhi	r2,255
    70e8:	10803fc4 	addi	r2,r2,255
    70ec:	2084703a 	and	r2,r4,r2
    70f0:	1004923a 	slli	r2,r2,8
    70f4:	1886b03a 	or	r3,r3,r2
    70f8:	e13ffc17 	ldw	r4,-16(fp)
    70fc:	e0bff817 	ldw	r2,-32(fp)
    7100:	1085883a 	add	r2,r2,r2
    7104:	1085883a 	add	r2,r2,r2
    7108:	2085883a 	add	r2,r4,r2
    710c:	10c00015 	stw	r3,0(r2)
		/* Final transform: */
		trezor_sha256_Transform(context->state, context->buffer, context->state);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    7110:	e0bff817 	ldw	r2,-32(fp)
    7114:	10800044 	addi	r2,r2,1
    7118:	e0bff815 	stw	r2,-32(fp)
    711c:	e0bff817 	ldw	r2,-32(fp)
    7120:	10800210 	cmplti	r2,r2,8
    7124:	103fdf1e 	bne	r2,zero,70a4 <__alt_mem_epcs_flash_controller+0xfdffe0a4>
			REVERSE32(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA256_DIGEST_LENGTH);
    7128:	e0bffc17 	ldw	r2,-16(fp)
    712c:	01800804 	movi	r6,32
    7130:	100b883a 	mov	r5,r2
    7134:	e13ffd17 	ldw	r4,-12(fp)
    7138:	00095dc0 	call	95dc <memcpy>
	}

	/* Clean up state data: */
	memzero(context, sizeof(SHA256_CTX));
    713c:	01401a04 	movi	r5,104
    7140:	e13ffc17 	ldw	r4,-16(fp)
    7144:	00017c40 	call	17c4 <memzero>
	usedspace = 0;
    7148:	e03ff515 	stw	zero,-44(fp)
}
    714c:	0001883a 	nop
    7150:	e6fffe04 	addi	sp,fp,-8
    7154:	dfc00317 	ldw	ra,12(sp)
    7158:	df000217 	ldw	fp,8(sp)
    715c:	dc400117 	ldw	r17,4(sp)
    7160:	dc000017 	ldw	r16,0(sp)
    7164:	dec00404 	addi	sp,sp,16
    7168:	f800283a 	ret

0000716c <trezor_sha256_End>:

char *trezor_sha256_End(SHA256_CTX* context, char buffer[]) {
    716c:	defff204 	addi	sp,sp,-56
    7170:	dfc00d15 	stw	ra,52(sp)
    7174:	df000c15 	stw	fp,48(sp)
    7178:	df000c04 	addi	fp,sp,48
    717c:	e13ffe15 	stw	r4,-8(fp)
    7180:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA256_DIGEST_LENGTH], *d = digest;
    7184:	e0bff604 	addi	r2,fp,-40
    7188:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
    718c:	e0bfff17 	ldw	r2,-4(fp)
    7190:	10002926 	beq	r2,zero,7238 <trezor_sha256_End+0xcc>
		trezor_sha256_Final(context, digest);
    7194:	e0bff604 	addi	r2,fp,-40
    7198:	100b883a 	mov	r5,r2
    719c:	e13ffe17 	ldw	r4,-8(fp)
    71a0:	0006e340 	call	6e34 <trezor_sha256_Final>

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    71a4:	e03ff515 	stw	zero,-44(fp)
    71a8:	00001d06 	br	7220 <trezor_sha256_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    71ac:	e0bfff17 	ldw	r2,-4(fp)
    71b0:	10c00044 	addi	r3,r2,1
    71b4:	e0ffff15 	stw	r3,-4(fp)
    71b8:	d1200017 	ldw	r4,-32768(gp)
    71bc:	e0fff417 	ldw	r3,-48(fp)
    71c0:	18c00003 	ldbu	r3,0(r3)
    71c4:	18c03fcc 	andi	r3,r3,255
    71c8:	1806d13a 	srli	r3,r3,4
    71cc:	18c03fcc 	andi	r3,r3,255
    71d0:	20c7883a 	add	r3,r4,r3
    71d4:	18c00003 	ldbu	r3,0(r3)
    71d8:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    71dc:	e0bfff17 	ldw	r2,-4(fp)
    71e0:	10c00044 	addi	r3,r2,1
    71e4:	e0ffff15 	stw	r3,-4(fp)
    71e8:	d1200017 	ldw	r4,-32768(gp)
    71ec:	e0fff417 	ldw	r3,-48(fp)
    71f0:	18c00003 	ldbu	r3,0(r3)
    71f4:	18c03fcc 	andi	r3,r3,255
    71f8:	18c003cc 	andi	r3,r3,15
    71fc:	20c7883a 	add	r3,r4,r3
    7200:	18c00003 	ldbu	r3,0(r3)
    7204:	10c00005 	stb	r3,0(r2)
			d++;
    7208:	e0bff417 	ldw	r2,-48(fp)
    720c:	10800044 	addi	r2,r2,1
    7210:	e0bff415 	stw	r2,-48(fp)
	int		i;

	if (buffer != (char*)0) {
		trezor_sha256_Final(context, digest);

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
    7214:	e0bff517 	ldw	r2,-44(fp)
    7218:	10800044 	addi	r2,r2,1
    721c:	e0bff515 	stw	r2,-44(fp)
    7220:	e0bff517 	ldw	r2,-44(fp)
    7224:	10800810 	cmplti	r2,r2,32
    7228:	103fe01e 	bne	r2,zero,71ac <__alt_mem_epcs_flash_controller+0xfdffe1ac>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    722c:	e0bfff17 	ldw	r2,-4(fp)
    7230:	10000005 	stb	zero,0(r2)
    7234:	00000306 	br	7244 <trezor_sha256_End+0xd8>
	} else {
		memzero(context, sizeof(SHA256_CTX));
    7238:	01401a04 	movi	r5,104
    723c:	e13ffe17 	ldw	r4,-8(fp)
    7240:	00017c40 	call	17c4 <memzero>
	}
	memzero(digest, SHA256_DIGEST_LENGTH);
    7244:	e0bff604 	addi	r2,fp,-40
    7248:	01400804 	movi	r5,32
    724c:	1009883a 	mov	r4,r2
    7250:	00017c40 	call	17c4 <memzero>
	return buffer;
    7254:	e0bfff17 	ldw	r2,-4(fp)
}
    7258:	e037883a 	mov	sp,fp
    725c:	dfc00117 	ldw	ra,4(sp)
    7260:	df000017 	ldw	fp,0(sp)
    7264:	dec00204 	addi	sp,sp,8
    7268:	f800283a 	ret

0000726c <trezor_sha256_Raw>:

void trezor_sha256_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA256_DIGEST_LENGTH]) {
    726c:	deffe104 	addi	sp,sp,-124
    7270:	dfc01e15 	stw	ra,120(sp)
    7274:	df001d15 	stw	fp,116(sp)
    7278:	df001d04 	addi	fp,sp,116
    727c:	e13ffd15 	stw	r4,-12(fp)
    7280:	e17ffe15 	stw	r5,-8(fp)
    7284:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;
	trezor_sha256_Init(&context);
    7288:	e13fe304 	addi	r4,fp,-116
    728c:	00063f40 	call	63f4 <trezor_sha256_Init>
	trezor_sha256_Update(&context, data, len);
    7290:	e1bffe17 	ldw	r6,-8(fp)
    7294:	e17ffd17 	ldw	r5,-12(fp)
    7298:	e13fe304 	addi	r4,fp,-116
    729c:	0006a2c0 	call	6a2c <trezor_sha256_Update>
	trezor_sha256_Final(&context, digest);
    72a0:	e17fff17 	ldw	r5,-4(fp)
    72a4:	e13fe304 	addi	r4,fp,-116
    72a8:	0006e340 	call	6e34 <trezor_sha256_Final>
}
    72ac:	0001883a 	nop
    72b0:	e037883a 	mov	sp,fp
    72b4:	dfc00117 	ldw	ra,4(sp)
    72b8:	df000017 	ldw	fp,0(sp)
    72bc:	dec00204 	addi	sp,sp,8
    72c0:	f800283a 	ret

000072c4 <sha256_Data>:

char* sha256_Data(const sha2_byte* data, size_t len, char digest[SHA256_DIGEST_STRING_LENGTH]) {
    72c4:	deffe104 	addi	sp,sp,-124
    72c8:	dfc01e15 	stw	ra,120(sp)
    72cc:	df001d15 	stw	fp,116(sp)
    72d0:	df001d04 	addi	fp,sp,116
    72d4:	e13ffd15 	stw	r4,-12(fp)
    72d8:	e17ffe15 	stw	r5,-8(fp)
    72dc:	e1bfff15 	stw	r6,-4(fp)
	SHA256_CTX	context;

	trezor_sha256_Init(&context);
    72e0:	e13fe304 	addi	r4,fp,-116
    72e4:	00063f40 	call	63f4 <trezor_sha256_Init>
	trezor_sha256_Update(&context, data, len);
    72e8:	e1bffe17 	ldw	r6,-8(fp)
    72ec:	e17ffd17 	ldw	r5,-12(fp)
    72f0:	e13fe304 	addi	r4,fp,-116
    72f4:	0006a2c0 	call	6a2c <trezor_sha256_Update>
	return trezor_sha256_End(&context, digest);
    72f8:	e17fff17 	ldw	r5,-4(fp)
    72fc:	e13fe304 	addi	r4,fp,-116
    7300:	000716c0 	call	716c <trezor_sha256_End>
}
    7304:	e037883a 	mov	sp,fp
    7308:	dfc00117 	ldw	ra,4(sp)
    730c:	df000017 	ldw	fp,0(sp)
    7310:	dec00204 	addi	sp,sp,8
    7314:	f800283a 	ret

00007318 <trezor_sha512_Init>:


/*** SHA-512: *********************************************************/
void trezor_sha512_Init(SHA512_CTX* context) {
    7318:	defffd04 	addi	sp,sp,-12
    731c:	dfc00215 	stw	ra,8(sp)
    7320:	df000115 	stw	fp,4(sp)
    7324:	df000104 	addi	fp,sp,4
    7328:	e13fff15 	stw	r4,-4(fp)
	if (context == (SHA512_CTX*)0) {
    732c:	e0bfff17 	ldw	r2,-4(fp)
    7330:	10001526 	beq	r2,zero,7388 <trezor_sha512_Init+0x70>
		return;
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
    7334:	e0bfff17 	ldw	r2,-4(fp)
    7338:	01801004 	movi	r6,64
    733c:	01400074 	movhi	r5,1
    7340:	295a7704 	addi	r5,r5,27100
    7344:	1009883a 	mov	r4,r2
    7348:	00095dc0 	call	95dc <memcpy>
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
    734c:	e0bfff17 	ldw	r2,-4(fp)
    7350:	10801404 	addi	r2,r2,80
    7354:	01402004 	movi	r5,128
    7358:	1009883a 	mov	r4,r2
    735c:	00017c40 	call	17c4 <memzero>
	context->bitcount[0] = context->bitcount[1] =  0;
    7360:	e0bfff17 	ldw	r2,-4(fp)
    7364:	10001215 	stw	zero,72(r2)
    7368:	10001315 	stw	zero,76(r2)
    736c:	e13fff17 	ldw	r4,-4(fp)
    7370:	20801217 	ldw	r2,72(r4)
    7374:	20c01317 	ldw	r3,76(r4)
    7378:	e13fff17 	ldw	r4,-4(fp)
    737c:	20801015 	stw	r2,64(r4)
    7380:	20c01115 	stw	r3,68(r4)
    7384:	00000106 	br	738c <trezor_sha512_Init+0x74>


/*** SHA-512: *********************************************************/
void trezor_sha512_Init(SHA512_CTX* context) {
	if (context == (SHA512_CTX*)0) {
		return;
    7388:	0001883a 	nop
	}
	MEMCPY_BCOPY(context->state, sha512_initial_hash_value, SHA512_DIGEST_LENGTH);
	memzero(context->buffer, SHA512_BLOCK_LENGTH);
	context->bitcount[0] = context->bitcount[1] =  0;
}
    738c:	e037883a 	mov	sp,fp
    7390:	dfc00117 	ldw	ra,4(sp)
    7394:	df000017 	ldw	fp,0(sp)
    7398:	dec00204 	addi	sp,sp,8
    739c:	f800283a 	ret

000073a0 <trezor_sha512_Transform>:
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void trezor_sha512_Transform(const sha2_word64* state_in, const sha2_word64* data, sha2_word64* state_out) {
    73a0:	deff6e04 	addi	sp,sp,-584
    73a4:	df009115 	stw	fp,580(sp)
    73a8:	dd809015 	stw	r22,576(sp)
    73ac:	dd408f15 	stw	r21,572(sp)
    73b0:	dd008e15 	stw	r20,568(sp)
    73b4:	dcc08d15 	stw	r19,564(sp)
    73b8:	dc808c15 	stw	r18,560(sp)
    73bc:	dc408b15 	stw	r17,556(sp)
    73c0:	dc008a15 	stw	r16,552(sp)
    73c4:	df009104 	addi	fp,sp,580
    73c8:	e13fa815 	stw	r4,-352(fp)
    73cc:	e17fa915 	stw	r5,-348(fp)
    73d0:	e1bfaa15 	stw	r6,-344(fp)
	sha2_word64	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word64	T1, T2, W512[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state_in[0];
    73d4:	e0ffa817 	ldw	r3,-352(fp)
    73d8:	18800017 	ldw	r2,0(r3)
    73dc:	e0bf6f15 	stw	r2,-580(fp)
    73e0:	18800117 	ldw	r2,4(r3)
    73e4:	e0bf7015 	stw	r2,-576(fp)
	b = state_in[1];
    73e8:	e0ffa817 	ldw	r3,-352(fp)
    73ec:	18800217 	ldw	r2,8(r3)
    73f0:	e0bf7115 	stw	r2,-572(fp)
    73f4:	18800317 	ldw	r2,12(r3)
    73f8:	e0bf7215 	stw	r2,-568(fp)
	c = state_in[2];
    73fc:	e0ffa817 	ldw	r3,-352(fp)
    7400:	18800417 	ldw	r2,16(r3)
    7404:	e0bf7315 	stw	r2,-564(fp)
    7408:	18800517 	ldw	r2,20(r3)
    740c:	e0bf7415 	stw	r2,-560(fp)
	d = state_in[3];
    7410:	e0ffa817 	ldw	r3,-352(fp)
    7414:	18800617 	ldw	r2,24(r3)
    7418:	e0bf7515 	stw	r2,-556(fp)
    741c:	18800717 	ldw	r2,28(r3)
    7420:	e0bf7615 	stw	r2,-552(fp)
	e = state_in[4];
    7424:	e0ffa817 	ldw	r3,-352(fp)
    7428:	18800817 	ldw	r2,32(r3)
    742c:	e0bf7715 	stw	r2,-548(fp)
    7430:	18800917 	ldw	r2,36(r3)
    7434:	e0bf7815 	stw	r2,-544(fp)
	f = state_in[5];
    7438:	e0ffa817 	ldw	r3,-352(fp)
    743c:	18800a17 	ldw	r2,40(r3)
    7440:	e0bf7915 	stw	r2,-540(fp)
    7444:	18800b17 	ldw	r2,44(r3)
    7448:	e0bf7a15 	stw	r2,-536(fp)
	g = state_in[6];
    744c:	e0ffa817 	ldw	r3,-352(fp)
    7450:	18800c17 	ldw	r2,48(r3)
    7454:	e0bf7b15 	stw	r2,-532(fp)
    7458:	18800d17 	ldw	r2,52(r3)
    745c:	e0bf7c15 	stw	r2,-528(fp)
	h = state_in[7];
    7460:	e0ffa817 	ldw	r3,-352(fp)
    7464:	18800e17 	ldw	r2,56(r3)
    7468:	e0bf7d15 	stw	r2,-524(fp)
    746c:	18800f17 	ldw	r2,60(r3)
    7470:	e0bf7e15 	stw	r2,-520(fp)

	j = 0;
    7474:	e03f7f15 	stw	zero,-516(fp)
	do {
		/* Apply the SHA-512 compression function to update a..h with copy */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
    7478:	e0bf7817 	ldw	r2,-544(fp)
    747c:	100694ba 	slli	r3,r2,18
    7480:	e0bf7717 	ldw	r2,-548(fp)
    7484:	1004d3ba 	srli	r2,r2,14
    7488:	1884b03a 	or	r2,r3,r2
    748c:	e0bfab15 	stw	r2,-340(fp)
    7490:	e0bf7717 	ldw	r2,-548(fp)
    7494:	100694ba 	slli	r3,r2,18
    7498:	e0bf7817 	ldw	r2,-544(fp)
    749c:	1004d3ba 	srli	r2,r2,14
    74a0:	1884b03a 	or	r2,r3,r2
    74a4:	e0bfac15 	stw	r2,-336(fp)
    74a8:	e0bf7817 	ldw	r2,-544(fp)
    74ac:	100693ba 	slli	r3,r2,14
    74b0:	e0bf7717 	ldw	r2,-548(fp)
    74b4:	1004d4ba 	srli	r2,r2,18
    74b8:	1884b03a 	or	r2,r3,r2
    74bc:	e0bfad15 	stw	r2,-332(fp)
    74c0:	e0bf7717 	ldw	r2,-548(fp)
    74c4:	100693ba 	slli	r3,r2,14
    74c8:	e0bf7817 	ldw	r2,-544(fp)
    74cc:	1004d4ba 	srli	r2,r2,18
    74d0:	1884b03a 	or	r2,r3,r2
    74d4:	e0bfae15 	stw	r2,-328(fp)
    74d8:	e0bfab17 	ldw	r2,-340(fp)
    74dc:	e0ffad17 	ldw	r3,-332(fp)
    74e0:	10c4f03a 	xor	r2,r2,r3
    74e4:	e0bfaf15 	stw	r2,-324(fp)
    74e8:	e13fac17 	ldw	r4,-336(fp)
    74ec:	e17fae17 	ldw	r5,-328(fp)
    74f0:	2148f03a 	xor	r4,r4,r5
    74f4:	e13fb015 	stw	r4,-320(fp)
    74f8:	e0bf7717 	ldw	r2,-548(fp)
    74fc:	1006d27a 	srli	r3,r2,9
    7500:	e0bf7817 	ldw	r2,-544(fp)
    7504:	100495fa 	slli	r2,r2,23
    7508:	1884b03a 	or	r2,r3,r2
    750c:	e0bfb215 	stw	r2,-312(fp)
    7510:	e0bf7817 	ldw	r2,-544(fp)
    7514:	1006d27a 	srli	r3,r2,9
    7518:	e0bf7717 	ldw	r2,-548(fp)
    751c:	100495fa 	slli	r2,r2,23
    7520:	1884b03a 	or	r2,r3,r2
    7524:	e0bfb115 	stw	r2,-316(fp)
    7528:	e1bfaf17 	ldw	r6,-324(fp)
    752c:	e1ffb117 	ldw	r7,-316(fp)
    7530:	31ccf03a 	xor	r6,r6,r7
    7534:	e1bfb315 	stw	r6,-308(fp)
    7538:	e0bfb017 	ldw	r2,-320(fp)
    753c:	e0ffb217 	ldw	r3,-312(fp)
    7540:	10c4f03a 	xor	r2,r2,r3
    7544:	e0bfb415 	stw	r2,-304(fp)
    7548:	e0bf7d17 	ldw	r2,-524(fp)
    754c:	e0ff7e17 	ldw	r3,-520(fp)
    7550:	e1bfb317 	ldw	r6,-308(fp)
    7554:	3089883a 	add	r4,r6,r2
    7558:	e1ffb317 	ldw	r7,-308(fp)
    755c:	21cd803a 	cmpltu	r6,r4,r7
    7560:	e1ffb417 	ldw	r7,-304(fp)
    7564:	38cb883a 	add	r5,r7,r3
    7568:	3145883a 	add	r2,r6,r5
    756c:	100b883a 	mov	r5,r2
    7570:	200d883a 	mov	r6,r4
    7574:	280f883a 	mov	r7,r5
    7578:	e0ff7717 	ldw	r3,-548(fp)
    757c:	e0bf7917 	ldw	r2,-540(fp)
    7580:	1884703a 	and	r2,r3,r2
    7584:	e0bfb515 	stw	r2,-300(fp)
    7588:	e0ff7817 	ldw	r3,-544(fp)
    758c:	e0bf7a17 	ldw	r2,-536(fp)
    7590:	1884703a 	and	r2,r3,r2
    7594:	e0bfb615 	stw	r2,-296(fp)
    7598:	e0bf7717 	ldw	r2,-548(fp)
    759c:	0084303a 	nor	r2,zero,r2
    75a0:	e0bfb715 	stw	r2,-292(fp)
    75a4:	e0bf7817 	ldw	r2,-544(fp)
    75a8:	0084303a 	nor	r2,zero,r2
    75ac:	e0bfb815 	stw	r2,-288(fp)
    75b0:	e0bf7b17 	ldw	r2,-532(fp)
    75b4:	e0ffb717 	ldw	r3,-292(fp)
    75b8:	10c4703a 	and	r2,r2,r3
    75bc:	e0bfb915 	stw	r2,-284(fp)
    75c0:	e0bf7c17 	ldw	r2,-528(fp)
    75c4:	e13fb817 	ldw	r4,-288(fp)
    75c8:	1104703a 	and	r2,r2,r4
    75cc:	e0bfba15 	stw	r2,-280(fp)
    75d0:	e17fb517 	ldw	r5,-300(fp)
    75d4:	e0bfb917 	ldw	r2,-284(fp)
    75d8:	288af03a 	xor	r5,r5,r2
    75dc:	e17fbb15 	stw	r5,-276(fp)
    75e0:	e0ffb617 	ldw	r3,-296(fp)
    75e4:	e13fba17 	ldw	r4,-280(fp)
    75e8:	1906f03a 	xor	r3,r3,r4
    75ec:	e0ffbc15 	stw	r3,-272(fp)
    75f0:	e17fbb17 	ldw	r5,-276(fp)
    75f4:	3145883a 	add	r2,r6,r5
    75f8:	1189803a 	cmpltu	r4,r2,r6
    75fc:	e17fbc17 	ldw	r5,-272(fp)
    7600:	3947883a 	add	r3,r7,r5
    7604:	20c9883a 	add	r4,r4,r3
    7608:	2007883a 	mov	r3,r4
    760c:	100f883a 	mov	r7,r2
    7610:	1811883a 	mov	r8,r3
    7614:	00c00074 	movhi	r3,1
    7618:	18d9d704 	addi	r3,r3,26460
    761c:	e0bf7f17 	ldw	r2,-516(fp)
    7620:	100490fa 	slli	r2,r2,3
    7624:	1889883a 	add	r4,r3,r2
    7628:	20800017 	ldw	r2,0(r4)
    762c:	20c00117 	ldw	r3,4(r4)
    7630:	3889883a 	add	r4,r7,r2
    7634:	21cd803a 	cmpltu	r6,r4,r7
    7638:	40cb883a 	add	r5,r8,r3
    763c:	3145883a 	add	r2,r6,r5
    7640:	100b883a 	mov	r5,r2
    7644:	200f883a 	mov	r7,r4
    7648:	2811883a 	mov	r8,r5
    764c:	e0ffa917 	ldw	r3,-348(fp)
    7650:	18800204 	addi	r2,r3,8
    7654:	e0bfa915 	stw	r2,-348(fp)
    7658:	19000017 	ldw	r4,0(r3)
    765c:	19400117 	ldw	r5,4(r3)
    7660:	e0bf7f17 	ldw	r2,-516(fp)
    7664:	100490fa 	slli	r2,r2,3
    7668:	e1bf6f04 	addi	r6,fp,-580
    766c:	3085883a 	add	r2,r6,r2
    7670:	10801904 	addi	r2,r2,100
    7674:	11000015 	stw	r4,0(r2)
    7678:	11400115 	stw	r5,4(r2)
    767c:	e0bf7f17 	ldw	r2,-516(fp)
    7680:	100490fa 	slli	r2,r2,3
    7684:	e0ff6f04 	addi	r3,fp,-580
    7688:	1885883a 	add	r2,r3,r2
    768c:	10801904 	addi	r2,r2,100
    7690:	11000017 	ldw	r4,0(r2)
    7694:	11400117 	ldw	r5,4(r2)
    7698:	3905883a 	add	r2,r7,r4
    769c:	11cd803a 	cmpltu	r6,r2,r7
    76a0:	4147883a 	add	r3,r8,r5
    76a4:	30c9883a 	add	r4,r6,r3
    76a8:	2007883a 	mov	r3,r4
    76ac:	e0bf8015 	stw	r2,-512(fp)
    76b0:	e0ff8115 	stw	r3,-508(fp)
		T2 = Sigma0_512(a) + Maj(a, b, c);
    76b4:	e0bf7017 	ldw	r2,-576(fp)
    76b8:	1006913a 	slli	r3,r2,4
    76bc:	e0bf6f17 	ldw	r2,-580(fp)
    76c0:	1004d73a 	srli	r2,r2,28
    76c4:	1884b03a 	or	r2,r3,r2
    76c8:	e0bfbd15 	stw	r2,-268(fp)
    76cc:	e0bf6f17 	ldw	r2,-580(fp)
    76d0:	1006913a 	slli	r3,r2,4
    76d4:	e0bf7017 	ldw	r2,-576(fp)
    76d8:	1004d73a 	srli	r2,r2,28
    76dc:	1884b03a 	or	r2,r3,r2
    76e0:	e0bfbe15 	stw	r2,-264(fp)
    76e4:	e0bf6f17 	ldw	r2,-580(fp)
    76e8:	1006d0ba 	srli	r3,r2,2
    76ec:	e0bf7017 	ldw	r2,-576(fp)
    76f0:	100497ba 	slli	r2,r2,30
    76f4:	1884b03a 	or	r2,r3,r2
    76f8:	e0bfc015 	stw	r2,-256(fp)
    76fc:	e0bf7017 	ldw	r2,-576(fp)
    7700:	1006d0ba 	srli	r3,r2,2
    7704:	e0bf6f17 	ldw	r2,-580(fp)
    7708:	100497ba 	slli	r2,r2,30
    770c:	1884b03a 	or	r2,r3,r2
    7710:	e0bfbf15 	stw	r2,-260(fp)
    7714:	e13fbd17 	ldw	r4,-268(fp)
    7718:	e17fbf17 	ldw	r5,-260(fp)
    771c:	2148f03a 	xor	r4,r4,r5
    7720:	e13fc115 	stw	r4,-252(fp)
    7724:	e1bfbe17 	ldw	r6,-264(fp)
    7728:	e1ffc017 	ldw	r7,-256(fp)
    772c:	31ccf03a 	xor	r6,r6,r7
    7730:	e1bfc215 	stw	r6,-248(fp)
    7734:	e0bf6f17 	ldw	r2,-580(fp)
    7738:	1006d1fa 	srli	r3,r2,7
    773c:	e0bf7017 	ldw	r2,-576(fp)
    7740:	1004967a 	slli	r2,r2,25
    7744:	18acb03a 	or	r22,r3,r2
    7748:	e0bf7017 	ldw	r2,-576(fp)
    774c:	1006d1fa 	srli	r3,r2,7
    7750:	e0bf6f17 	ldw	r2,-580(fp)
    7754:	1004967a 	slli	r2,r2,25
    7758:	18aab03a 	or	r21,r3,r2
    775c:	e0bfc117 	ldw	r2,-252(fp)
    7760:	1552f03a 	xor	r9,r2,r21
    7764:	e0ffc217 	ldw	r3,-248(fp)
    7768:	1d94f03a 	xor	r10,r3,r22
    776c:	e0ff6f17 	ldw	r3,-580(fp)
    7770:	e0bf7117 	ldw	r2,-572(fp)
    7774:	18a6703a 	and	r19,r3,r2
    7778:	e0ff7017 	ldw	r3,-576(fp)
    777c:	e0bf7217 	ldw	r2,-568(fp)
    7780:	18a8703a 	and	r20,r3,r2
    7784:	e0ff6f17 	ldw	r3,-580(fp)
    7788:	e0bf7317 	ldw	r2,-564(fp)
    778c:	18a2703a 	and	r17,r3,r2
    7790:	e0ff7017 	ldw	r3,-576(fp)
    7794:	e0bf7417 	ldw	r2,-560(fp)
    7798:	18a4703a 	and	r18,r3,r2
    779c:	9c5ef03a 	xor	r15,r19,r17
    77a0:	a4a0f03a 	xor	r16,r20,r18
    77a4:	e0ff7117 	ldw	r3,-572(fp)
    77a8:	e0bf7317 	ldw	r2,-564(fp)
    77ac:	189a703a 	and	r13,r3,r2
    77b0:	e0ff7217 	ldw	r3,-568(fp)
    77b4:	e0bf7417 	ldw	r2,-560(fp)
    77b8:	189c703a 	and	r14,r3,r2
    77bc:	7b56f03a 	xor	r11,r15,r13
    77c0:	8398f03a 	xor	r12,r16,r14
    77c4:	4ac5883a 	add	r2,r9,r11
    77c8:	1249803a 	cmpltu	r4,r2,r9
    77cc:	5307883a 	add	r3,r10,r12
    77d0:	20c9883a 	add	r4,r4,r3
    77d4:	2007883a 	mov	r3,r4
    77d8:	e0bf8215 	stw	r2,-504(fp)
    77dc:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    77e0:	e0bf7b17 	ldw	r2,-532(fp)
    77e4:	e0bf7d15 	stw	r2,-524(fp)
    77e8:	e0bf7c17 	ldw	r2,-528(fp)
    77ec:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    77f0:	e0bf7917 	ldw	r2,-540(fp)
    77f4:	e0bf7b15 	stw	r2,-532(fp)
    77f8:	e0bf7a17 	ldw	r2,-536(fp)
    77fc:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    7800:	e0bf7717 	ldw	r2,-548(fp)
    7804:	e0bf7915 	stw	r2,-540(fp)
    7808:	e0bf7817 	ldw	r2,-544(fp)
    780c:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    7810:	e1ff7517 	ldw	r7,-556(fp)
    7814:	e23f7617 	ldw	r8,-552(fp)
    7818:	e13f8017 	ldw	r4,-512(fp)
    781c:	e17f8117 	ldw	r5,-508(fp)
    7820:	3905883a 	add	r2,r7,r4
    7824:	11cd803a 	cmpltu	r6,r2,r7
    7828:	4147883a 	add	r3,r8,r5
    782c:	30c9883a 	add	r4,r6,r3
    7830:	2007883a 	mov	r3,r4
    7834:	e0bf7715 	stw	r2,-548(fp)
    7838:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    783c:	e0bf7317 	ldw	r2,-564(fp)
    7840:	e0bf7515 	stw	r2,-556(fp)
    7844:	e0bf7417 	ldw	r2,-560(fp)
    7848:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    784c:	e0bf7117 	ldw	r2,-572(fp)
    7850:	e0bf7315 	stw	r2,-564(fp)
    7854:	e0bf7217 	ldw	r2,-568(fp)
    7858:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    785c:	e0bf6f17 	ldw	r2,-580(fp)
    7860:	e0bf7115 	stw	r2,-572(fp)
    7864:	e0bf7017 	ldw	r2,-576(fp)
    7868:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    786c:	e1ff8017 	ldw	r7,-512(fp)
    7870:	e23f8117 	ldw	r8,-508(fp)
    7874:	e13f8217 	ldw	r4,-504(fp)
    7878:	e17f8317 	ldw	r5,-500(fp)
    787c:	3905883a 	add	r2,r7,r4
    7880:	11cd803a 	cmpltu	r6,r2,r7
    7884:	4147883a 	add	r3,r8,r5
    7888:	30c9883a 	add	r4,r6,r3
    788c:	2007883a 	mov	r3,r4
    7890:	e0bf6f15 	stw	r2,-580(fp)
    7894:	e0ff7015 	stw	r3,-576(fp)

		j++;
    7898:	e0bf7f17 	ldw	r2,-516(fp)
    789c:	10800044 	addi	r2,r2,1
    78a0:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 16);
    78a4:	e0bf7f17 	ldw	r2,-516(fp)
    78a8:	10800410 	cmplti	r2,r2,16
    78ac:	103ef21e 	bne	r2,zero,7478 <__alt_mem_epcs_flash_controller+0xfdffe478>

	do {
		/* Part of the message block expansion: */
		s0 = W512[(j+1)&0x0f];
    78b0:	e0bf7f17 	ldw	r2,-516(fp)
    78b4:	10800044 	addi	r2,r2,1
    78b8:	108003cc 	andi	r2,r2,15
    78bc:	100490fa 	slli	r2,r2,3
    78c0:	e13f6f04 	addi	r4,fp,-580
    78c4:	2085883a 	add	r2,r4,r2
    78c8:	10c01904 	addi	r3,r2,100
    78cc:	18800017 	ldw	r2,0(r3)
    78d0:	e0bf8415 	stw	r2,-496(fp)
    78d4:	18800117 	ldw	r2,4(r3)
    78d8:	e0bf8515 	stw	r2,-492(fp)
		s0 = sigma0_512(s0);
    78dc:	e0bf8517 	ldw	r2,-492(fp)
    78e0:	100697fa 	slli	r3,r2,31
    78e4:	e0bf8417 	ldw	r2,-496(fp)
    78e8:	1004d07a 	srli	r2,r2,1
    78ec:	1884b03a 	or	r2,r3,r2
    78f0:	e0bfc315 	stw	r2,-244(fp)
    78f4:	e0bf8417 	ldw	r2,-496(fp)
    78f8:	100697fa 	slli	r3,r2,31
    78fc:	e0bf8517 	ldw	r2,-492(fp)
    7900:	1004d07a 	srli	r2,r2,1
    7904:	1884b03a 	or	r2,r3,r2
    7908:	e0bfc415 	stw	r2,-240(fp)
    790c:	e0bf8517 	ldw	r2,-492(fp)
    7910:	1006963a 	slli	r3,r2,24
    7914:	e0bf8417 	ldw	r2,-496(fp)
    7918:	1004d23a 	srli	r2,r2,8
    791c:	1884b03a 	or	r2,r3,r2
    7920:	e0bfc515 	stw	r2,-236(fp)
    7924:	e0bf8417 	ldw	r2,-496(fp)
    7928:	1006963a 	slli	r3,r2,24
    792c:	e0bf8517 	ldw	r2,-492(fp)
    7930:	1004d23a 	srli	r2,r2,8
    7934:	1884b03a 	or	r2,r3,r2
    7938:	e0bfc615 	stw	r2,-232(fp)
    793c:	e17fc317 	ldw	r5,-244(fp)
    7940:	e1bfc517 	ldw	r6,-236(fp)
    7944:	298af03a 	xor	r5,r5,r6
    7948:	e17fc715 	stw	r5,-228(fp)
    794c:	e1ffc417 	ldw	r7,-240(fp)
    7950:	e0bfc617 	ldw	r2,-232(fp)
    7954:	388ef03a 	xor	r7,r7,r2
    7958:	e1ffc815 	stw	r7,-224(fp)
    795c:	e0bf8517 	ldw	r2,-492(fp)
    7960:	1006967a 	slli	r3,r2,25
    7964:	e0bf8417 	ldw	r2,-496(fp)
    7968:	1004d1fa 	srli	r2,r2,7
    796c:	e0bfc915 	stw	r2,-220(fp)
    7970:	e13fc917 	ldw	r4,-220(fp)
    7974:	1906b03a 	or	r3,r3,r4
    7978:	e0ffc915 	stw	r3,-220(fp)
    797c:	e0bf8517 	ldw	r2,-492(fp)
    7980:	1004d1fa 	srli	r2,r2,7
    7984:	e0bfca15 	stw	r2,-216(fp)
    7988:	e17fc717 	ldw	r5,-228(fp)
    798c:	e1bfc917 	ldw	r6,-220(fp)
    7990:	2984f03a 	xor	r2,r5,r6
    7994:	e0bf8415 	stw	r2,-496(fp)
    7998:	e1ffc817 	ldw	r7,-224(fp)
    799c:	e0ffca17 	ldw	r3,-216(fp)
    79a0:	38c4f03a 	xor	r2,r7,r3
    79a4:	e0bf8515 	stw	r2,-492(fp)
		s1 = W512[(j+14)&0x0f];
    79a8:	e0bf7f17 	ldw	r2,-516(fp)
    79ac:	10800384 	addi	r2,r2,14
    79b0:	108003cc 	andi	r2,r2,15
    79b4:	100490fa 	slli	r2,r2,3
    79b8:	e13f6f04 	addi	r4,fp,-580
    79bc:	2085883a 	add	r2,r4,r2
    79c0:	10c01904 	addi	r3,r2,100
    79c4:	18800017 	ldw	r2,0(r3)
    79c8:	e0bf8615 	stw	r2,-488(fp)
    79cc:	18800117 	ldw	r2,4(r3)
    79d0:	e0bf8715 	stw	r2,-484(fp)
		s1 =  sigma1_512(s1);
    79d4:	e0bf8717 	ldw	r2,-484(fp)
    79d8:	1006937a 	slli	r3,r2,13
    79dc:	e0bf8617 	ldw	r2,-488(fp)
    79e0:	1004d4fa 	srli	r2,r2,19
    79e4:	1884b03a 	or	r2,r3,r2
    79e8:	e0bfcb15 	stw	r2,-212(fp)
    79ec:	e0bf8617 	ldw	r2,-488(fp)
    79f0:	1006937a 	slli	r3,r2,13
    79f4:	e0bf8717 	ldw	r2,-484(fp)
    79f8:	1004d4fa 	srli	r2,r2,19
    79fc:	1884b03a 	or	r2,r3,r2
    7a00:	e0bfcc15 	stw	r2,-208(fp)
    7a04:	e0bf8617 	ldw	r2,-488(fp)
    7a08:	1006d77a 	srli	r3,r2,29
    7a0c:	e0bf8717 	ldw	r2,-484(fp)
    7a10:	100490fa 	slli	r2,r2,3
    7a14:	1884b03a 	or	r2,r3,r2
    7a18:	e0bfce15 	stw	r2,-200(fp)
    7a1c:	e0bf8717 	ldw	r2,-484(fp)
    7a20:	1006d77a 	srli	r3,r2,29
    7a24:	e0bf8617 	ldw	r2,-488(fp)
    7a28:	100490fa 	slli	r2,r2,3
    7a2c:	1884b03a 	or	r2,r3,r2
    7a30:	e0bfcd15 	stw	r2,-204(fp)
    7a34:	e17fcb17 	ldw	r5,-212(fp)
    7a38:	e1bfcd17 	ldw	r6,-204(fp)
    7a3c:	298af03a 	xor	r5,r5,r6
    7a40:	e17fcf15 	stw	r5,-196(fp)
    7a44:	e1ffcc17 	ldw	r7,-208(fp)
    7a48:	e0bfce17 	ldw	r2,-200(fp)
    7a4c:	388ef03a 	xor	r7,r7,r2
    7a50:	e1ffd015 	stw	r7,-192(fp)
    7a54:	e0bf8717 	ldw	r2,-484(fp)
    7a58:	100696ba 	slli	r3,r2,26
    7a5c:	e0bf8617 	ldw	r2,-488(fp)
    7a60:	1004d1ba 	srli	r2,r2,6
    7a64:	e0bfd115 	stw	r2,-188(fp)
    7a68:	e13fd117 	ldw	r4,-188(fp)
    7a6c:	1906b03a 	or	r3,r3,r4
    7a70:	e0ffd115 	stw	r3,-188(fp)
    7a74:	e0bf8717 	ldw	r2,-484(fp)
    7a78:	1004d1ba 	srli	r2,r2,6
    7a7c:	e0bfd215 	stw	r2,-184(fp)
    7a80:	e17fcf17 	ldw	r5,-196(fp)
    7a84:	e1bfd117 	ldw	r6,-188(fp)
    7a88:	2984f03a 	xor	r2,r5,r6
    7a8c:	e0bf8615 	stw	r2,-488(fp)
    7a90:	e1ffd017 	ldw	r7,-192(fp)
    7a94:	e0ffd217 	ldw	r3,-184(fp)
    7a98:	38c4f03a 	xor	r2,r7,r3
    7a9c:	e0bf8715 	stw	r2,-484(fp)

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    7aa0:	e0bf7817 	ldw	r2,-544(fp)
    7aa4:	100694ba 	slli	r3,r2,18
    7aa8:	e0bf7717 	ldw	r2,-548(fp)
    7aac:	1004d3ba 	srli	r2,r2,14
    7ab0:	1884b03a 	or	r2,r3,r2
    7ab4:	e0bfd315 	stw	r2,-180(fp)
    7ab8:	e0bf7717 	ldw	r2,-548(fp)
    7abc:	100694ba 	slli	r3,r2,18
    7ac0:	e0bf7817 	ldw	r2,-544(fp)
    7ac4:	1004d3ba 	srli	r2,r2,14
    7ac8:	1884b03a 	or	r2,r3,r2
    7acc:	e0bfd415 	stw	r2,-176(fp)
    7ad0:	e0bf7817 	ldw	r2,-544(fp)
    7ad4:	100693ba 	slli	r3,r2,14
    7ad8:	e0bf7717 	ldw	r2,-548(fp)
    7adc:	1004d4ba 	srli	r2,r2,18
    7ae0:	1884b03a 	or	r2,r3,r2
    7ae4:	e0bfd515 	stw	r2,-172(fp)
    7ae8:	e0bf7717 	ldw	r2,-548(fp)
    7aec:	100693ba 	slli	r3,r2,14
    7af0:	e0bf7817 	ldw	r2,-544(fp)
    7af4:	1004d4ba 	srli	r2,r2,18
    7af8:	1884b03a 	or	r2,r3,r2
    7afc:	e0bfd615 	stw	r2,-168(fp)
    7b00:	e13fd317 	ldw	r4,-180(fp)
    7b04:	e17fd517 	ldw	r5,-172(fp)
    7b08:	2148f03a 	xor	r4,r4,r5
    7b0c:	e13fd715 	stw	r4,-164(fp)
    7b10:	e1bfd417 	ldw	r6,-176(fp)
    7b14:	e1ffd617 	ldw	r7,-168(fp)
    7b18:	31ccf03a 	xor	r6,r6,r7
    7b1c:	e1bfd815 	stw	r6,-160(fp)
    7b20:	e0bf7717 	ldw	r2,-548(fp)
    7b24:	1006d27a 	srli	r3,r2,9
    7b28:	e0bf7817 	ldw	r2,-544(fp)
    7b2c:	100495fa 	slli	r2,r2,23
    7b30:	1884b03a 	or	r2,r3,r2
    7b34:	e0bfda15 	stw	r2,-152(fp)
    7b38:	e0bf7817 	ldw	r2,-544(fp)
    7b3c:	1006d27a 	srli	r3,r2,9
    7b40:	e0bf7717 	ldw	r2,-548(fp)
    7b44:	100495fa 	slli	r2,r2,23
    7b48:	1884b03a 	or	r2,r3,r2
    7b4c:	e0bfd915 	stw	r2,-156(fp)
    7b50:	e0bfd717 	ldw	r2,-164(fp)
    7b54:	e0ffd917 	ldw	r3,-156(fp)
    7b58:	10c4f03a 	xor	r2,r2,r3
    7b5c:	e0bfdb15 	stw	r2,-148(fp)
    7b60:	e13fd817 	ldw	r4,-160(fp)
    7b64:	e17fda17 	ldw	r5,-152(fp)
    7b68:	2148f03a 	xor	r4,r4,r5
    7b6c:	e13fdc15 	stw	r4,-144(fp)
    7b70:	e0bf7d17 	ldw	r2,-524(fp)
    7b74:	e0ff7e17 	ldw	r3,-520(fp)
    7b78:	e1bfdb17 	ldw	r6,-148(fp)
    7b7c:	3089883a 	add	r4,r6,r2
    7b80:	e1ffdb17 	ldw	r7,-148(fp)
    7b84:	21cd803a 	cmpltu	r6,r4,r7
    7b88:	e1ffdc17 	ldw	r7,-144(fp)
    7b8c:	38cb883a 	add	r5,r7,r3
    7b90:	3145883a 	add	r2,r6,r5
    7b94:	100b883a 	mov	r5,r2
    7b98:	200d883a 	mov	r6,r4
    7b9c:	280f883a 	mov	r7,r5
    7ba0:	e0ff7717 	ldw	r3,-548(fp)
    7ba4:	e0bf7917 	ldw	r2,-540(fp)
    7ba8:	1884703a 	and	r2,r3,r2
    7bac:	e0bfdd15 	stw	r2,-140(fp)
    7bb0:	e0ff7817 	ldw	r3,-544(fp)
    7bb4:	e0bf7a17 	ldw	r2,-536(fp)
    7bb8:	1884703a 	and	r2,r3,r2
    7bbc:	e0bfde15 	stw	r2,-136(fp)
    7bc0:	e0bf7717 	ldw	r2,-548(fp)
    7bc4:	0084303a 	nor	r2,zero,r2
    7bc8:	e0bfdf15 	stw	r2,-132(fp)
    7bcc:	e0bf7817 	ldw	r2,-544(fp)
    7bd0:	0084303a 	nor	r2,zero,r2
    7bd4:	e0bfe015 	stw	r2,-128(fp)
    7bd8:	e0bf7b17 	ldw	r2,-532(fp)
    7bdc:	e0ffdf17 	ldw	r3,-132(fp)
    7be0:	10c4703a 	and	r2,r2,r3
    7be4:	e0bfe115 	stw	r2,-124(fp)
    7be8:	e0bf7c17 	ldw	r2,-528(fp)
    7bec:	e13fe017 	ldw	r4,-128(fp)
    7bf0:	1104703a 	and	r2,r2,r4
    7bf4:	e0bfe215 	stw	r2,-120(fp)
    7bf8:	e17fdd17 	ldw	r5,-140(fp)
    7bfc:	e0bfe117 	ldw	r2,-124(fp)
    7c00:	288af03a 	xor	r5,r5,r2
    7c04:	e17fe315 	stw	r5,-116(fp)
    7c08:	e0ffde17 	ldw	r3,-136(fp)
    7c0c:	e13fe217 	ldw	r4,-120(fp)
    7c10:	1906f03a 	xor	r3,r3,r4
    7c14:	e0ffe415 	stw	r3,-112(fp)
    7c18:	e17fe317 	ldw	r5,-116(fp)
    7c1c:	3145883a 	add	r2,r6,r5
    7c20:	1189803a 	cmpltu	r4,r2,r6
    7c24:	e17fe417 	ldw	r5,-112(fp)
    7c28:	3947883a 	add	r3,r7,r5
    7c2c:	20c9883a 	add	r4,r4,r3
    7c30:	2007883a 	mov	r3,r4
    7c34:	100f883a 	mov	r7,r2
    7c38:	1811883a 	mov	r8,r3
    7c3c:	00c00074 	movhi	r3,1
    7c40:	18d9d704 	addi	r3,r3,26460
    7c44:	e0bf7f17 	ldw	r2,-516(fp)
    7c48:	100490fa 	slli	r2,r2,3
    7c4c:	1889883a 	add	r4,r3,r2
    7c50:	20800017 	ldw	r2,0(r4)
    7c54:	20c00117 	ldw	r3,4(r4)
    7c58:	3889883a 	add	r4,r7,r2
    7c5c:	21cd803a 	cmpltu	r6,r4,r7
    7c60:	40cb883a 	add	r5,r8,r3
    7c64:	3145883a 	add	r2,r6,r5
    7c68:	100b883a 	mov	r5,r2
    7c6c:	2017883a 	mov	r11,r4
    7c70:	2819883a 	mov	r12,r5
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
    7c74:	e0bf7f17 	ldw	r2,-516(fp)
    7c78:	134003cc 	andi	r13,r2,15
    7c7c:	e0bf7f17 	ldw	r2,-516(fp)
    7c80:	108003cc 	andi	r2,r2,15
    7c84:	100490fa 	slli	r2,r2,3
    7c88:	e1bf6f04 	addi	r6,fp,-580
    7c8c:	3085883a 	add	r2,r6,r2
    7c90:	10801904 	addi	r2,r2,100
    7c94:	12400017 	ldw	r9,0(r2)
    7c98:	12800117 	ldw	r10,4(r2)
    7c9c:	e0bf7f17 	ldw	r2,-516(fp)
    7ca0:	10800244 	addi	r2,r2,9
    7ca4:	108003cc 	andi	r2,r2,15
    7ca8:	100490fa 	slli	r2,r2,3
    7cac:	e1ff6f04 	addi	r7,fp,-580
    7cb0:	3885883a 	add	r2,r7,r2
    7cb4:	10801904 	addi	r2,r2,100
    7cb8:	11c00017 	ldw	r7,0(r2)
    7cbc:	12000117 	ldw	r8,4(r2)
    7cc0:	e0bf8617 	ldw	r2,-488(fp)
    7cc4:	e0ff8717 	ldw	r3,-484(fp)
    7cc8:	3889883a 	add	r4,r7,r2
    7ccc:	21cd803a 	cmpltu	r6,r4,r7
    7cd0:	40cb883a 	add	r5,r8,r3
    7cd4:	3145883a 	add	r2,r6,r5
    7cd8:	100b883a 	mov	r5,r2
    7cdc:	200f883a 	mov	r7,r4
    7ce0:	2811883a 	mov	r8,r5
    7ce4:	e0bf8417 	ldw	r2,-496(fp)
    7ce8:	e0ff8517 	ldw	r3,-492(fp)
    7cec:	3889883a 	add	r4,r7,r2
    7cf0:	21cd803a 	cmpltu	r6,r4,r7
    7cf4:	40cb883a 	add	r5,r8,r3
    7cf8:	3145883a 	add	r2,r6,r5
    7cfc:	100b883a 	mov	r5,r2
    7d00:	200d883a 	mov	r6,r4
    7d04:	280f883a 	mov	r7,r5
    7d08:	4985883a 	add	r2,r9,r6
    7d0c:	1249803a 	cmpltu	r4,r2,r9
    7d10:	51c7883a 	add	r3,r10,r7
    7d14:	20c9883a 	add	r4,r4,r3
    7d18:	2007883a 	mov	r3,r4
    7d1c:	1009883a 	mov	r4,r2
    7d20:	180b883a 	mov	r5,r3
    7d24:	680490fa 	slli	r2,r13,3
    7d28:	e0ff6f04 	addi	r3,fp,-580
    7d2c:	1885883a 	add	r2,r3,r2
    7d30:	10801904 	addi	r2,r2,100
    7d34:	11000015 	stw	r4,0(r2)
    7d38:	11400115 	stw	r5,4(r2)
    7d3c:	680490fa 	slli	r2,r13,3
    7d40:	e13f6f04 	addi	r4,fp,-580
    7d44:	2085883a 	add	r2,r4,r2
    7d48:	10801904 	addi	r2,r2,100
    7d4c:	11000017 	ldw	r4,0(r2)
    7d50:	11400117 	ldw	r5,4(r2)
		s0 = sigma0_512(s0);
		s1 = W512[(j+14)&0x0f];
		s1 =  sigma1_512(s1);

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
    7d54:	5905883a 	add	r2,r11,r4
    7d58:	12cd803a 	cmpltu	r6,r2,r11
    7d5c:	6147883a 	add	r3,r12,r5
    7d60:	30c9883a 	add	r4,r6,r3
    7d64:	2007883a 	mov	r3,r4
    7d68:	e0bf8015 	stw	r2,-512(fp)
    7d6c:	e0ff8115 	stw	r3,-508(fp)
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
		T2 = Sigma0_512(a) + Maj(a, b, c);
    7d70:	e0bf7017 	ldw	r2,-576(fp)
    7d74:	1006913a 	slli	r3,r2,4
    7d78:	e0bf6f17 	ldw	r2,-580(fp)
    7d7c:	1004d73a 	srli	r2,r2,28
    7d80:	1884b03a 	or	r2,r3,r2
    7d84:	e0bfe515 	stw	r2,-108(fp)
    7d88:	e0bf6f17 	ldw	r2,-580(fp)
    7d8c:	1006913a 	slli	r3,r2,4
    7d90:	e0bf7017 	ldw	r2,-576(fp)
    7d94:	1004d73a 	srli	r2,r2,28
    7d98:	1884b03a 	or	r2,r3,r2
    7d9c:	e0bfe615 	stw	r2,-104(fp)
    7da0:	e0bf6f17 	ldw	r2,-580(fp)
    7da4:	1006d0ba 	srli	r3,r2,2
    7da8:	e0bf7017 	ldw	r2,-576(fp)
    7dac:	100497ba 	slli	r2,r2,30
    7db0:	1884b03a 	or	r2,r3,r2
    7db4:	e0bfe815 	stw	r2,-96(fp)
    7db8:	e0bf7017 	ldw	r2,-576(fp)
    7dbc:	1006d0ba 	srli	r3,r2,2
    7dc0:	e0bf6f17 	ldw	r2,-580(fp)
    7dc4:	100497ba 	slli	r2,r2,30
    7dc8:	1884b03a 	or	r2,r3,r2
    7dcc:	e0bfe715 	stw	r2,-100(fp)
    7dd0:	e17fe517 	ldw	r5,-108(fp)
    7dd4:	e1bfe717 	ldw	r6,-100(fp)
    7dd8:	298af03a 	xor	r5,r5,r6
    7ddc:	e17fe915 	stw	r5,-92(fp)
    7de0:	e1ffe617 	ldw	r7,-104(fp)
    7de4:	e0bfe817 	ldw	r2,-96(fp)
    7de8:	388ef03a 	xor	r7,r7,r2
    7dec:	e1ffea15 	stw	r7,-88(fp)
    7df0:	e0bf6f17 	ldw	r2,-580(fp)
    7df4:	1006d1fa 	srli	r3,r2,7
    7df8:	e0bf7017 	ldw	r2,-576(fp)
    7dfc:	1004967a 	slli	r2,r2,25
    7e00:	1884b03a 	or	r2,r3,r2
    7e04:	e0bfec15 	stw	r2,-80(fp)
    7e08:	e0bf7017 	ldw	r2,-576(fp)
    7e0c:	1006d1fa 	srli	r3,r2,7
    7e10:	e0bf6f17 	ldw	r2,-580(fp)
    7e14:	1004967a 	slli	r2,r2,25
    7e18:	1884b03a 	or	r2,r3,r2
    7e1c:	e0bfeb15 	stw	r2,-84(fp)
    7e20:	e0ffe917 	ldw	r3,-92(fp)
    7e24:	e13feb17 	ldw	r4,-84(fp)
    7e28:	1906f03a 	xor	r3,r3,r4
    7e2c:	e0ffed15 	stw	r3,-76(fp)
    7e30:	e17fea17 	ldw	r5,-88(fp)
    7e34:	e1bfec17 	ldw	r6,-80(fp)
    7e38:	298af03a 	xor	r5,r5,r6
    7e3c:	e17fee15 	stw	r5,-72(fp)
    7e40:	e0ff6f17 	ldw	r3,-580(fp)
    7e44:	e0bf7117 	ldw	r2,-572(fp)
    7e48:	1884703a 	and	r2,r3,r2
    7e4c:	e0bfef15 	stw	r2,-68(fp)
    7e50:	e0ff7017 	ldw	r3,-576(fp)
    7e54:	e0bf7217 	ldw	r2,-568(fp)
    7e58:	1884703a 	and	r2,r3,r2
    7e5c:	e0bff015 	stw	r2,-64(fp)
    7e60:	e0ff6f17 	ldw	r3,-580(fp)
    7e64:	e0bf7317 	ldw	r2,-564(fp)
    7e68:	1884703a 	and	r2,r3,r2
    7e6c:	e0bff115 	stw	r2,-60(fp)
    7e70:	e0ff7017 	ldw	r3,-576(fp)
    7e74:	e0bf7417 	ldw	r2,-560(fp)
    7e78:	1884703a 	and	r2,r3,r2
    7e7c:	e0bff215 	stw	r2,-56(fp)
    7e80:	e1ffef17 	ldw	r7,-68(fp)
    7e84:	e0bff117 	ldw	r2,-60(fp)
    7e88:	388ef03a 	xor	r7,r7,r2
    7e8c:	e1fff315 	stw	r7,-52(fp)
    7e90:	e0fff017 	ldw	r3,-64(fp)
    7e94:	e13ff217 	ldw	r4,-56(fp)
    7e98:	1906f03a 	xor	r3,r3,r4
    7e9c:	e0fff415 	stw	r3,-48(fp)
    7ea0:	e0ff7117 	ldw	r3,-572(fp)
    7ea4:	e0bf7317 	ldw	r2,-564(fp)
    7ea8:	1884703a 	and	r2,r3,r2
    7eac:	e0bff515 	stw	r2,-44(fp)
    7eb0:	e0ff7217 	ldw	r3,-568(fp)
    7eb4:	e0bf7417 	ldw	r2,-560(fp)
    7eb8:	1884703a 	and	r2,r3,r2
    7ebc:	e0bff615 	stw	r2,-40(fp)
    7ec0:	e17ff317 	ldw	r5,-52(fp)
    7ec4:	e1bff517 	ldw	r6,-44(fp)
    7ec8:	298af03a 	xor	r5,r5,r6
    7ecc:	e17ff715 	stw	r5,-36(fp)
    7ed0:	e1fff417 	ldw	r7,-48(fp)
    7ed4:	e0bff617 	ldw	r2,-40(fp)
    7ed8:	388ef03a 	xor	r7,r7,r2
    7edc:	e1fff815 	stw	r7,-32(fp)
    7ee0:	e13fed17 	ldw	r4,-76(fp)
    7ee4:	e17ff717 	ldw	r5,-36(fp)
    7ee8:	2145883a 	add	r2,r4,r5
    7eec:	e1bfed17 	ldw	r6,-76(fp)
    7ef0:	1189803a 	cmpltu	r4,r2,r6
    7ef4:	e1ffee17 	ldw	r7,-72(fp)
    7ef8:	e17ff817 	ldw	r5,-32(fp)
    7efc:	3947883a 	add	r3,r7,r5
    7f00:	20c9883a 	add	r4,r4,r3
    7f04:	2007883a 	mov	r3,r4
    7f08:	e0bf8215 	stw	r2,-504(fp)
    7f0c:	e0ff8315 	stw	r3,-500(fp)
		h = g;
    7f10:	e0bf7b17 	ldw	r2,-532(fp)
    7f14:	e0bf7d15 	stw	r2,-524(fp)
    7f18:	e0bf7c17 	ldw	r2,-528(fp)
    7f1c:	e0bf7e15 	stw	r2,-520(fp)
		g = f;
    7f20:	e0bf7917 	ldw	r2,-540(fp)
    7f24:	e0bf7b15 	stw	r2,-532(fp)
    7f28:	e0bf7a17 	ldw	r2,-536(fp)
    7f2c:	e0bf7c15 	stw	r2,-528(fp)
		f = e;
    7f30:	e0bf7717 	ldw	r2,-548(fp)
    7f34:	e0bf7915 	stw	r2,-540(fp)
    7f38:	e0bf7817 	ldw	r2,-544(fp)
    7f3c:	e0bf7a15 	stw	r2,-536(fp)
		e = d + T1;
    7f40:	e1ff7517 	ldw	r7,-556(fp)
    7f44:	e23f7617 	ldw	r8,-552(fp)
    7f48:	e13f8017 	ldw	r4,-512(fp)
    7f4c:	e17f8117 	ldw	r5,-508(fp)
    7f50:	3905883a 	add	r2,r7,r4
    7f54:	11cd803a 	cmpltu	r6,r2,r7
    7f58:	4147883a 	add	r3,r8,r5
    7f5c:	30c9883a 	add	r4,r6,r3
    7f60:	2007883a 	mov	r3,r4
    7f64:	e0bf7715 	stw	r2,-548(fp)
    7f68:	e0ff7815 	stw	r3,-544(fp)
		d = c;
    7f6c:	e0bf7317 	ldw	r2,-564(fp)
    7f70:	e0bf7515 	stw	r2,-556(fp)
    7f74:	e0bf7417 	ldw	r2,-560(fp)
    7f78:	e0bf7615 	stw	r2,-552(fp)
		c = b;
    7f7c:	e0bf7117 	ldw	r2,-572(fp)
    7f80:	e0bf7315 	stw	r2,-564(fp)
    7f84:	e0bf7217 	ldw	r2,-568(fp)
    7f88:	e0bf7415 	stw	r2,-560(fp)
		b = a;
    7f8c:	e0bf6f17 	ldw	r2,-580(fp)
    7f90:	e0bf7115 	stw	r2,-572(fp)
    7f94:	e0bf7017 	ldw	r2,-576(fp)
    7f98:	e0bf7215 	stw	r2,-568(fp)
		a = T1 + T2;
    7f9c:	e1ff8017 	ldw	r7,-512(fp)
    7fa0:	e23f8117 	ldw	r8,-508(fp)
    7fa4:	e13f8217 	ldw	r4,-504(fp)
    7fa8:	e17f8317 	ldw	r5,-500(fp)
    7fac:	3905883a 	add	r2,r7,r4
    7fb0:	11cd803a 	cmpltu	r6,r2,r7
    7fb4:	4147883a 	add	r3,r8,r5
    7fb8:	30c9883a 	add	r4,r6,r3
    7fbc:	2007883a 	mov	r3,r4
    7fc0:	e0bf6f15 	stw	r2,-580(fp)
    7fc4:	e0ff7015 	stw	r3,-576(fp)

		j++;
    7fc8:	e0bf7f17 	ldw	r2,-516(fp)
    7fcc:	10800044 	addi	r2,r2,1
    7fd0:	e0bf7f15 	stw	r2,-516(fp)
	} while (j < 80);
    7fd4:	e0bf7f17 	ldw	r2,-516(fp)
    7fd8:	10801410 	cmplti	r2,r2,80
    7fdc:	103e341e 	bne	r2,zero,78b0 <__alt_mem_epcs_flash_controller+0xfdffe8b0>

	/* Compute the current intermediate hash value */
	state_out[0] = state_in[0] + a;
    7fe0:	e0bfa817 	ldw	r2,-352(fp)
    7fe4:	11000017 	ldw	r4,0(r2)
    7fe8:	11400117 	ldw	r5,4(r2)
    7fec:	e1bf6f17 	ldw	r6,-580(fp)
    7ff0:	e1ff7017 	ldw	r7,-576(fp)
    7ff4:	2185883a 	add	r2,r4,r6
    7ff8:	1111803a 	cmpltu	r8,r2,r4
    7ffc:	29c7883a 	add	r3,r5,r7
    8000:	40c9883a 	add	r4,r8,r3
    8004:	2007883a 	mov	r3,r4
    8008:	1009883a 	mov	r4,r2
    800c:	180b883a 	mov	r5,r3
    8010:	e0bfaa17 	ldw	r2,-344(fp)
    8014:	11000015 	stw	r4,0(r2)
    8018:	11400115 	stw	r5,4(r2)
	state_out[1] = state_in[1] + b;
    801c:	e0bfaa17 	ldw	r2,-344(fp)
    8020:	12000204 	addi	r8,r2,8
    8024:	e0bfa817 	ldw	r2,-352(fp)
    8028:	10800204 	addi	r2,r2,8
    802c:	11000017 	ldw	r4,0(r2)
    8030:	11400117 	ldw	r5,4(r2)
    8034:	e1bf7117 	ldw	r6,-572(fp)
    8038:	e1ff7217 	ldw	r7,-568(fp)
    803c:	2185883a 	add	r2,r4,r6
    8040:	1113803a 	cmpltu	r9,r2,r4
    8044:	29c7883a 	add	r3,r5,r7
    8048:	48c9883a 	add	r4,r9,r3
    804c:	2007883a 	mov	r3,r4
    8050:	1009883a 	mov	r4,r2
    8054:	180b883a 	mov	r5,r3
    8058:	41000015 	stw	r4,0(r8)
    805c:	41400115 	stw	r5,4(r8)
	state_out[2] = state_in[2] + c;
    8060:	e0bfaa17 	ldw	r2,-344(fp)
    8064:	12000404 	addi	r8,r2,16
    8068:	e0bfa817 	ldw	r2,-352(fp)
    806c:	10800404 	addi	r2,r2,16
    8070:	11000017 	ldw	r4,0(r2)
    8074:	11400117 	ldw	r5,4(r2)
    8078:	e1bf7317 	ldw	r6,-564(fp)
    807c:	e1ff7417 	ldw	r7,-560(fp)
    8080:	2185883a 	add	r2,r4,r6
    8084:	1113803a 	cmpltu	r9,r2,r4
    8088:	29c7883a 	add	r3,r5,r7
    808c:	48c9883a 	add	r4,r9,r3
    8090:	2007883a 	mov	r3,r4
    8094:	1009883a 	mov	r4,r2
    8098:	180b883a 	mov	r5,r3
    809c:	41000015 	stw	r4,0(r8)
    80a0:	41400115 	stw	r5,4(r8)
	state_out[3] = state_in[3] + d;
    80a4:	e0bfaa17 	ldw	r2,-344(fp)
    80a8:	12000604 	addi	r8,r2,24
    80ac:	e0bfa817 	ldw	r2,-352(fp)
    80b0:	10800604 	addi	r2,r2,24
    80b4:	11000017 	ldw	r4,0(r2)
    80b8:	11400117 	ldw	r5,4(r2)
    80bc:	e1bf7517 	ldw	r6,-556(fp)
    80c0:	e1ff7617 	ldw	r7,-552(fp)
    80c4:	2185883a 	add	r2,r4,r6
    80c8:	1113803a 	cmpltu	r9,r2,r4
    80cc:	29c7883a 	add	r3,r5,r7
    80d0:	48c9883a 	add	r4,r9,r3
    80d4:	2007883a 	mov	r3,r4
    80d8:	1009883a 	mov	r4,r2
    80dc:	180b883a 	mov	r5,r3
    80e0:	41000015 	stw	r4,0(r8)
    80e4:	41400115 	stw	r5,4(r8)
	state_out[4] = state_in[4] + e;
    80e8:	e0bfaa17 	ldw	r2,-344(fp)
    80ec:	12000804 	addi	r8,r2,32
    80f0:	e0bfa817 	ldw	r2,-352(fp)
    80f4:	10800804 	addi	r2,r2,32
    80f8:	11000017 	ldw	r4,0(r2)
    80fc:	11400117 	ldw	r5,4(r2)
    8100:	e1bf7717 	ldw	r6,-548(fp)
    8104:	e1ff7817 	ldw	r7,-544(fp)
    8108:	2185883a 	add	r2,r4,r6
    810c:	1113803a 	cmpltu	r9,r2,r4
    8110:	29c7883a 	add	r3,r5,r7
    8114:	48c9883a 	add	r4,r9,r3
    8118:	2007883a 	mov	r3,r4
    811c:	1009883a 	mov	r4,r2
    8120:	180b883a 	mov	r5,r3
    8124:	41000015 	stw	r4,0(r8)
    8128:	41400115 	stw	r5,4(r8)
	state_out[5] = state_in[5] + f;
    812c:	e0bfaa17 	ldw	r2,-344(fp)
    8130:	12000a04 	addi	r8,r2,40
    8134:	e0bfa817 	ldw	r2,-352(fp)
    8138:	10800a04 	addi	r2,r2,40
    813c:	11000017 	ldw	r4,0(r2)
    8140:	11400117 	ldw	r5,4(r2)
    8144:	e1bf7917 	ldw	r6,-540(fp)
    8148:	e1ff7a17 	ldw	r7,-536(fp)
    814c:	2185883a 	add	r2,r4,r6
    8150:	1113803a 	cmpltu	r9,r2,r4
    8154:	29c7883a 	add	r3,r5,r7
    8158:	48c9883a 	add	r4,r9,r3
    815c:	2007883a 	mov	r3,r4
    8160:	1009883a 	mov	r4,r2
    8164:	180b883a 	mov	r5,r3
    8168:	41000015 	stw	r4,0(r8)
    816c:	41400115 	stw	r5,4(r8)
	state_out[6] = state_in[6] + g;
    8170:	e0bfaa17 	ldw	r2,-344(fp)
    8174:	12000c04 	addi	r8,r2,48
    8178:	e0bfa817 	ldw	r2,-352(fp)
    817c:	10800c04 	addi	r2,r2,48
    8180:	11000017 	ldw	r4,0(r2)
    8184:	11400117 	ldw	r5,4(r2)
    8188:	e1bf7b17 	ldw	r6,-532(fp)
    818c:	e1ff7c17 	ldw	r7,-528(fp)
    8190:	2185883a 	add	r2,r4,r6
    8194:	1113803a 	cmpltu	r9,r2,r4
    8198:	29c7883a 	add	r3,r5,r7
    819c:	48c9883a 	add	r4,r9,r3
    81a0:	2007883a 	mov	r3,r4
    81a4:	1009883a 	mov	r4,r2
    81a8:	180b883a 	mov	r5,r3
    81ac:	41000015 	stw	r4,0(r8)
    81b0:	41400115 	stw	r5,4(r8)
	state_out[7] = state_in[7] + h;
    81b4:	e0bfaa17 	ldw	r2,-344(fp)
    81b8:	12000e04 	addi	r8,r2,56
    81bc:	e0bfa817 	ldw	r2,-352(fp)
    81c0:	10800e04 	addi	r2,r2,56
    81c4:	11000017 	ldw	r4,0(r2)
    81c8:	11400117 	ldw	r5,4(r2)
    81cc:	e1bf7d17 	ldw	r6,-524(fp)
    81d0:	e1ff7e17 	ldw	r7,-520(fp)
    81d4:	2185883a 	add	r2,r4,r6
    81d8:	1113803a 	cmpltu	r9,r2,r4
    81dc:	29c7883a 	add	r3,r5,r7
    81e0:	48c9883a 	add	r4,r9,r3
    81e4:	2007883a 	mov	r3,r4
    81e8:	1009883a 	mov	r4,r2
    81ec:	180b883a 	mov	r5,r3
    81f0:	41000015 	stw	r4,0(r8)
    81f4:	41400115 	stw	r5,4(r8)

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
    81f8:	e03f8215 	stw	zero,-504(fp)
    81fc:	e03f8315 	stw	zero,-500(fp)
    8200:	e0bf8217 	ldw	r2,-504(fp)
    8204:	e0bf8015 	stw	r2,-512(fp)
    8208:	e0bf8317 	ldw	r2,-500(fp)
    820c:	e0bf8115 	stw	r2,-508(fp)
    8210:	e0bf8017 	ldw	r2,-512(fp)
    8214:	e0bf7d15 	stw	r2,-524(fp)
    8218:	e0bf8117 	ldw	r2,-508(fp)
    821c:	e0bf7e15 	stw	r2,-520(fp)
    8220:	e0bf7d17 	ldw	r2,-524(fp)
    8224:	e0bf7b15 	stw	r2,-532(fp)
    8228:	e0bf7e17 	ldw	r2,-520(fp)
    822c:	e0bf7c15 	stw	r2,-528(fp)
    8230:	e0bf7b17 	ldw	r2,-532(fp)
    8234:	e0bf7915 	stw	r2,-540(fp)
    8238:	e0bf7c17 	ldw	r2,-528(fp)
    823c:	e0bf7a15 	stw	r2,-536(fp)
    8240:	e0bf7917 	ldw	r2,-540(fp)
    8244:	e0bf7715 	stw	r2,-548(fp)
    8248:	e0bf7a17 	ldw	r2,-536(fp)
    824c:	e0bf7815 	stw	r2,-544(fp)
    8250:	e0bf7717 	ldw	r2,-548(fp)
    8254:	e0bf7515 	stw	r2,-556(fp)
    8258:	e0bf7817 	ldw	r2,-544(fp)
    825c:	e0bf7615 	stw	r2,-552(fp)
    8260:	e0bf7517 	ldw	r2,-556(fp)
    8264:	e0bf7315 	stw	r2,-564(fp)
    8268:	e0bf7617 	ldw	r2,-552(fp)
    826c:	e0bf7415 	stw	r2,-560(fp)
    8270:	e0bf7317 	ldw	r2,-564(fp)
    8274:	e0bf7115 	stw	r2,-572(fp)
    8278:	e0bf7417 	ldw	r2,-560(fp)
    827c:	e0bf7215 	stw	r2,-568(fp)
    8280:	e0bf7117 	ldw	r2,-572(fp)
    8284:	e0bf6f15 	stw	r2,-580(fp)
    8288:	e0bf7217 	ldw	r2,-568(fp)
    828c:	e0bf7015 	stw	r2,-576(fp)
}
    8290:	0001883a 	nop
    8294:	e6fff904 	addi	sp,fp,-28
    8298:	df000717 	ldw	fp,28(sp)
    829c:	dd800617 	ldw	r22,24(sp)
    82a0:	dd400517 	ldw	r21,20(sp)
    82a4:	dd000417 	ldw	r20,16(sp)
    82a8:	dcc00317 	ldw	r19,12(sp)
    82ac:	dc800217 	ldw	r18,8(sp)
    82b0:	dc400117 	ldw	r17,4(sp)
    82b4:	dc000017 	ldw	r16,0(sp)
    82b8:	dec00804 	addi	sp,sp,32
    82bc:	f800283a 	ret

000082c0 <trezor_sha512_Update>:

#endif /* SHA2_UNROLL_TRANSFORM */

void trezor_sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
    82c0:	deffbf04 	addi	sp,sp,-260
    82c4:	dfc04015 	stw	ra,256(sp)
    82c8:	df003f15 	stw	fp,252(sp)
    82cc:	ddc03e15 	stw	r23,248(sp)
    82d0:	dd803d15 	stw	r22,244(sp)
    82d4:	dd403c15 	stw	r21,240(sp)
    82d8:	dd003b15 	stw	r20,236(sp)
    82dc:	dcc03a15 	stw	r19,232(sp)
    82e0:	dc803915 	stw	r18,228(sp)
    82e4:	dc403815 	stw	r17,224(sp)
    82e8:	dc003715 	stw	r16,220(sp)
    82ec:	df003f04 	addi	fp,sp,252
    82f0:	e13fc915 	stw	r4,-220(fp)
    82f4:	e17fca15 	stw	r5,-216(fp)
    82f8:	e1bfcb15 	stw	r6,-212(fp)
	unsigned int	freespace, usedspace;

	if (len == 0) {
    82fc:	e0bfcb17 	ldw	r2,-212(fp)
    8300:	1001fd26 	beq	r2,zero,8af8 <trezor_sha512_Update+0x838>
		/* Calling with no data is valid - we do nothing */
		return;
	}

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    8304:	e13fc917 	ldw	r4,-220(fp)
    8308:	20801017 	ldw	r2,64(r4)
    830c:	20c01117 	ldw	r3,68(r4)
    8310:	1808977a 	slli	r4,r3,29
    8314:	100ed0fa 	srli	r7,r2,3
    8318:	21ceb03a 	or	r7,r4,r7
    831c:	1810d0fa 	srli	r8,r3,3
    8320:	3805883a 	mov	r2,r7
    8324:	10801fcc 	andi	r2,r2,127
    8328:	e0bfc315 	stw	r2,-244(fp)
	if (usedspace > 0) {
    832c:	e0bfc317 	ldw	r2,-244(fp)
    8330:	1001b326 	beq	r2,zero,8a00 <trezor_sha512_Update+0x740>
		/* Calculate how much free space is available in the buffer */
		freespace = SHA512_BLOCK_LENGTH - usedspace;
    8334:	00c02004 	movi	r3,128
    8338:	e0bfc317 	ldw	r2,-244(fp)
    833c:	1885c83a 	sub	r2,r3,r2
    8340:	e0bfc415 	stw	r2,-240(fp)

		if (len >= freespace) {
    8344:	e0ffcb17 	ldw	r3,-212(fp)
    8348:	e0bfc417 	ldw	r2,-240(fp)
    834c:	1880c036 	bltu	r3,r2,8650 <trezor_sha512_Update+0x390>
			/* Fill the buffer completely and process it */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, freespace);
    8350:	e0bfc917 	ldw	r2,-220(fp)
    8354:	10c01404 	addi	r3,r2,80
    8358:	e0bfc317 	ldw	r2,-244(fp)
    835c:	1885883a 	add	r2,r3,r2
    8360:	e1bfc417 	ldw	r6,-240(fp)
    8364:	e17fca17 	ldw	r5,-216(fp)
    8368:	1009883a 	mov	r4,r2
    836c:	00095dc0 	call	95dc <memcpy>
			ADDINC128(context->bitcount, freespace << 3);
    8370:	e0bfc917 	ldw	r2,-220(fp)
    8374:	11401017 	ldw	r5,64(r2)
    8378:	11801117 	ldw	r6,68(r2)
    837c:	e0bfc417 	ldw	r2,-240(fp)
    8380:	100490fa 	slli	r2,r2,3
    8384:	102d883a 	mov	r22,r2
    8388:	002f883a 	mov	r23,zero
    838c:	2d85883a 	add	r2,r5,r22
    8390:	1149803a 	cmpltu	r4,r2,r5
    8394:	35c7883a 	add	r3,r6,r23
    8398:	20c9883a 	add	r4,r4,r3
    839c:	2007883a 	mov	r3,r4
    83a0:	1009883a 	mov	r4,r2
    83a4:	180b883a 	mov	r5,r3
    83a8:	e0bfc917 	ldw	r2,-220(fp)
    83ac:	11001015 	stw	r4,64(r2)
    83b0:	11401115 	stw	r5,68(r2)
    83b4:	e0bfc917 	ldw	r2,-220(fp)
    83b8:	10c01017 	ldw	r3,64(r2)
    83bc:	11001117 	ldw	r4,68(r2)
    83c0:	e0bfc417 	ldw	r2,-240(fp)
    83c4:	100490fa 	slli	r2,r2,3
    83c8:	1029883a 	mov	r20,r2
    83cc:	002b883a 	mov	r21,zero
    83d0:	25400236 	bltu	r4,r21,83dc <trezor_sha512_Update+0x11c>
    83d4:	a900101e 	bne	r21,r4,8418 <trezor_sha512_Update+0x158>
    83d8:	1d000f2e 	bgeu	r3,r20,8418 <trezor_sha512_Update+0x158>
    83dc:	e0bfc917 	ldw	r2,-220(fp)
    83e0:	11c01217 	ldw	r7,72(r2)
    83e4:	12001317 	ldw	r8,76(r2)
    83e8:	01000044 	movi	r4,1
    83ec:	000b883a 	mov	r5,zero
    83f0:	3905883a 	add	r2,r7,r4
    83f4:	11cd803a 	cmpltu	r6,r2,r7
    83f8:	4147883a 	add	r3,r8,r5
    83fc:	30c9883a 	add	r4,r6,r3
    8400:	2007883a 	mov	r3,r4
    8404:	1009883a 	mov	r4,r2
    8408:	180b883a 	mov	r5,r3
    840c:	e0bfc917 	ldw	r2,-220(fp)
    8410:	11001215 	stw	r4,72(r2)
    8414:	11401315 	stw	r5,76(r2)
			len -= freespace;
    8418:	e0ffcb17 	ldw	r3,-212(fp)
    841c:	e0bfc417 	ldw	r2,-240(fp)
    8420:	1885c83a 	sub	r2,r3,r2
    8424:	e0bfcb15 	stw	r2,-212(fp)
			data += freespace;
    8428:	e0ffca17 	ldw	r3,-216(fp)
    842c:	e0bfc417 	ldw	r2,-240(fp)
    8430:	1885883a 	add	r2,r3,r2
    8434:	e0bfca15 	stw	r2,-216(fp)
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    8438:	e03fc115 	stw	zero,-252(fp)
    843c:	00007906 	br	8624 <trezor_sha512_Update+0x364>
				REVERSE64(context->buffer[j],context->buffer[j]);
    8440:	e0ffc917 	ldw	r3,-220(fp)
    8444:	e0bfc117 	ldw	r2,-252(fp)
    8448:	10800284 	addi	r2,r2,10
    844c:	100490fa 	slli	r2,r2,3
    8450:	1887883a 	add	r3,r3,r2
    8454:	18800017 	ldw	r2,0(r3)
    8458:	e0bfc515 	stw	r2,-236(fp)
    845c:	18800117 	ldw	r2,4(r3)
    8460:	e0bfc615 	stw	r2,-232(fp)
    8464:	e0bfc617 	ldw	r2,-232(fp)
    8468:	e0bff415 	stw	r2,-48(fp)
    846c:	e0ffc517 	ldw	r3,-236(fp)
    8470:	e0fff515 	stw	r3,-44(fp)
    8474:	e13ff417 	ldw	r4,-48(fp)
    8478:	e13fc515 	stw	r4,-236(fp)
    847c:	e1bff517 	ldw	r6,-44(fp)
    8480:	e1bfc615 	stw	r6,-232(fp)
    8484:	e0ffc517 	ldw	r3,-236(fp)
    8488:	00bfc074 	movhi	r2,65281
    848c:	10bfc004 	addi	r2,r2,-256
    8490:	1884703a 	and	r2,r3,r2
    8494:	e0bfcc15 	stw	r2,-208(fp)
    8498:	e0ffc617 	ldw	r3,-232(fp)
    849c:	00bfc074 	movhi	r2,65281
    84a0:	10bfc004 	addi	r2,r2,-256
    84a4:	1884703a 	and	r2,r3,r2
    84a8:	e0bfcd15 	stw	r2,-204(fp)
    84ac:	e1ffcd17 	ldw	r7,-204(fp)
    84b0:	3804963a 	slli	r2,r7,24
    84b4:	e0ffcc17 	ldw	r3,-208(fp)
    84b8:	1806d23a 	srli	r3,r3,8
    84bc:	e0ffce15 	stw	r3,-200(fp)
    84c0:	e13fce17 	ldw	r4,-200(fp)
    84c4:	1104b03a 	or	r2,r2,r4
    84c8:	e0bfce15 	stw	r2,-200(fp)
    84cc:	e1bfcd17 	ldw	r6,-204(fp)
    84d0:	300cd23a 	srli	r6,r6,8
    84d4:	e1bfcf15 	stw	r6,-196(fp)
    84d8:	e0ffc517 	ldw	r3,-236(fp)
    84dc:	00803ff4 	movhi	r2,255
    84e0:	10803fc4 	addi	r2,r2,255
    84e4:	1884703a 	and	r2,r3,r2
    84e8:	e0bfd015 	stw	r2,-192(fp)
    84ec:	e0ffc617 	ldw	r3,-232(fp)
    84f0:	00803ff4 	movhi	r2,255
    84f4:	10803fc4 	addi	r2,r2,255
    84f8:	1884703a 	and	r2,r3,r2
    84fc:	e0bfd115 	stw	r2,-188(fp)
    8500:	e1ffd017 	ldw	r7,-192(fp)
    8504:	3804d63a 	srli	r2,r7,24
    8508:	e0ffd117 	ldw	r3,-188(fp)
    850c:	1806923a 	slli	r3,r3,8
    8510:	e0ffd315 	stw	r3,-180(fp)
    8514:	e13fd317 	ldw	r4,-180(fp)
    8518:	1104b03a 	or	r2,r2,r4
    851c:	e0bfd315 	stw	r2,-180(fp)
    8520:	e1bfd017 	ldw	r6,-192(fp)
    8524:	300c923a 	slli	r6,r6,8
    8528:	e1bfd215 	stw	r6,-184(fp)
    852c:	e1ffce17 	ldw	r7,-200(fp)
    8530:	e0ffd217 	ldw	r3,-184(fp)
    8534:	38c4b03a 	or	r2,r7,r3
    8538:	e0bfc515 	stw	r2,-236(fp)
    853c:	e13fcf17 	ldw	r4,-196(fp)
    8540:	e1bfd317 	ldw	r6,-180(fp)
    8544:	2184b03a 	or	r2,r4,r6
    8548:	e0bfc615 	stw	r2,-232(fp)
    854c:	e0bfc517 	ldw	r2,-236(fp)
    8550:	10bfffec 	andhi	r2,r2,65535
    8554:	e0bfd415 	stw	r2,-176(fp)
    8558:	e0bfc617 	ldw	r2,-232(fp)
    855c:	10bfffec 	andhi	r2,r2,65535
    8560:	e0bfd515 	stw	r2,-172(fp)
    8564:	e1ffd517 	ldw	r7,-172(fp)
    8568:	3804943a 	slli	r2,r7,16
    856c:	e0ffd417 	ldw	r3,-176(fp)
    8570:	1806d43a 	srli	r3,r3,16
    8574:	e0ffd615 	stw	r3,-168(fp)
    8578:	e13fd617 	ldw	r4,-168(fp)
    857c:	1104b03a 	or	r2,r2,r4
    8580:	e0bfd615 	stw	r2,-168(fp)
    8584:	e1bfd517 	ldw	r6,-172(fp)
    8588:	300cd43a 	srli	r6,r6,16
    858c:	e1bfd715 	stw	r6,-164(fp)
    8590:	e0bfc517 	ldw	r2,-236(fp)
    8594:	10bfffcc 	andi	r2,r2,65535
    8598:	e0bfd815 	stw	r2,-160(fp)
    859c:	e0bfc617 	ldw	r2,-232(fp)
    85a0:	10bfffcc 	andi	r2,r2,65535
    85a4:	e0bfd915 	stw	r2,-156(fp)
    85a8:	e1ffd817 	ldw	r7,-160(fp)
    85ac:	3804d43a 	srli	r2,r7,16
    85b0:	e0ffd917 	ldw	r3,-156(fp)
    85b4:	1806943a 	slli	r3,r3,16
    85b8:	e0ffdb15 	stw	r3,-148(fp)
    85bc:	e13fdb17 	ldw	r4,-148(fp)
    85c0:	1104b03a 	or	r2,r2,r4
    85c4:	e0bfdb15 	stw	r2,-148(fp)
    85c8:	e1bfd817 	ldw	r6,-160(fp)
    85cc:	300c943a 	slli	r6,r6,16
    85d0:	e1bfda15 	stw	r6,-152(fp)
    85d4:	e1ffd617 	ldw	r7,-168(fp)
    85d8:	e0bfda17 	ldw	r2,-152(fp)
    85dc:	388eb03a 	or	r7,r7,r2
    85e0:	e1ffdc15 	stw	r7,-144(fp)
    85e4:	e0ffd717 	ldw	r3,-164(fp)
    85e8:	e13fdb17 	ldw	r4,-148(fp)
    85ec:	1906b03a 	or	r3,r3,r4
    85f0:	e0ffdd15 	stw	r3,-140(fp)
    85f4:	e0ffc917 	ldw	r3,-220(fp)
    85f8:	e0bfc117 	ldw	r2,-252(fp)
    85fc:	10800284 	addi	r2,r2,10
    8600:	100490fa 	slli	r2,r2,3
    8604:	1885883a 	add	r2,r3,r2
    8608:	e1bfdc17 	ldw	r6,-144(fp)
    860c:	11800015 	stw	r6,0(r2)
    8610:	e1ffdd17 	ldw	r7,-140(fp)
    8614:	11c00115 	stw	r7,4(r2)
			ADDINC128(context->bitcount, freespace << 3);
			len -= freespace;
			data += freespace;
#if BYTE_ORDER == LITTLE_ENDIAN
			/* Convert TO host byte order */
			for (int j = 0; j < 16; j++) {
    8618:	e0bfc117 	ldw	r2,-252(fp)
    861c:	10800044 	addi	r2,r2,1
    8620:	e0bfc115 	stw	r2,-252(fp)
    8624:	e0bfc117 	ldw	r2,-252(fp)
    8628:	10800410 	cmplti	r2,r2,16
    862c:	103f841e 	bne	r2,zero,8440 <__alt_mem_epcs_flash_controller+0xfdfff440>
				REVERSE64(context->buffer[j],context->buffer[j]);
			}
#endif
			trezor_sha512_Transform(context->state, context->buffer, context->state);
    8630:	e13fc917 	ldw	r4,-220(fp)
    8634:	e0bfc917 	ldw	r2,-220(fp)
    8638:	10c01404 	addi	r3,r2,80
    863c:	e0bfc917 	ldw	r2,-220(fp)
    8640:	100d883a 	mov	r6,r2
    8644:	180b883a 	mov	r5,r3
    8648:	00073a00 	call	73a0 <trezor_sha512_Transform>
    864c:	0000ec06 	br	8a00 <trezor_sha512_Update+0x740>
		} else {
			/* The buffer is not yet full */
			MEMCPY_BCOPY(((uint8_t*)context->buffer) + usedspace, data, len);
    8650:	e0bfc917 	ldw	r2,-220(fp)
    8654:	10c01404 	addi	r3,r2,80
    8658:	e0bfc317 	ldw	r2,-244(fp)
    865c:	1885883a 	add	r2,r3,r2
    8660:	e1bfcb17 	ldw	r6,-212(fp)
    8664:	e17fca17 	ldw	r5,-216(fp)
    8668:	1009883a 	mov	r4,r2
    866c:	00095dc0 	call	95dc <memcpy>
			ADDINC128(context->bitcount, len << 3);
    8670:	e0bfc917 	ldw	r2,-220(fp)
    8674:	11001017 	ldw	r4,64(r2)
    8678:	11401117 	ldw	r5,68(r2)
    867c:	e0bfcb17 	ldw	r2,-212(fp)
    8680:	100490fa 	slli	r2,r2,3
    8684:	1025883a 	mov	r18,r2
    8688:	0027883a 	mov	r19,zero
    868c:	2485883a 	add	r2,r4,r18
    8690:	110d803a 	cmpltu	r6,r2,r4
    8694:	2cc7883a 	add	r3,r5,r19
    8698:	30c9883a 	add	r4,r6,r3
    869c:	2007883a 	mov	r3,r4
    86a0:	1009883a 	mov	r4,r2
    86a4:	180b883a 	mov	r5,r3
    86a8:	e0bfc917 	ldw	r2,-220(fp)
    86ac:	11001015 	stw	r4,64(r2)
    86b0:	11401115 	stw	r5,68(r2)
    86b4:	e13fc917 	ldw	r4,-220(fp)
    86b8:	20801017 	ldw	r2,64(r4)
    86bc:	20c01117 	ldw	r3,68(r4)
    86c0:	e13fcb17 	ldw	r4,-212(fp)
    86c4:	200890fa 	slli	r4,r4,3
    86c8:	2021883a 	mov	r16,r4
    86cc:	0023883a 	mov	r17,zero
    86d0:	1c400236 	bltu	r3,r17,86dc <trezor_sha512_Update+0x41c>
    86d4:	88c0101e 	bne	r17,r3,8718 <trezor_sha512_Update+0x458>
    86d8:	14000f2e 	bgeu	r2,r16,8718 <trezor_sha512_Update+0x458>
    86dc:	e0bfc917 	ldw	r2,-220(fp)
    86e0:	11001217 	ldw	r4,72(r2)
    86e4:	11401317 	ldw	r5,76(r2)
    86e8:	01800044 	movi	r6,1
    86ec:	000f883a 	mov	r7,zero
    86f0:	2185883a 	add	r2,r4,r6
    86f4:	1111803a 	cmpltu	r8,r2,r4
    86f8:	29c7883a 	add	r3,r5,r7
    86fc:	40c9883a 	add	r4,r8,r3
    8700:	2007883a 	mov	r3,r4
    8704:	1009883a 	mov	r4,r2
    8708:	180b883a 	mov	r5,r3
    870c:	e0bfc917 	ldw	r2,-220(fp)
    8710:	11001215 	stw	r4,72(r2)
    8714:	11401315 	stw	r5,76(r2)
			/* Clean up: */
			usedspace = freespace = 0;
    8718:	e03fc415 	stw	zero,-240(fp)
    871c:	e0bfc417 	ldw	r2,-240(fp)
    8720:	e0bfc315 	stw	r2,-244(fp)
			return;
    8724:	0000f506 	br	8afc <trezor_sha512_Update+0x83c>
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
    8728:	e0bfc917 	ldw	r2,-220(fp)
    872c:	10801404 	addi	r2,r2,80
    8730:	01802004 	movi	r6,128
    8734:	e17fca17 	ldw	r5,-216(fp)
    8738:	1009883a 	mov	r4,r2
    873c:	00095dc0 	call	95dc <memcpy>
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    8740:	e03fc215 	stw	zero,-248(fp)
    8744:	00007906 	br	892c <trezor_sha512_Update+0x66c>
			REVERSE64(context->buffer[j],context->buffer[j]);
    8748:	e0ffc917 	ldw	r3,-220(fp)
    874c:	e0bfc217 	ldw	r2,-248(fp)
    8750:	10800284 	addi	r2,r2,10
    8754:	100490fa 	slli	r2,r2,3
    8758:	1887883a 	add	r3,r3,r2
    875c:	18800017 	ldw	r2,0(r3)
    8760:	e0bfc715 	stw	r2,-228(fp)
    8764:	18800117 	ldw	r2,4(r3)
    8768:	e0bfc815 	stw	r2,-224(fp)
    876c:	e0bfc817 	ldw	r2,-224(fp)
    8770:	e0bff615 	stw	r2,-40(fp)
    8774:	e0ffc717 	ldw	r3,-228(fp)
    8778:	e0fff715 	stw	r3,-36(fp)
    877c:	e13ff617 	ldw	r4,-40(fp)
    8780:	e13fc715 	stw	r4,-228(fp)
    8784:	e1bff717 	ldw	r6,-36(fp)
    8788:	e1bfc815 	stw	r6,-224(fp)
    878c:	e0ffc717 	ldw	r3,-228(fp)
    8790:	00bfc074 	movhi	r2,65281
    8794:	10bfc004 	addi	r2,r2,-256
    8798:	1884703a 	and	r2,r3,r2
    879c:	e0bfde15 	stw	r2,-136(fp)
    87a0:	e0ffc817 	ldw	r3,-224(fp)
    87a4:	00bfc074 	movhi	r2,65281
    87a8:	10bfc004 	addi	r2,r2,-256
    87ac:	1884703a 	and	r2,r3,r2
    87b0:	e0bfdf15 	stw	r2,-132(fp)
    87b4:	e1ffdf17 	ldw	r7,-132(fp)
    87b8:	3804963a 	slli	r2,r7,24
    87bc:	e0ffde17 	ldw	r3,-136(fp)
    87c0:	1806d23a 	srli	r3,r3,8
    87c4:	e0ffe015 	stw	r3,-128(fp)
    87c8:	e13fe017 	ldw	r4,-128(fp)
    87cc:	1104b03a 	or	r2,r2,r4
    87d0:	e0bfe015 	stw	r2,-128(fp)
    87d4:	e1bfdf17 	ldw	r6,-132(fp)
    87d8:	300cd23a 	srli	r6,r6,8
    87dc:	e1bfe115 	stw	r6,-124(fp)
    87e0:	e0ffc717 	ldw	r3,-228(fp)
    87e4:	00803ff4 	movhi	r2,255
    87e8:	10803fc4 	addi	r2,r2,255
    87ec:	1884703a 	and	r2,r3,r2
    87f0:	e0bfe215 	stw	r2,-120(fp)
    87f4:	e0ffc817 	ldw	r3,-224(fp)
    87f8:	00803ff4 	movhi	r2,255
    87fc:	10803fc4 	addi	r2,r2,255
    8800:	1884703a 	and	r2,r3,r2
    8804:	e0bfe315 	stw	r2,-116(fp)
    8808:	e1ffe217 	ldw	r7,-120(fp)
    880c:	3804d63a 	srli	r2,r7,24
    8810:	e0ffe317 	ldw	r3,-116(fp)
    8814:	1806923a 	slli	r3,r3,8
    8818:	e0ffe515 	stw	r3,-108(fp)
    881c:	e13fe517 	ldw	r4,-108(fp)
    8820:	1104b03a 	or	r2,r2,r4
    8824:	e0bfe515 	stw	r2,-108(fp)
    8828:	e1bfe217 	ldw	r6,-120(fp)
    882c:	300c923a 	slli	r6,r6,8
    8830:	e1bfe415 	stw	r6,-112(fp)
    8834:	e1ffe017 	ldw	r7,-128(fp)
    8838:	e0ffe417 	ldw	r3,-112(fp)
    883c:	38c4b03a 	or	r2,r7,r3
    8840:	e0bfc715 	stw	r2,-228(fp)
    8844:	e13fe117 	ldw	r4,-124(fp)
    8848:	e1bfe517 	ldw	r6,-108(fp)
    884c:	2184b03a 	or	r2,r4,r6
    8850:	e0bfc815 	stw	r2,-224(fp)
    8854:	e0bfc717 	ldw	r2,-228(fp)
    8858:	10bfffec 	andhi	r2,r2,65535
    885c:	e0bfe615 	stw	r2,-104(fp)
    8860:	e0bfc817 	ldw	r2,-224(fp)
    8864:	10bfffec 	andhi	r2,r2,65535
    8868:	e0bfe715 	stw	r2,-100(fp)
    886c:	e1ffe717 	ldw	r7,-100(fp)
    8870:	3804943a 	slli	r2,r7,16
    8874:	e0ffe617 	ldw	r3,-104(fp)
    8878:	1806d43a 	srli	r3,r3,16
    887c:	e0ffe815 	stw	r3,-96(fp)
    8880:	e13fe817 	ldw	r4,-96(fp)
    8884:	1104b03a 	or	r2,r2,r4
    8888:	e0bfe815 	stw	r2,-96(fp)
    888c:	e1bfe717 	ldw	r6,-100(fp)
    8890:	300cd43a 	srli	r6,r6,16
    8894:	e1bfe915 	stw	r6,-92(fp)
    8898:	e0bfc717 	ldw	r2,-228(fp)
    889c:	10bfffcc 	andi	r2,r2,65535
    88a0:	e0bfea15 	stw	r2,-88(fp)
    88a4:	e0bfc817 	ldw	r2,-224(fp)
    88a8:	10bfffcc 	andi	r2,r2,65535
    88ac:	e0bfeb15 	stw	r2,-84(fp)
    88b0:	e1ffea17 	ldw	r7,-88(fp)
    88b4:	3804d43a 	srli	r2,r7,16
    88b8:	e0ffeb17 	ldw	r3,-84(fp)
    88bc:	1806943a 	slli	r3,r3,16
    88c0:	e0ffed15 	stw	r3,-76(fp)
    88c4:	e13fed17 	ldw	r4,-76(fp)
    88c8:	1104b03a 	or	r2,r2,r4
    88cc:	e0bfed15 	stw	r2,-76(fp)
    88d0:	e1bfea17 	ldw	r6,-88(fp)
    88d4:	300c943a 	slli	r6,r6,16
    88d8:	e1bfec15 	stw	r6,-80(fp)
    88dc:	e1ffe817 	ldw	r7,-96(fp)
    88e0:	e0bfec17 	ldw	r2,-80(fp)
    88e4:	388eb03a 	or	r7,r7,r2
    88e8:	e1ffee15 	stw	r7,-72(fp)
    88ec:	e0ffe917 	ldw	r3,-92(fp)
    88f0:	e13fed17 	ldw	r4,-76(fp)
    88f4:	1906b03a 	or	r3,r3,r4
    88f8:	e0ffef15 	stw	r3,-68(fp)
    88fc:	e0ffc917 	ldw	r3,-220(fp)
    8900:	e0bfc217 	ldw	r2,-248(fp)
    8904:	10800284 	addi	r2,r2,10
    8908:	100490fa 	slli	r2,r2,3
    890c:	1885883a 	add	r2,r3,r2
    8910:	e1bfee17 	ldw	r6,-72(fp)
    8914:	11800015 	stw	r6,0(r2)
    8918:	e1ffef17 	ldw	r7,-68(fp)
    891c:	11c00115 	stw	r7,4(r2)
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		MEMCPY_BCOPY(context->buffer, data, SHA512_BLOCK_LENGTH);
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    8920:	e0bfc217 	ldw	r2,-248(fp)
    8924:	10800044 	addi	r2,r2,1
    8928:	e0bfc215 	stw	r2,-248(fp)
    892c:	e0bfc217 	ldw	r2,-248(fp)
    8930:	10800410 	cmplti	r2,r2,16
    8934:	103f841e 	bne	r2,zero,8748 <__alt_mem_epcs_flash_controller+0xfdfff748>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		trezor_sha512_Transform(context->state, context->buffer, context->state);
    8938:	e13fc917 	ldw	r4,-220(fp)
    893c:	e0bfc917 	ldw	r2,-220(fp)
    8940:	10c01404 	addi	r3,r2,80
    8944:	e0bfc917 	ldw	r2,-220(fp)
    8948:	100d883a 	mov	r6,r2
    894c:	180b883a 	mov	r5,r3
    8950:	00073a00 	call	73a0 <trezor_sha512_Transform>
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
    8954:	e0bfc917 	ldw	r2,-220(fp)
    8958:	11c01017 	ldw	r7,64(r2)
    895c:	12001117 	ldw	r8,68(r2)
    8960:	01010004 	movi	r4,1024
    8964:	000b883a 	mov	r5,zero
    8968:	3905883a 	add	r2,r7,r4
    896c:	11cd803a 	cmpltu	r6,r2,r7
    8970:	4147883a 	add	r3,r8,r5
    8974:	30c9883a 	add	r4,r6,r3
    8978:	2007883a 	mov	r3,r4
    897c:	1009883a 	mov	r4,r2
    8980:	180b883a 	mov	r5,r3
    8984:	e0bfc917 	ldw	r2,-220(fp)
    8988:	11001015 	stw	r4,64(r2)
    898c:	11401115 	stw	r5,68(r2)
    8990:	e13fc917 	ldw	r4,-220(fp)
    8994:	20801017 	ldw	r2,64(r4)
    8998:	20c01117 	ldw	r3,68(r4)
    899c:	1800121e 	bne	r3,zero,89e8 <trezor_sha512_Update+0x728>
    89a0:	1800021e 	bne	r3,zero,89ac <trezor_sha512_Update+0x6ec>
    89a4:	10810028 	cmpgeui	r2,r2,1024
    89a8:	10000f1e 	bne	r2,zero,89e8 <trezor_sha512_Update+0x728>
    89ac:	e0bfc917 	ldw	r2,-220(fp)
    89b0:	11c01217 	ldw	r7,72(r2)
    89b4:	12001317 	ldw	r8,76(r2)
    89b8:	01000044 	movi	r4,1
    89bc:	000b883a 	mov	r5,zero
    89c0:	3905883a 	add	r2,r7,r4
    89c4:	11cd803a 	cmpltu	r6,r2,r7
    89c8:	4147883a 	add	r3,r8,r5
    89cc:	30c9883a 	add	r4,r6,r3
    89d0:	2007883a 	mov	r3,r4
    89d4:	1009883a 	mov	r4,r2
    89d8:	180b883a 	mov	r5,r3
    89dc:	e0bfc917 	ldw	r2,-220(fp)
    89e0:	11001215 	stw	r4,72(r2)
    89e4:	11401315 	stw	r5,76(r2)
		len -= SHA512_BLOCK_LENGTH;
    89e8:	e0bfcb17 	ldw	r2,-212(fp)
    89ec:	10bfe004 	addi	r2,r2,-128
    89f0:	e0bfcb15 	stw	r2,-212(fp)
		data += SHA512_BLOCK_LENGTH;
    89f4:	e0bfca17 	ldw	r2,-216(fp)
    89f8:	10802004 	addi	r2,r2,128
    89fc:	e0bfca15 	stw	r2,-216(fp)
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
    8a00:	e0bfcb17 	ldw	r2,-212(fp)
    8a04:	10802028 	cmpgeui	r2,r2,128
    8a08:	103f471e 	bne	r2,zero,8728 <__alt_mem_epcs_flash_controller+0xfdfff728>
		trezor_sha512_Transform(context->state, context->buffer, context->state);
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
		len -= SHA512_BLOCK_LENGTH;
		data += SHA512_BLOCK_LENGTH;
	}
	if (len > 0) {
    8a0c:	e0bfcb17 	ldw	r2,-212(fp)
    8a10:	10003526 	beq	r2,zero,8ae8 <trezor_sha512_Update+0x828>
		/* There's left-overs, so save 'em */
		MEMCPY_BCOPY(context->buffer, data, len);
    8a14:	e0bfc917 	ldw	r2,-220(fp)
    8a18:	10801404 	addi	r2,r2,80
    8a1c:	e1bfcb17 	ldw	r6,-212(fp)
    8a20:	e17fca17 	ldw	r5,-216(fp)
    8a24:	1009883a 	mov	r4,r2
    8a28:	00095dc0 	call	95dc <memcpy>
		ADDINC128(context->bitcount, len << 3);
    8a2c:	e0bfc917 	ldw	r2,-220(fp)
    8a30:	11001017 	ldw	r4,64(r2)
    8a34:	11401117 	ldw	r5,68(r2)
    8a38:	e0bfcb17 	ldw	r2,-212(fp)
    8a3c:	100490fa 	slli	r2,r2,3
    8a40:	e0bff015 	stw	r2,-64(fp)
    8a44:	e03ff115 	stw	zero,-60(fp)
    8a48:	e1bff017 	ldw	r6,-64(fp)
    8a4c:	2185883a 	add	r2,r4,r6
    8a50:	110d803a 	cmpltu	r6,r2,r4
    8a54:	e1fff117 	ldw	r7,-60(fp)
    8a58:	29c7883a 	add	r3,r5,r7
    8a5c:	30c9883a 	add	r4,r6,r3
    8a60:	2007883a 	mov	r3,r4
    8a64:	1009883a 	mov	r4,r2
    8a68:	180b883a 	mov	r5,r3
    8a6c:	e0bfc917 	ldw	r2,-220(fp)
    8a70:	11001015 	stw	r4,64(r2)
    8a74:	11401115 	stw	r5,68(r2)
    8a78:	e13fc917 	ldw	r4,-220(fp)
    8a7c:	20801017 	ldw	r2,64(r4)
    8a80:	20c01117 	ldw	r3,68(r4)
    8a84:	e13fcb17 	ldw	r4,-212(fp)
    8a88:	200890fa 	slli	r4,r4,3
    8a8c:	e13ff215 	stw	r4,-56(fp)
    8a90:	e03ff315 	stw	zero,-52(fp)
    8a94:	e13ff317 	ldw	r4,-52(fp)
    8a98:	19000436 	bltu	r3,r4,8aac <trezor_sha512_Update+0x7ec>
    8a9c:	e1bff317 	ldw	r6,-52(fp)
    8aa0:	30c0111e 	bne	r6,r3,8ae8 <trezor_sha512_Update+0x828>
    8aa4:	e1fff217 	ldw	r7,-56(fp)
    8aa8:	11c00f2e 	bgeu	r2,r7,8ae8 <trezor_sha512_Update+0x828>
    8aac:	e0bfc917 	ldw	r2,-220(fp)
    8ab0:	11001217 	ldw	r4,72(r2)
    8ab4:	11401317 	ldw	r5,76(r2)
    8ab8:	01800044 	movi	r6,1
    8abc:	000f883a 	mov	r7,zero
    8ac0:	2185883a 	add	r2,r4,r6
    8ac4:	1111803a 	cmpltu	r8,r2,r4
    8ac8:	29c7883a 	add	r3,r5,r7
    8acc:	40c9883a 	add	r4,r8,r3
    8ad0:	2007883a 	mov	r3,r4
    8ad4:	1009883a 	mov	r4,r2
    8ad8:	180b883a 	mov	r5,r3
    8adc:	e0bfc917 	ldw	r2,-220(fp)
    8ae0:	11001215 	stw	r4,72(r2)
    8ae4:	11401315 	stw	r5,76(r2)
	}
	/* Clean up: */
	usedspace = freespace = 0;
    8ae8:	e03fc415 	stw	zero,-240(fp)
    8aec:	e0bfc417 	ldw	r2,-240(fp)
    8af0:	e0bfc315 	stw	r2,-244(fp)
    8af4:	00000106 	br	8afc <trezor_sha512_Update+0x83c>
void trezor_sha512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
	unsigned int	freespace, usedspace;

	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
		return;
    8af8:	0001883a 	nop
		MEMCPY_BCOPY(context->buffer, data, len);
		ADDINC128(context->bitcount, len << 3);
	}
	/* Clean up: */
	usedspace = freespace = 0;
}
    8afc:	e6fff804 	addi	sp,fp,-32
    8b00:	dfc00917 	ldw	ra,36(sp)
    8b04:	df000817 	ldw	fp,32(sp)
    8b08:	ddc00717 	ldw	r23,28(sp)
    8b0c:	dd800617 	ldw	r22,24(sp)
    8b10:	dd400517 	ldw	r21,20(sp)
    8b14:	dd000417 	ldw	r20,16(sp)
    8b18:	dcc00317 	ldw	r19,12(sp)
    8b1c:	dc800217 	ldw	r18,8(sp)
    8b20:	dc400117 	ldw	r17,4(sp)
    8b24:	dc000017 	ldw	r16,0(sp)
    8b28:	dec00a04 	addi	sp,sp,40
    8b2c:	f800283a 	ret

00008b30 <trezor_sha512_Last>:

static void trezor_sha512_Last(SHA512_CTX* context) {
    8b30:	deffce04 	addi	sp,sp,-200
    8b34:	dfc03115 	stw	ra,196(sp)
    8b38:	df003015 	stw	fp,192(sp)
    8b3c:	ddc02f15 	stw	r23,188(sp)
    8b40:	dd802e15 	stw	r22,184(sp)
    8b44:	dd402d15 	stw	r21,180(sp)
    8b48:	dd002c15 	stw	r20,176(sp)
    8b4c:	dcc02b15 	stw	r19,172(sp)
    8b50:	dc802a15 	stw	r18,168(sp)
    8b54:	dc402915 	stw	r17,164(sp)
    8b58:	dc002815 	stw	r16,160(sp)
    8b5c:	df003004 	addi	fp,sp,192
    8b60:	e13fd715 	stw	r4,-164(fp)
	unsigned int	usedspace;

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
    8b64:	e13fd717 	ldw	r4,-164(fp)
    8b68:	20801017 	ldw	r2,64(r4)
    8b6c:	20c01117 	ldw	r3,68(r4)
    8b70:	1808977a 	slli	r4,r3,29
    8b74:	100ad0fa 	srli	r5,r2,3
    8b78:	214ab03a 	or	r5,r4,r5
    8b7c:	180cd0fa 	srli	r6,r3,3
    8b80:	2805883a 	mov	r2,r5
    8b84:	10801fcc 	andi	r2,r2,127
    8b88:	e0bfd015 	stw	r2,-192(fp)
	/* Begin padding with a 1 bit: */
	((uint8_t*)context->buffer)[usedspace++] = 0x80;
    8b8c:	e0bfd717 	ldw	r2,-164(fp)
    8b90:	11001404 	addi	r4,r2,80
    8b94:	e0ffd017 	ldw	r3,-192(fp)
    8b98:	18800044 	addi	r2,r3,1
    8b9c:	e0bfd015 	stw	r2,-192(fp)
    8ba0:	20c7883a 	add	r3,r4,r3
    8ba4:	00bfe004 	movi	r2,-128
    8ba8:	18800005 	stb	r2,0(r3)
	
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
    8bac:	e0bfd017 	ldw	r2,-192(fp)
    8bb0:	10801c70 	cmpltui	r2,r2,113
    8bb4:	1000901e 	bne	r2,zero,8df8 <trezor_sha512_Last+0x2c8>
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);
    8bb8:	e0bfd717 	ldw	r2,-164(fp)
    8bbc:	10c01404 	addi	r3,r2,80
    8bc0:	e0bfd017 	ldw	r2,-192(fp)
    8bc4:	1889883a 	add	r4,r3,r2
    8bc8:	00c02004 	movi	r3,128
    8bcc:	e0bfd017 	ldw	r2,-192(fp)
    8bd0:	1885c83a 	sub	r2,r3,r2
    8bd4:	100b883a 	mov	r5,r2
    8bd8:	00017c40 	call	17c4 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    8bdc:	e03fd115 	stw	zero,-188(fp)
    8be0:	00007906 	br	8dc8 <trezor_sha512_Last+0x298>
			REVERSE64(context->buffer[j],context->buffer[j]);
    8be4:	e0ffd717 	ldw	r3,-164(fp)
    8be8:	e0bfd117 	ldw	r2,-188(fp)
    8bec:	10800284 	addi	r2,r2,10
    8bf0:	100490fa 	slli	r2,r2,3
    8bf4:	1887883a 	add	r3,r3,r2
    8bf8:	18800017 	ldw	r2,0(r3)
    8bfc:	e0bfd315 	stw	r2,-180(fp)
    8c00:	18800117 	ldw	r2,4(r3)
    8c04:	e0bfd415 	stw	r2,-176(fp)
    8c08:	e0bfd417 	ldw	r2,-176(fp)
    8c0c:	e0bff415 	stw	r2,-48(fp)
    8c10:	e0ffd317 	ldw	r3,-180(fp)
    8c14:	e0fff515 	stw	r3,-44(fp)
    8c18:	e13ff417 	ldw	r4,-48(fp)
    8c1c:	e13fd315 	stw	r4,-180(fp)
    8c20:	e0bff517 	ldw	r2,-44(fp)
    8c24:	e0bfd415 	stw	r2,-176(fp)
    8c28:	e0ffd317 	ldw	r3,-180(fp)
    8c2c:	00bfc074 	movhi	r2,65281
    8c30:	10bfc004 	addi	r2,r2,-256
    8c34:	1884703a 	and	r2,r3,r2
    8c38:	e0bfd815 	stw	r2,-160(fp)
    8c3c:	e0ffd417 	ldw	r3,-176(fp)
    8c40:	00bfc074 	movhi	r2,65281
    8c44:	10bfc004 	addi	r2,r2,-256
    8c48:	1884703a 	and	r2,r3,r2
    8c4c:	e0bfd915 	stw	r2,-156(fp)
    8c50:	e0ffd917 	ldw	r3,-156(fp)
    8c54:	1804963a 	slli	r2,r3,24
    8c58:	e13fd817 	ldw	r4,-160(fp)
    8c5c:	2008d23a 	srli	r4,r4,8
    8c60:	e13fda15 	stw	r4,-152(fp)
    8c64:	e0ffda17 	ldw	r3,-152(fp)
    8c68:	10c4b03a 	or	r2,r2,r3
    8c6c:	e0bfda15 	stw	r2,-152(fp)
    8c70:	e13fd917 	ldw	r4,-156(fp)
    8c74:	2008d23a 	srli	r4,r4,8
    8c78:	e13fdb15 	stw	r4,-148(fp)
    8c7c:	e0ffd317 	ldw	r3,-180(fp)
    8c80:	00803ff4 	movhi	r2,255
    8c84:	10803fc4 	addi	r2,r2,255
    8c88:	1884703a 	and	r2,r3,r2
    8c8c:	e0bfdc15 	stw	r2,-144(fp)
    8c90:	e0ffd417 	ldw	r3,-176(fp)
    8c94:	00803ff4 	movhi	r2,255
    8c98:	10803fc4 	addi	r2,r2,255
    8c9c:	1884703a 	and	r2,r3,r2
    8ca0:	e0bfdd15 	stw	r2,-140(fp)
    8ca4:	e0ffdc17 	ldw	r3,-144(fp)
    8ca8:	1804d63a 	srli	r2,r3,24
    8cac:	e13fdd17 	ldw	r4,-140(fp)
    8cb0:	2008923a 	slli	r4,r4,8
    8cb4:	e13fdf15 	stw	r4,-132(fp)
    8cb8:	e0ffdf17 	ldw	r3,-132(fp)
    8cbc:	10c4b03a 	or	r2,r2,r3
    8cc0:	e0bfdf15 	stw	r2,-132(fp)
    8cc4:	e13fdc17 	ldw	r4,-144(fp)
    8cc8:	2008923a 	slli	r4,r4,8
    8ccc:	e13fde15 	stw	r4,-136(fp)
    8cd0:	e0ffda17 	ldw	r3,-152(fp)
    8cd4:	e13fde17 	ldw	r4,-136(fp)
    8cd8:	1904b03a 	or	r2,r3,r4
    8cdc:	e0bfd315 	stw	r2,-180(fp)
    8ce0:	e0ffdb17 	ldw	r3,-148(fp)
    8ce4:	e13fdf17 	ldw	r4,-132(fp)
    8ce8:	1904b03a 	or	r2,r3,r4
    8cec:	e0bfd415 	stw	r2,-176(fp)
    8cf0:	e0bfd317 	ldw	r2,-180(fp)
    8cf4:	10bfffec 	andhi	r2,r2,65535
    8cf8:	e0bfe015 	stw	r2,-128(fp)
    8cfc:	e0bfd417 	ldw	r2,-176(fp)
    8d00:	10bfffec 	andhi	r2,r2,65535
    8d04:	e0bfe115 	stw	r2,-124(fp)
    8d08:	e0ffe117 	ldw	r3,-124(fp)
    8d0c:	1804943a 	slli	r2,r3,16
    8d10:	e13fe017 	ldw	r4,-128(fp)
    8d14:	2008d43a 	srli	r4,r4,16
    8d18:	e13fe215 	stw	r4,-120(fp)
    8d1c:	e0ffe217 	ldw	r3,-120(fp)
    8d20:	10c4b03a 	or	r2,r2,r3
    8d24:	e0bfe215 	stw	r2,-120(fp)
    8d28:	e13fe117 	ldw	r4,-124(fp)
    8d2c:	2008d43a 	srli	r4,r4,16
    8d30:	e13fe315 	stw	r4,-116(fp)
    8d34:	e0bfd317 	ldw	r2,-180(fp)
    8d38:	10bfffcc 	andi	r2,r2,65535
    8d3c:	e0bfe415 	stw	r2,-112(fp)
    8d40:	e0bfd417 	ldw	r2,-176(fp)
    8d44:	10bfffcc 	andi	r2,r2,65535
    8d48:	e0bfe515 	stw	r2,-108(fp)
    8d4c:	e0ffe417 	ldw	r3,-112(fp)
    8d50:	1804d43a 	srli	r2,r3,16
    8d54:	e13fe517 	ldw	r4,-108(fp)
    8d58:	2008943a 	slli	r4,r4,16
    8d5c:	e13fe715 	stw	r4,-100(fp)
    8d60:	e0ffe717 	ldw	r3,-100(fp)
    8d64:	10c4b03a 	or	r2,r2,r3
    8d68:	e0bfe715 	stw	r2,-100(fp)
    8d6c:	e13fe417 	ldw	r4,-112(fp)
    8d70:	2008943a 	slli	r4,r4,16
    8d74:	e13fe615 	stw	r4,-104(fp)
    8d78:	e0bfe217 	ldw	r2,-120(fp)
    8d7c:	e0ffe617 	ldw	r3,-104(fp)
    8d80:	10c4b03a 	or	r2,r2,r3
    8d84:	e0bfe815 	stw	r2,-96(fp)
    8d88:	e13fe317 	ldw	r4,-116(fp)
    8d8c:	e0bfe717 	ldw	r2,-100(fp)
    8d90:	2088b03a 	or	r4,r4,r2
    8d94:	e13fe915 	stw	r4,-92(fp)
    8d98:	e0ffd717 	ldw	r3,-164(fp)
    8d9c:	e0bfd117 	ldw	r2,-188(fp)
    8da0:	10800284 	addi	r2,r2,10
    8da4:	100490fa 	slli	r2,r2,3
    8da8:	1885883a 	add	r2,r3,r2
    8dac:	e0ffe817 	ldw	r3,-96(fp)
    8db0:	10c00015 	stw	r3,0(r2)
    8db4:	e13fe917 	ldw	r4,-92(fp)
    8db8:	11000115 	stw	r4,4(r2)
	if (usedspace > SHA512_SHORT_BLOCK_LENGTH) {
		memzero(((uint8_t*)context->buffer) + usedspace, SHA512_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		for (int j = 0; j < 16; j++) {
    8dbc:	e0bfd117 	ldw	r2,-188(fp)
    8dc0:	10800044 	addi	r2,r2,1
    8dc4:	e0bfd115 	stw	r2,-188(fp)
    8dc8:	e0bfd117 	ldw	r2,-188(fp)
    8dcc:	10800410 	cmplti	r2,r2,16
    8dd0:	103f841e 	bne	r2,zero,8be4 <__alt_mem_epcs_flash_controller+0xfdfffbe4>
			REVERSE64(context->buffer[j],context->buffer[j]);
		}
#endif
		/* Do second-to-last transform: */
		trezor_sha512_Transform(context->state, context->buffer, context->state);
    8dd4:	e0ffd717 	ldw	r3,-164(fp)
    8dd8:	e0bfd717 	ldw	r2,-164(fp)
    8ddc:	10801404 	addi	r2,r2,80
    8de0:	e13fd717 	ldw	r4,-164(fp)
    8de4:	200d883a 	mov	r6,r4
    8de8:	100b883a 	mov	r5,r2
    8dec:	1809883a 	mov	r4,r3
    8df0:	00073a00 	call	73a0 <trezor_sha512_Transform>

		/* And prepare the last transform: */
		usedspace = 0;
    8df4:	e03fd015 	stw	zero,-192(fp)
	}
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);
    8df8:	e0bfd717 	ldw	r2,-164(fp)
    8dfc:	10c01404 	addi	r3,r2,80
    8e00:	e0bfd017 	ldw	r2,-192(fp)
    8e04:	1889883a 	add	r4,r3,r2
    8e08:	00c01c04 	movi	r3,112
    8e0c:	e0bfd017 	ldw	r2,-192(fp)
    8e10:	1885c83a 	sub	r2,r3,r2
    8e14:	100b883a 	mov	r5,r2
    8e18:	00017c40 	call	17c4 <memzero>

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    8e1c:	e03fd215 	stw	zero,-184(fp)
    8e20:	00006106 	br	8fa8 <trezor_sha512_Last+0x478>
		REVERSE64(context->buffer[j],context->buffer[j]);
    8e24:	e0ffd717 	ldw	r3,-164(fp)
    8e28:	e0bfd217 	ldw	r2,-184(fp)
    8e2c:	10800284 	addi	r2,r2,10
    8e30:	100490fa 	slli	r2,r2,3
    8e34:	1885883a 	add	r2,r3,r2
    8e38:	10c00017 	ldw	r3,0(r2)
    8e3c:	e0ffd515 	stw	r3,-172(fp)
    8e40:	10800117 	ldw	r2,4(r2)
    8e44:	e0bfd615 	stw	r2,-168(fp)
    8e48:	e0bfd617 	ldw	r2,-168(fp)
    8e4c:	e0bff615 	stw	r2,-40(fp)
    8e50:	e0ffd517 	ldw	r3,-172(fp)
    8e54:	e0fff715 	stw	r3,-36(fp)
    8e58:	e13ff617 	ldw	r4,-40(fp)
    8e5c:	e13fd515 	stw	r4,-172(fp)
    8e60:	e0bff717 	ldw	r2,-36(fp)
    8e64:	e0bfd615 	stw	r2,-168(fp)
    8e68:	e0ffd517 	ldw	r3,-172(fp)
    8e6c:	00bfc074 	movhi	r2,65281
    8e70:	10bfc004 	addi	r2,r2,-256
    8e74:	1884703a 	and	r2,r3,r2
    8e78:	e0bfea15 	stw	r2,-88(fp)
    8e7c:	e0ffd617 	ldw	r3,-168(fp)
    8e80:	00bfc074 	movhi	r2,65281
    8e84:	10bfc004 	addi	r2,r2,-256
    8e88:	1884703a 	and	r2,r3,r2
    8e8c:	e0bfeb15 	stw	r2,-84(fp)
    8e90:	e0ffeb17 	ldw	r3,-84(fp)
    8e94:	1804963a 	slli	r2,r3,24
    8e98:	e13fea17 	ldw	r4,-88(fp)
    8e9c:	2020d23a 	srli	r16,r4,8
    8ea0:	1420b03a 	or	r16,r2,r16
    8ea4:	e0bfeb17 	ldw	r2,-84(fp)
    8ea8:	1022d23a 	srli	r17,r2,8
    8eac:	e0ffd517 	ldw	r3,-172(fp)
    8eb0:	00803ff4 	movhi	r2,255
    8eb4:	10803fc4 	addi	r2,r2,255
    8eb8:	1884703a 	and	r2,r3,r2
    8ebc:	e0bfec15 	stw	r2,-80(fp)
    8ec0:	e0ffd617 	ldw	r3,-168(fp)
    8ec4:	00803ff4 	movhi	r2,255
    8ec8:	10803fc4 	addi	r2,r2,255
    8ecc:	1884703a 	and	r2,r3,r2
    8ed0:	e0bfed15 	stw	r2,-76(fp)
    8ed4:	e0ffec17 	ldw	r3,-80(fp)
    8ed8:	1804d63a 	srli	r2,r3,24
    8edc:	e13fed17 	ldw	r4,-76(fp)
    8ee0:	2026923a 	slli	r19,r4,8
    8ee4:	14e6b03a 	or	r19,r2,r19
    8ee8:	e0bfec17 	ldw	r2,-80(fp)
    8eec:	1024923a 	slli	r18,r2,8
    8ef0:	8484b03a 	or	r2,r16,r18
    8ef4:	e0bfd515 	stw	r2,-172(fp)
    8ef8:	8cc4b03a 	or	r2,r17,r19
    8efc:	e0bfd615 	stw	r2,-168(fp)
    8f00:	e0bfd517 	ldw	r2,-172(fp)
    8f04:	10bfffec 	andhi	r2,r2,65535
    8f08:	e0bfee15 	stw	r2,-72(fp)
    8f0c:	e0bfd617 	ldw	r2,-168(fp)
    8f10:	10bfffec 	andhi	r2,r2,65535
    8f14:	e0bfef15 	stw	r2,-68(fp)
    8f18:	e0ffef17 	ldw	r3,-68(fp)
    8f1c:	1804943a 	slli	r2,r3,16
    8f20:	e13fee17 	ldw	r4,-72(fp)
    8f24:	2028d43a 	srli	r20,r4,16
    8f28:	1528b03a 	or	r20,r2,r20
    8f2c:	e0bfef17 	ldw	r2,-68(fp)
    8f30:	102ad43a 	srli	r21,r2,16
    8f34:	e0bfd517 	ldw	r2,-172(fp)
    8f38:	10bfffcc 	andi	r2,r2,65535
    8f3c:	e0bff015 	stw	r2,-64(fp)
    8f40:	e0bfd617 	ldw	r2,-168(fp)
    8f44:	10bfffcc 	andi	r2,r2,65535
    8f48:	e0bff115 	stw	r2,-60(fp)
    8f4c:	e0fff017 	ldw	r3,-64(fp)
    8f50:	1804d43a 	srli	r2,r3,16
    8f54:	e13ff117 	ldw	r4,-60(fp)
    8f58:	202e943a 	slli	r23,r4,16
    8f5c:	15eeb03a 	or	r23,r2,r23
    8f60:	e0bff017 	ldw	r2,-64(fp)
    8f64:	102c943a 	slli	r22,r2,16
    8f68:	a586b03a 	or	r3,r20,r22
    8f6c:	e0fff215 	stw	r3,-56(fp)
    8f70:	adc8b03a 	or	r4,r21,r23
    8f74:	e13ff315 	stw	r4,-52(fp)
    8f78:	e0ffd717 	ldw	r3,-164(fp)
    8f7c:	e0bfd217 	ldw	r2,-184(fp)
    8f80:	10800284 	addi	r2,r2,10
    8f84:	100490fa 	slli	r2,r2,3
    8f88:	1885883a 	add	r2,r3,r2
    8f8c:	e0fff217 	ldw	r3,-56(fp)
    8f90:	10c00015 	stw	r3,0(r2)
    8f94:	e13ff317 	ldw	r4,-52(fp)
    8f98:	11000115 	stw	r4,4(r2)
	/* Set-up for the last transform: */
	memzero(((uint8_t*)context->buffer) + usedspace, SHA512_SHORT_BLOCK_LENGTH - usedspace);

#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert TO host byte order */
	for (int j = 0; j < 14; j++) {
    8f9c:	e0bfd217 	ldw	r2,-184(fp)
    8fa0:	10800044 	addi	r2,r2,1
    8fa4:	e0bfd215 	stw	r2,-184(fp)
    8fa8:	e0bfd217 	ldw	r2,-184(fp)
    8fac:	10800390 	cmplti	r2,r2,14
    8fb0:	103f9c1e 	bne	r2,zero,8e24 <__alt_mem_epcs_flash_controller+0xfdfffe24>
		REVERSE64(context->buffer[j],context->buffer[j]);
	}
#endif
	/* Store the length of input data (in bits): */
	context->buffer[14] = context->bitcount[1];
    8fb4:	e13fd717 	ldw	r4,-164(fp)
    8fb8:	20801217 	ldw	r2,72(r4)
    8fbc:	20c01317 	ldw	r3,76(r4)
    8fc0:	e13fd717 	ldw	r4,-164(fp)
    8fc4:	20803015 	stw	r2,192(r4)
    8fc8:	20c03115 	stw	r3,196(r4)
	context->buffer[15] = context->bitcount[0];
    8fcc:	e13fd717 	ldw	r4,-164(fp)
    8fd0:	20801017 	ldw	r2,64(r4)
    8fd4:	20c01117 	ldw	r3,68(r4)
    8fd8:	e13fd717 	ldw	r4,-164(fp)
    8fdc:	20803215 	stw	r2,200(r4)
    8fe0:	20c03315 	stw	r3,204(r4)

	/* Final transform: */
	trezor_sha512_Transform(context->state, context->buffer, context->state);
    8fe4:	e0ffd717 	ldw	r3,-164(fp)
    8fe8:	e0bfd717 	ldw	r2,-164(fp)
    8fec:	10801404 	addi	r2,r2,80
    8ff0:	e13fd717 	ldw	r4,-164(fp)
    8ff4:	200d883a 	mov	r6,r4
    8ff8:	100b883a 	mov	r5,r2
    8ffc:	1809883a 	mov	r4,r3
    9000:	00073a00 	call	73a0 <trezor_sha512_Transform>
}
    9004:	0001883a 	nop
    9008:	e6fff804 	addi	sp,fp,-32
    900c:	dfc00917 	ldw	ra,36(sp)
    9010:	df000817 	ldw	fp,32(sp)
    9014:	ddc00717 	ldw	r23,28(sp)
    9018:	dd800617 	ldw	r22,24(sp)
    901c:	dd400517 	ldw	r21,20(sp)
    9020:	dd000417 	ldw	r20,16(sp)
    9024:	dcc00317 	ldw	r19,12(sp)
    9028:	dc800217 	ldw	r18,8(sp)
    902c:	dc400117 	ldw	r17,4(sp)
    9030:	dc000017 	ldw	r16,0(sp)
    9034:	dec00a04 	addi	sp,sp,40
    9038:	f800283a 	ret

0000903c <trezor_sha512_Final>:

void trezor_sha512_Final(SHA512_CTX* context, sha2_byte digest[]) {
    903c:	deffe504 	addi	sp,sp,-108
    9040:	dfc01a15 	stw	ra,104(sp)
    9044:	df001915 	stw	fp,100(sp)
    9048:	ddc01815 	stw	r23,96(sp)
    904c:	dd801715 	stw	r22,92(sp)
    9050:	dd401615 	stw	r21,88(sp)
    9054:	dd001515 	stw	r20,84(sp)
    9058:	dcc01415 	stw	r19,80(sp)
    905c:	dc801315 	stw	r18,76(sp)
    9060:	dc401215 	stw	r17,72(sp)
    9064:	dc001115 	stw	r16,68(sp)
    9068:	df001904 	addi	fp,sp,100
    906c:	e13fea15 	stw	r4,-88(fp)
    9070:	e17feb15 	stw	r5,-84(fp)
	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != (sha2_byte*)0) {
    9074:	e0bfeb17 	ldw	r2,-84(fp)
    9078:	10006b26 	beq	r2,zero,9228 <trezor_sha512_Final+0x1ec>
		trezor_sha512_Last(context);
    907c:	e13fea17 	ldw	r4,-88(fp)
    9080:	0008b300 	call	8b30 <trezor_sha512_Last>

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    9084:	e03fe715 	stw	zero,-100(fp)
    9088:	00005f06 	br	9208 <trezor_sha512_Final+0x1cc>
			REVERSE64(context->state[j],context->state[j]);
    908c:	e0ffea17 	ldw	r3,-88(fp)
    9090:	e0bfe717 	ldw	r2,-100(fp)
    9094:	100490fa 	slli	r2,r2,3
    9098:	1885883a 	add	r2,r3,r2
    909c:	10c00017 	ldw	r3,0(r2)
    90a0:	e0ffe815 	stw	r3,-96(fp)
    90a4:	10800117 	ldw	r2,4(r2)
    90a8:	e0bfe915 	stw	r2,-92(fp)
    90ac:	e0bfe917 	ldw	r2,-92(fp)
    90b0:	e0bff615 	stw	r2,-40(fp)
    90b4:	e0ffe817 	ldw	r3,-96(fp)
    90b8:	e0fff715 	stw	r3,-36(fp)
    90bc:	e0bff617 	ldw	r2,-40(fp)
    90c0:	e0bfe815 	stw	r2,-96(fp)
    90c4:	e0fff717 	ldw	r3,-36(fp)
    90c8:	e0ffe915 	stw	r3,-92(fp)
    90cc:	e0ffe817 	ldw	r3,-96(fp)
    90d0:	00bfc074 	movhi	r2,65281
    90d4:	10bfc004 	addi	r2,r2,-256
    90d8:	1884703a 	and	r2,r3,r2
    90dc:	e0bfec15 	stw	r2,-80(fp)
    90e0:	e0ffe917 	ldw	r3,-92(fp)
    90e4:	00bfc074 	movhi	r2,65281
    90e8:	10bfc004 	addi	r2,r2,-256
    90ec:	1884703a 	and	r2,r3,r2
    90f0:	e0bfed15 	stw	r2,-76(fp)
    90f4:	e0ffed17 	ldw	r3,-76(fp)
    90f8:	1804963a 	slli	r2,r3,24
    90fc:	e0ffec17 	ldw	r3,-80(fp)
    9100:	1820d23a 	srli	r16,r3,8
    9104:	1420b03a 	or	r16,r2,r16
    9108:	e0bfed17 	ldw	r2,-76(fp)
    910c:	1022d23a 	srli	r17,r2,8
    9110:	e0ffe817 	ldw	r3,-96(fp)
    9114:	00803ff4 	movhi	r2,255
    9118:	10803fc4 	addi	r2,r2,255
    911c:	1884703a 	and	r2,r3,r2
    9120:	e0bfee15 	stw	r2,-72(fp)
    9124:	e0ffe917 	ldw	r3,-92(fp)
    9128:	00803ff4 	movhi	r2,255
    912c:	10803fc4 	addi	r2,r2,255
    9130:	1884703a 	and	r2,r3,r2
    9134:	e0bfef15 	stw	r2,-68(fp)
    9138:	e0ffee17 	ldw	r3,-72(fp)
    913c:	1804d63a 	srli	r2,r3,24
    9140:	e0ffef17 	ldw	r3,-68(fp)
    9144:	1826923a 	slli	r19,r3,8
    9148:	14e6b03a 	or	r19,r2,r19
    914c:	e0bfee17 	ldw	r2,-72(fp)
    9150:	1024923a 	slli	r18,r2,8
    9154:	8484b03a 	or	r2,r16,r18
    9158:	e0bfe815 	stw	r2,-96(fp)
    915c:	8cc4b03a 	or	r2,r17,r19
    9160:	e0bfe915 	stw	r2,-92(fp)
    9164:	e0bfe817 	ldw	r2,-96(fp)
    9168:	10bfffec 	andhi	r2,r2,65535
    916c:	e0bff015 	stw	r2,-64(fp)
    9170:	e0bfe917 	ldw	r2,-92(fp)
    9174:	10bfffec 	andhi	r2,r2,65535
    9178:	e0bff115 	stw	r2,-60(fp)
    917c:	e0fff117 	ldw	r3,-60(fp)
    9180:	1804943a 	slli	r2,r3,16
    9184:	e0fff017 	ldw	r3,-64(fp)
    9188:	1828d43a 	srli	r20,r3,16
    918c:	1528b03a 	or	r20,r2,r20
    9190:	e0bff117 	ldw	r2,-60(fp)
    9194:	102ad43a 	srli	r21,r2,16
    9198:	e0bfe817 	ldw	r2,-96(fp)
    919c:	10bfffcc 	andi	r2,r2,65535
    91a0:	e0bff215 	stw	r2,-56(fp)
    91a4:	e0bfe917 	ldw	r2,-92(fp)
    91a8:	10bfffcc 	andi	r2,r2,65535
    91ac:	e0bff315 	stw	r2,-52(fp)
    91b0:	e0fff217 	ldw	r3,-56(fp)
    91b4:	1804d43a 	srli	r2,r3,16
    91b8:	e0fff317 	ldw	r3,-52(fp)
    91bc:	182e943a 	slli	r23,r3,16
    91c0:	15eeb03a 	or	r23,r2,r23
    91c4:	e0bff217 	ldw	r2,-56(fp)
    91c8:	102c943a 	slli	r22,r2,16
    91cc:	a586b03a 	or	r3,r20,r22
    91d0:	e0fff415 	stw	r3,-48(fp)
    91d4:	adc4b03a 	or	r2,r21,r23
    91d8:	e0bff515 	stw	r2,-44(fp)
    91dc:	e0ffea17 	ldw	r3,-88(fp)
    91e0:	e0bfe717 	ldw	r2,-100(fp)
    91e4:	100490fa 	slli	r2,r2,3
    91e8:	1885883a 	add	r2,r3,r2
    91ec:	e0fff417 	ldw	r3,-48(fp)
    91f0:	10c00015 	stw	r3,0(r2)
    91f4:	e0fff517 	ldw	r3,-44(fp)
    91f8:	10c00115 	stw	r3,4(r2)
		trezor_sha512_Last(context);

		/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert FROM host byte order */
		for (int j = 0; j < 8; j++) {
    91fc:	e0bfe717 	ldw	r2,-100(fp)
    9200:	10800044 	addi	r2,r2,1
    9204:	e0bfe715 	stw	r2,-100(fp)
    9208:	e0bfe717 	ldw	r2,-100(fp)
    920c:	10800210 	cmplti	r2,r2,8
    9210:	103f9e1e 	bne	r2,zero,908c <__alt_mem_epcs_flash_controller+0xfe00008c>
			REVERSE64(context->state[j],context->state[j]);
		}
#endif
		MEMCPY_BCOPY(digest, context->state, SHA512_DIGEST_LENGTH);
    9214:	e0bfea17 	ldw	r2,-88(fp)
    9218:	01801004 	movi	r6,64
    921c:	100b883a 	mov	r5,r2
    9220:	e13feb17 	ldw	r4,-84(fp)
    9224:	00095dc0 	call	95dc <memcpy>
	}

	/* Zero out state data */
	memzero(context, sizeof(SHA512_CTX));
    9228:	01403404 	movi	r5,208
    922c:	e13fea17 	ldw	r4,-88(fp)
    9230:	00017c40 	call	17c4 <memzero>
}
    9234:	0001883a 	nop
    9238:	e6fff804 	addi	sp,fp,-32
    923c:	dfc00917 	ldw	ra,36(sp)
    9240:	df000817 	ldw	fp,32(sp)
    9244:	ddc00717 	ldw	r23,28(sp)
    9248:	dd800617 	ldw	r22,24(sp)
    924c:	dd400517 	ldw	r21,20(sp)
    9250:	dd000417 	ldw	r20,16(sp)
    9254:	dcc00317 	ldw	r19,12(sp)
    9258:	dc800217 	ldw	r18,8(sp)
    925c:	dc400117 	ldw	r17,4(sp)
    9260:	dc000017 	ldw	r16,0(sp)
    9264:	dec00a04 	addi	sp,sp,40
    9268:	f800283a 	ret

0000926c <trezor_sha512_End>:

char *trezor_sha512_End(SHA512_CTX* context, char buffer[]) {
    926c:	deffea04 	addi	sp,sp,-88
    9270:	dfc01515 	stw	ra,84(sp)
    9274:	df001415 	stw	fp,80(sp)
    9278:	df001404 	addi	fp,sp,80
    927c:	e13ffe15 	stw	r4,-8(fp)
    9280:	e17fff15 	stw	r5,-4(fp)
	sha2_byte	digest[SHA512_DIGEST_LENGTH], *d = digest;
    9284:	e0bfee04 	addi	r2,fp,-72
    9288:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
    928c:	e0bfff17 	ldw	r2,-4(fp)
    9290:	10002926 	beq	r2,zero,9338 <trezor_sha512_End+0xcc>
		trezor_sha512_Final(context, digest);
    9294:	e0bfee04 	addi	r2,fp,-72
    9298:	100b883a 	mov	r5,r2
    929c:	e13ffe17 	ldw	r4,-8(fp)
    92a0:	000903c0 	call	903c <trezor_sha512_Final>

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    92a4:	e03fed15 	stw	zero,-76(fp)
    92a8:	00001d06 	br	9320 <trezor_sha512_End+0xb4>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
    92ac:	e0bfff17 	ldw	r2,-4(fp)
    92b0:	10c00044 	addi	r3,r2,1
    92b4:	e0ffff15 	stw	r3,-4(fp)
    92b8:	d1200017 	ldw	r4,-32768(gp)
    92bc:	e0ffec17 	ldw	r3,-80(fp)
    92c0:	18c00003 	ldbu	r3,0(r3)
    92c4:	18c03fcc 	andi	r3,r3,255
    92c8:	1806d13a 	srli	r3,r3,4
    92cc:	18c03fcc 	andi	r3,r3,255
    92d0:	20c7883a 	add	r3,r4,r3
    92d4:	18c00003 	ldbu	r3,0(r3)
    92d8:	10c00005 	stb	r3,0(r2)
			*buffer++ = sha2_hex_digits[*d & 0x0f];
    92dc:	e0bfff17 	ldw	r2,-4(fp)
    92e0:	10c00044 	addi	r3,r2,1
    92e4:	e0ffff15 	stw	r3,-4(fp)
    92e8:	d1200017 	ldw	r4,-32768(gp)
    92ec:	e0ffec17 	ldw	r3,-80(fp)
    92f0:	18c00003 	ldbu	r3,0(r3)
    92f4:	18c03fcc 	andi	r3,r3,255
    92f8:	18c003cc 	andi	r3,r3,15
    92fc:	20c7883a 	add	r3,r4,r3
    9300:	18c00003 	ldbu	r3,0(r3)
    9304:	10c00005 	stb	r3,0(r2)
			d++;
    9308:	e0bfec17 	ldw	r2,-80(fp)
    930c:	10800044 	addi	r2,r2,1
    9310:	e0bfec15 	stw	r2,-80(fp)
	int		i;

	if (buffer != (char*)0) {
		trezor_sha512_Final(context, digest);

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
    9314:	e0bfed17 	ldw	r2,-76(fp)
    9318:	10800044 	addi	r2,r2,1
    931c:	e0bfed15 	stw	r2,-76(fp)
    9320:	e0bfed17 	ldw	r2,-76(fp)
    9324:	10801010 	cmplti	r2,r2,64
    9328:	103fe01e 	bne	r2,zero,92ac <__alt_mem_epcs_flash_controller+0xfe0002ac>
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
    932c:	e0bfff17 	ldw	r2,-4(fp)
    9330:	10000005 	stb	zero,0(r2)
    9334:	00000306 	br	9344 <trezor_sha512_End+0xd8>
	} else {
		memzero(context, sizeof(SHA512_CTX));
    9338:	01403404 	movi	r5,208
    933c:	e13ffe17 	ldw	r4,-8(fp)
    9340:	00017c40 	call	17c4 <memzero>
	}
	memzero(digest, SHA512_DIGEST_LENGTH);
    9344:	e0bfee04 	addi	r2,fp,-72
    9348:	01401004 	movi	r5,64
    934c:	1009883a 	mov	r4,r2
    9350:	00017c40 	call	17c4 <memzero>
	return buffer;
    9354:	e0bfff17 	ldw	r2,-4(fp)
}
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <trezor_sha512_Raw>:

void trezor_sha512_Raw(const sha2_byte* data, size_t len, uint8_t digest[SHA512_DIGEST_LENGTH]) {
    936c:	deffc704 	addi	sp,sp,-228
    9370:	dfc03815 	stw	ra,224(sp)
    9374:	df003715 	stw	fp,220(sp)
    9378:	df003704 	addi	fp,sp,220
    937c:	e13ffd15 	stw	r4,-12(fp)
    9380:	e17ffe15 	stw	r5,-8(fp)
    9384:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;
	trezor_sha512_Init(&context);
    9388:	e13fc904 	addi	r4,fp,-220
    938c:	00073180 	call	7318 <trezor_sha512_Init>
	trezor_sha512_Update(&context, data, len);
    9390:	e1bffe17 	ldw	r6,-8(fp)
    9394:	e17ffd17 	ldw	r5,-12(fp)
    9398:	e13fc904 	addi	r4,fp,-220
    939c:	00082c00 	call	82c0 <trezor_sha512_Update>
	trezor_sha512_Final(&context, digest);
    93a0:	e17fff17 	ldw	r5,-4(fp)
    93a4:	e13fc904 	addi	r4,fp,-220
    93a8:	000903c0 	call	903c <trezor_sha512_Final>
}
    93ac:	0001883a 	nop
    93b0:	e037883a 	mov	sp,fp
    93b4:	dfc00117 	ldw	ra,4(sp)
    93b8:	df000017 	ldw	fp,0(sp)
    93bc:	dec00204 	addi	sp,sp,8
    93c0:	f800283a 	ret

000093c4 <trezor_sha512_Data>:

char* trezor_sha512_Data(const sha2_byte* data, size_t len, char digest[SHA512_DIGEST_STRING_LENGTH]) {
    93c4:	deffc704 	addi	sp,sp,-228
    93c8:	dfc03815 	stw	ra,224(sp)
    93cc:	df003715 	stw	fp,220(sp)
    93d0:	df003704 	addi	fp,sp,220
    93d4:	e13ffd15 	stw	r4,-12(fp)
    93d8:	e17ffe15 	stw	r5,-8(fp)
    93dc:	e1bfff15 	stw	r6,-4(fp)
	SHA512_CTX	context;

	trezor_sha512_Init(&context);
    93e0:	e13fc904 	addi	r4,fp,-220
    93e4:	00073180 	call	7318 <trezor_sha512_Init>
	trezor_sha512_Update(&context, data, len);
    93e8:	e1bffe17 	ldw	r6,-8(fp)
    93ec:	e17ffd17 	ldw	r5,-12(fp)
    93f0:	e13fc904 	addi	r4,fp,-220
    93f4:	00082c00 	call	82c0 <trezor_sha512_Update>
	return trezor_sha512_End(&context, digest);
    93f8:	e17fff17 	ldw	r5,-4(fp)
    93fc:	e13fc904 	addi	r4,fp,-220
    9400:	000926c0 	call	926c <trezor_sha512_End>
}
    9404:	e037883a 	mov	sp,fp
    9408:	dfc00117 	ldw	ra,4(sp)
    940c:	df000017 	ldw	fp,0(sp)
    9410:	dec00204 	addi	sp,sp,8
    9414:	f800283a 	ret

00009418 <main>:
#include <stdlib.h>
#include <stdio.h>


int main()
{
    9418:	deffee04 	addi	sp,sp,-72
    941c:	dfc01115 	stw	ra,68(sp)
    9420:	df001015 	stw	fp,64(sp)
    9424:	ddc00f15 	stw	r23,60(sp)
    9428:	dd800e15 	stw	r22,56(sp)
    942c:	dd400d15 	stw	r21,52(sp)
    9430:	dd000c15 	stw	r20,48(sp)
    9434:	dcc00b15 	stw	r19,44(sp)
    9438:	dc800a15 	stw	r18,40(sp)
    943c:	dc400915 	stw	r17,36(sp)
    9440:	dc000815 	stw	r16,32(sp)
    9444:	df001004 	addi	fp,sp,64
	printf("Hello World from NIOS II hol\n");
    9448:	01000074 	movhi	r4,1
    944c:	211a8c04 	addi	r4,r4,27184
    9450:	00099680 	call	9968 <puts>
	printf("Software Version: %d.%d.%d\n\n", SOFTWARE_VERSION_MAJOR, SOFTWARE_VERSION_MINOR, SOFTWARE_VERSION_REV);
    9454:	000f883a 	mov	r7,zero
    9458:	000d883a 	mov	r6,zero
    945c:	01400044 	movi	r5,1
    9460:	01000074 	movhi	r4,1
    9464:	211a9404 	addi	r4,r4,27216
    9468:	000989c0 	call	989c <printf>

	void *lots_of_memory = malloc(1024 * 1024 * 10);	// attempt to allocate 10MB
    946c:	01002834 	movhi	r4,160
    9470:	00095b40 	call	95b4 <malloc>
    9474:	e0bff215 	stw	r2,-56(fp)
    printf("SDRAM malloc returned 0x%08lx\n", (alt_u32)lots_of_memory);
    9478:	e0bff217 	ldw	r2,-56(fp)
    947c:	100b883a 	mov	r5,r2
    9480:	01000074 	movhi	r4,1
    9484:	211a9c04 	addi	r4,r4,27248
    9488:	000989c0 	call	989c <printf>

    const btc_chainparams* chain = &btc_chainparams_test;
    948c:	00800074 	movhi	r2,1
    9490:	1092b904 	addi	r2,r2,19172
    9494:	e0bff315 	stw	r2,-52(fp)

    size_t sizeout = 128;
    9498:	00802004 	movi	r2,128
    949c:	e0bff415 	stw	r2,-48(fp)
	char masterkey[sizeout];
    94a0:	e0bff417 	ldw	r2,-48(fp)
    94a4:	1007883a 	mov	r3,r2
    94a8:	18ffffc4 	addi	r3,r3,-1
    94ac:	e0fff515 	stw	r3,-44(fp)
    94b0:	102d883a 	mov	r22,r2
    94b4:	002f883a 	mov	r23,zero
    94b8:	b006d77a 	srli	r3,r22,29
    94bc:	b82690fa 	slli	r19,r23,3
    94c0:	1ce6b03a 	or	r19,r3,r19
    94c4:	b02490fa 	slli	r18,r22,3
    94c8:	1029883a 	mov	r20,r2
    94cc:	002b883a 	mov	r21,zero
    94d0:	a006d77a 	srli	r3,r20,29
    94d4:	a82290fa 	slli	r17,r21,3
    94d8:	1c62b03a 	or	r17,r3,r17
    94dc:	a02090fa 	slli	r16,r20,3
    94e0:	108000c4 	addi	r2,r2,3
    94e4:	1004d0ba 	srli	r2,r2,2
    94e8:	1085883a 	add	r2,r2,r2
    94ec:	1085883a 	add	r2,r2,r2
    94f0:	d8b7c83a 	sub	sp,sp,r2
    94f4:	d805883a 	mov	r2,sp
    94f8:	1005883a 	mov	r2,r2
    94fc:	e0bff615 	stw	r2,-40(fp)

	/* generate a new hd master key */
	hd_gen_master(chain, masterkey, sizeout);
    9500:	e0bff617 	ldw	r2,-40(fp)
    9504:	e1bff417 	ldw	r6,-48(fp)
    9508:	100b883a 	mov	r5,r2
    950c:	e13ff317 	ldw	r4,-52(fp)
    9510:	0000cf40 	call	cf4 <hd_gen_master>

    printf("byte: %d\n", BYTE_ORDER);
    9514:	01413484 	movi	r5,1234
    9518:	01000074 	movhi	r4,1
    951c:	211aa404 	addi	r4,r4,27280
    9520:	000989c0 	call	989c <printf>

//    uint8_t seed[64];
//
    const char *mnemonic_phrase = mnemonic_generate(128);
    9524:	01002004 	movi	r4,128
    9528:	000035c0 	call	35c <mnemonic_generate>
    952c:	e0bff715 	stw	r2,-36(fp)
    printf("MNEMONIC PHRASE: %s", mnemonic_phrase);
    9530:	e17ff717 	ldw	r5,-36(fp)
    9534:	01000074 	movhi	r4,1
    9538:	211aa704 	addi	r4,r4,27292
    953c:	000989c0 	call	989c <printf>
//		printf("%x", seed[i]);
//	}
//	printf("\n");


    int count = 0;
    9540:	e03ff015 	stw	zero,-64(fp)
    int delay;

    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
    9544:	e0bff017 	ldw	r2,-64(fp)
    9548:	10c03fcc 	andi	r3,r2,255
    954c:	00808074 	movhi	r2,513
    9550:	10a80804 	addi	r2,r2,-24544
    9554:	10c00035 	stwio	r3,0(r2)
        delay = 0;
    9558:	e03ff115 	stw	zero,-60(fp)
        while(delay < 200000)
    955c:	00000306 	br	956c <main+0x154>
        {
            delay++;
    9560:	e0bff117 	ldw	r2,-60(fp)
    9564:	10800044 	addi	r2,r2,1
    9568:	e0bff115 	stw	r2,-60(fp)
    // main loop
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, count & 0xFF);
        delay = 0;
        while(delay < 200000)
    956c:	e0fff117 	ldw	r3,-60(fp)
    9570:	008000f4 	movhi	r2,3
    9574:	10834fc4 	addi	r2,r2,3391
    9578:	10fff90e 	bge	r2,r3,9560 <__alt_mem_epcs_flash_controller+0xfe000560>
        {
            delay++;
        }
        count++;
    957c:	e0bff017 	ldw	r2,-64(fp)
    9580:	10800044 	addi	r2,r2,1
    9584:	e0bff015 	stw	r2,-64(fp)
    }
    9588:	003fee06 	br	9544 <__alt_mem_epcs_flash_controller+0xfe000544>

0000958c <__mulsi3>:
    958c:	0005883a 	mov	r2,zero
    9590:	20000726 	beq	r4,zero,95b0 <__mulsi3+0x24>
    9594:	20c0004c 	andi	r3,r4,1
    9598:	2008d07a 	srli	r4,r4,1
    959c:	18000126 	beq	r3,zero,95a4 <__mulsi3+0x18>
    95a0:	1145883a 	add	r2,r2,r5
    95a4:	294b883a 	add	r5,r5,r5
    95a8:	203ffa1e 	bne	r4,zero,9594 <__alt_mem_epcs_flash_controller+0xfe000594>
    95ac:	f800283a 	ret
    95b0:	f800283a 	ret

000095b4 <malloc>:
    95b4:	00800074 	movhi	r2,1
    95b8:	109fee04 	addi	r2,r2,32696
    95bc:	200b883a 	mov	r5,r4
    95c0:	11000017 	ldw	r4,0(r2)
    95c4:	00097081 	jmpi	9708 <_malloc_r>

000095c8 <free>:
    95c8:	00800074 	movhi	r2,1
    95cc:	109fee04 	addi	r2,r2,32696
    95d0:	200b883a 	mov	r5,r4
    95d4:	11000017 	ldw	r4,0(r2)
    95d8:	00096241 	jmpi	9624 <_free_r>

000095dc <memcpy>:
    95dc:	2005883a 	mov	r2,r4
    95e0:	2007883a 	mov	r3,r4
    95e4:	218d883a 	add	r6,r4,r6
    95e8:	19800526 	beq	r3,r6,9600 <memcpy+0x24>
    95ec:	29000003 	ldbu	r4,0(r5)
    95f0:	18c00044 	addi	r3,r3,1
    95f4:	29400044 	addi	r5,r5,1
    95f8:	193fffc5 	stb	r4,-1(r3)
    95fc:	003ffa06 	br	95e8 <__alt_mem_epcs_flash_controller+0xfe0005e8>
    9600:	f800283a 	ret

00009604 <memset>:
    9604:	2005883a 	mov	r2,r4
    9608:	2007883a 	mov	r3,r4
    960c:	218d883a 	add	r6,r4,r6
    9610:	19800326 	beq	r3,r6,9620 <memset+0x1c>
    9614:	19400005 	stb	r5,0(r3)
    9618:	18c00044 	addi	r3,r3,1
    961c:	003ffc06 	br	9610 <__alt_mem_epcs_flash_controller+0xfe000610>
    9620:	f800283a 	ret

00009624 <_free_r>:
    9624:	28003726 	beq	r5,zero,9704 <_free_r+0xe0>
    9628:	28ffff17 	ldw	r3,-4(r5)
    962c:	28bfff04 	addi	r2,r5,-4
    9630:	1800010e 	bge	r3,zero,9638 <_free_r+0x14>
    9634:	10c5883a 	add	r2,r2,r3
    9638:	014000b4 	movhi	r5,2
    963c:	2964fa04 	addi	r5,r5,-27672
    9640:	28c00017 	ldw	r3,0(r5)
    9644:	280d883a 	mov	r6,r5
    9648:	1800031e 	bne	r3,zero,9658 <_free_r+0x34>
    964c:	10000115 	stw	zero,4(r2)
    9650:	28800015 	stw	r2,0(r5)
    9654:	f800283a 	ret
    9658:	10c00c2e 	bgeu	r2,r3,968c <_free_r+0x68>
    965c:	11000017 	ldw	r4,0(r2)
    9660:	110b883a 	add	r5,r2,r4
    9664:	1940041e 	bne	r3,r5,9678 <_free_r+0x54>
    9668:	19400017 	ldw	r5,0(r3)
    966c:	18c00117 	ldw	r3,4(r3)
    9670:	2909883a 	add	r4,r5,r4
    9674:	11000015 	stw	r4,0(r2)
    9678:	10c00115 	stw	r3,4(r2)
    967c:	30800015 	stw	r2,0(r6)
    9680:	f800283a 	ret
    9684:	11400336 	bltu	r2,r5,9694 <_free_r+0x70>
    9688:	2807883a 	mov	r3,r5
    968c:	19400117 	ldw	r5,4(r3)
    9690:	283ffc1e 	bne	r5,zero,9684 <__alt_mem_epcs_flash_controller+0xfe000684>
    9694:	19c00017 	ldw	r7,0(r3)
    9698:	19cd883a 	add	r6,r3,r7
    969c:	30800a1e 	bne	r6,r2,96c8 <_free_r+0xa4>
    96a0:	10800017 	ldw	r2,0(r2)
    96a4:	3885883a 	add	r2,r7,r2
    96a8:	18800015 	stw	r2,0(r3)
    96ac:	1889883a 	add	r4,r3,r2
    96b0:	2900141e 	bne	r5,r4,9704 <_free_r+0xe0>
    96b4:	29000017 	ldw	r4,0(r5)
    96b8:	2085883a 	add	r2,r4,r2
    96bc:	18800015 	stw	r2,0(r3)
    96c0:	28800117 	ldw	r2,4(r5)
    96c4:	00000e06 	br	9700 <_free_r+0xdc>
    96c8:	1180032e 	bgeu	r2,r6,96d8 <_free_r+0xb4>
    96cc:	00800304 	movi	r2,12
    96d0:	20800015 	stw	r2,0(r4)
    96d4:	f800283a 	ret
    96d8:	11000017 	ldw	r4,0(r2)
    96dc:	110d883a 	add	r6,r2,r4
    96e0:	2980061e 	bne	r5,r6,96fc <_free_r+0xd8>
    96e4:	29800017 	ldw	r6,0(r5)
    96e8:	3109883a 	add	r4,r6,r4
    96ec:	11000015 	stw	r4,0(r2)
    96f0:	29000117 	ldw	r4,4(r5)
    96f4:	11000115 	stw	r4,4(r2)
    96f8:	00000106 	br	9700 <_free_r+0xdc>
    96fc:	11400115 	stw	r5,4(r2)
    9700:	18800115 	stw	r2,4(r3)
    9704:	f800283a 	ret

00009708 <_malloc_r>:
    9708:	defffb04 	addi	sp,sp,-20
    970c:	00bfff04 	movi	r2,-4
    9710:	dc400115 	stw	r17,4(sp)
    9714:	2c4000c4 	addi	r17,r5,3
    9718:	88a2703a 	and	r17,r17,r2
    971c:	dc800215 	stw	r18,8(sp)
    9720:	dfc00415 	stw	ra,16(sp)
    9724:	dcc00315 	stw	r19,12(sp)
    9728:	dc000015 	stw	r16,0(sp)
    972c:	8c400204 	addi	r17,r17,8
    9730:	00800304 	movi	r2,12
    9734:	2025883a 	mov	r18,r4
    9738:	8880022e 	bgeu	r17,r2,9744 <_malloc_r+0x3c>
    973c:	1023883a 	mov	r17,r2
    9740:	00000506 	br	9758 <_malloc_r+0x50>
    9744:	8800040e 	bge	r17,zero,9758 <_malloc_r+0x50>
    9748:	00800304 	movi	r2,12
    974c:	90800015 	stw	r2,0(r18)
    9750:	0005883a 	mov	r2,zero
    9754:	00003b06 	br	9844 <_malloc_r+0x13c>
    9758:	897ffb36 	bltu	r17,r5,9748 <__alt_mem_epcs_flash_controller+0xfe000748>
    975c:	008000b4 	movhi	r2,2
    9760:	10a4fa04 	addi	r2,r2,-27672
    9764:	10c00017 	ldw	r3,0(r2)
    9768:	1009883a 	mov	r4,r2
    976c:	1821883a 	mov	r16,r3
    9770:	80000926 	beq	r16,zero,9798 <_malloc_r+0x90>
    9774:	80800017 	ldw	r2,0(r16)
    9778:	1445c83a 	sub	r2,r2,r17
    977c:	10001516 	blt	r2,zero,97d4 <_malloc_r+0xcc>
    9780:	014002c4 	movi	r5,11
    9784:	28800d2e 	bgeu	r5,r2,97bc <_malloc_r+0xb4>
    9788:	80800015 	stw	r2,0(r16)
    978c:	80a1883a 	add	r16,r16,r2
    9790:	84400015 	stw	r17,0(r16)
    9794:	8000221e 	bne	r16,zero,9820 <_malloc_r+0x118>
    9798:	040000b4 	movhi	r16,2
    979c:	8424f904 	addi	r16,r16,-27676
    97a0:	80800017 	ldw	r2,0(r16)
    97a4:	10000e1e 	bne	r2,zero,97e0 <_malloc_r+0xd8>
    97a8:	000b883a 	mov	r5,zero
    97ac:	9009883a 	mov	r4,r18
    97b0:	00099f00 	call	99f0 <_sbrk_r>
    97b4:	80800015 	stw	r2,0(r16)
    97b8:	00000906 	br	97e0 <_malloc_r+0xd8>
    97bc:	80800117 	ldw	r2,4(r16)
    97c0:	1c00021e 	bne	r3,r16,97cc <_malloc_r+0xc4>
    97c4:	20800015 	stw	r2,0(r4)
    97c8:	00001506 	br	9820 <_malloc_r+0x118>
    97cc:	18800115 	stw	r2,4(r3)
    97d0:	00001306 	br	9820 <_malloc_r+0x118>
    97d4:	8007883a 	mov	r3,r16
    97d8:	84000117 	ldw	r16,4(r16)
    97dc:	003fe406 	br	9770 <__alt_mem_epcs_flash_controller+0xfe000770>
    97e0:	880b883a 	mov	r5,r17
    97e4:	9009883a 	mov	r4,r18
    97e8:	00099f00 	call	99f0 <_sbrk_r>
    97ec:	04ffffc4 	movi	r19,-1
    97f0:	14ffd526 	beq	r2,r19,9748 <__alt_mem_epcs_flash_controller+0xfe000748>
    97f4:	140000c4 	addi	r16,r2,3
    97f8:	00ffff04 	movi	r3,-4
    97fc:	80e0703a 	and	r16,r16,r3
    9800:	1400021e 	bne	r2,r16,980c <_malloc_r+0x104>
    9804:	84400015 	stw	r17,0(r16)
    9808:	00000506 	br	9820 <_malloc_r+0x118>
    980c:	808bc83a 	sub	r5,r16,r2
    9810:	9009883a 	mov	r4,r18
    9814:	00099f00 	call	99f0 <_sbrk_r>
    9818:	14fffa1e 	bne	r2,r19,9804 <__alt_mem_epcs_flash_controller+0xfe000804>
    981c:	003fca06 	br	9748 <__alt_mem_epcs_flash_controller+0xfe000748>
    9820:	810002c4 	addi	r4,r16,11
    9824:	00bffe04 	movi	r2,-8
    9828:	80c00104 	addi	r3,r16,4
    982c:	2084703a 	and	r2,r4,r2
    9830:	10c7c83a 	sub	r3,r2,r3
    9834:	18000326 	beq	r3,zero,9844 <_malloc_r+0x13c>
    9838:	80e1883a 	add	r16,r16,r3
    983c:	00c7c83a 	sub	r3,zero,r3
    9840:	80c00015 	stw	r3,0(r16)
    9844:	dfc00417 	ldw	ra,16(sp)
    9848:	dcc00317 	ldw	r19,12(sp)
    984c:	dc800217 	ldw	r18,8(sp)
    9850:	dc400117 	ldw	r17,4(sp)
    9854:	dc000017 	ldw	r16,0(sp)
    9858:	dec00504 	addi	sp,sp,20
    985c:	f800283a 	ret

00009860 <_printf_r>:
    9860:	defffd04 	addi	sp,sp,-12
    9864:	dfc00015 	stw	ra,0(sp)
    9868:	d9800115 	stw	r6,4(sp)
    986c:	d9c00215 	stw	r7,8(sp)
    9870:	20c00217 	ldw	r3,8(r4)
    9874:	01800074 	movhi	r6,1
    9878:	31a83104 	addi	r6,r6,-24380
    987c:	19800115 	stw	r6,4(r3)
    9880:	280d883a 	mov	r6,r5
    9884:	21400217 	ldw	r5,8(r4)
    9888:	d9c00104 	addi	r7,sp,4
    988c:	0009b7c0 	call	9b7c <___vfprintf_internal_r>
    9890:	dfc00017 	ldw	ra,0(sp)
    9894:	dec00304 	addi	sp,sp,12
    9898:	f800283a 	ret

0000989c <printf>:
    989c:	defffc04 	addi	sp,sp,-16
    98a0:	dfc00015 	stw	ra,0(sp)
    98a4:	d9400115 	stw	r5,4(sp)
    98a8:	d9800215 	stw	r6,8(sp)
    98ac:	d9c00315 	stw	r7,12(sp)
    98b0:	00800074 	movhi	r2,1
    98b4:	109fee04 	addi	r2,r2,32696
    98b8:	10800017 	ldw	r2,0(r2)
    98bc:	01400074 	movhi	r5,1
    98c0:	29683104 	addi	r5,r5,-24380
    98c4:	10c00217 	ldw	r3,8(r2)
    98c8:	d9800104 	addi	r6,sp,4
    98cc:	19400115 	stw	r5,4(r3)
    98d0:	200b883a 	mov	r5,r4
    98d4:	11000217 	ldw	r4,8(r2)
    98d8:	000a0a80 	call	a0a8 <__vfprintf_internal>
    98dc:	dfc00017 	ldw	ra,0(sp)
    98e0:	dec00404 	addi	sp,sp,16
    98e4:	f800283a 	ret

000098e8 <_puts_r>:
    98e8:	defffd04 	addi	sp,sp,-12
    98ec:	dc000015 	stw	r16,0(sp)
    98f0:	2021883a 	mov	r16,r4
    98f4:	2809883a 	mov	r4,r5
    98f8:	dfc00215 	stw	ra,8(sp)
    98fc:	dc400115 	stw	r17,4(sp)
    9900:	2823883a 	mov	r17,r5
    9904:	0009aa40 	call	9aa4 <strlen>
    9908:	81400217 	ldw	r5,8(r16)
    990c:	01000074 	movhi	r4,1
    9910:	21283104 	addi	r4,r4,-24380
    9914:	29000115 	stw	r4,4(r5)
    9918:	100f883a 	mov	r7,r2
    991c:	880d883a 	mov	r6,r17
    9920:	8009883a 	mov	r4,r16
    9924:	000a0c40 	call	a0c4 <__sfvwrite_small_dev>
    9928:	00ffffc4 	movi	r3,-1
    992c:	10c00926 	beq	r2,r3,9954 <_puts_r+0x6c>
    9930:	81400217 	ldw	r5,8(r16)
    9934:	01800074 	movhi	r6,1
    9938:	01c00044 	movi	r7,1
    993c:	28800117 	ldw	r2,4(r5)
    9940:	319aac04 	addi	r6,r6,27312
    9944:	8009883a 	mov	r4,r16
    9948:	103ee83a 	callr	r2
    994c:	10bfffe0 	cmpeqi	r2,r2,-1
    9950:	0085c83a 	sub	r2,zero,r2
    9954:	dfc00217 	ldw	ra,8(sp)
    9958:	dc400117 	ldw	r17,4(sp)
    995c:	dc000017 	ldw	r16,0(sp)
    9960:	dec00304 	addi	sp,sp,12
    9964:	f800283a 	ret

00009968 <puts>:
    9968:	00800074 	movhi	r2,1
    996c:	109fee04 	addi	r2,r2,32696
    9970:	200b883a 	mov	r5,r4
    9974:	11000017 	ldw	r4,0(r2)
    9978:	00098e81 	jmpi	98e8 <_puts_r>

0000997c <srand>:
    997c:	008000b4 	movhi	r2,2
    9980:	10a4fb04 	addi	r2,r2,-27668
    9984:	11000015 	stw	r4,0(r2)
    9988:	10000115 	stw	zero,4(r2)
    998c:	f800283a 	ret

00009990 <rand>:
    9990:	defffe04 	addi	sp,sp,-8
    9994:	dc000015 	stw	r16,0(sp)
    9998:	040000b4 	movhi	r16,2
    999c:	8424fb04 	addi	r16,r16,-27668
    99a0:	81000017 	ldw	r4,0(r16)
    99a4:	81400117 	ldw	r5,4(r16)
    99a8:	01932574 	movhi	r6,19605
    99ac:	01d614b4 	movhi	r7,22610
    99b0:	319fcb44 	addi	r6,r6,32557
    99b4:	39fd0b44 	addi	r7,r7,-3027
    99b8:	dfc00115 	stw	ra,4(sp)
    99bc:	000a2280 	call	a228 <__muldi3>
    99c0:	11000044 	addi	r4,r2,1
    99c4:	2085803a 	cmpltu	r2,r4,r2
    99c8:	10c7883a 	add	r3,r2,r3
    99cc:	00a00034 	movhi	r2,32768
    99d0:	10bfffc4 	addi	r2,r2,-1
    99d4:	1884703a 	and	r2,r3,r2
    99d8:	81000015 	stw	r4,0(r16)
    99dc:	80c00115 	stw	r3,4(r16)
    99e0:	dfc00117 	ldw	ra,4(sp)
    99e4:	dc000017 	ldw	r16,0(sp)
    99e8:	dec00204 	addi	sp,sp,8
    99ec:	f800283a 	ret

000099f0 <_sbrk_r>:
    99f0:	defffd04 	addi	sp,sp,-12
    99f4:	dc000015 	stw	r16,0(sp)
    99f8:	040000b4 	movhi	r16,2
    99fc:	dc400115 	stw	r17,4(sp)
    9a00:	8424fd04 	addi	r16,r16,-27660
    9a04:	2023883a 	mov	r17,r4
    9a08:	2809883a 	mov	r4,r5
    9a0c:	dfc00215 	stw	ra,8(sp)
    9a10:	80000015 	stw	zero,0(r16)
    9a14:	000a8440 	call	a844 <sbrk>
    9a18:	00ffffc4 	movi	r3,-1
    9a1c:	10c0031e 	bne	r2,r3,9a2c <_sbrk_r+0x3c>
    9a20:	80c00017 	ldw	r3,0(r16)
    9a24:	18000126 	beq	r3,zero,9a2c <_sbrk_r+0x3c>
    9a28:	88c00015 	stw	r3,0(r17)
    9a2c:	dfc00217 	ldw	ra,8(sp)
    9a30:	dc400117 	ldw	r17,4(sp)
    9a34:	dc000017 	ldw	r16,0(sp)
    9a38:	dec00304 	addi	sp,sp,12
    9a3c:	f800283a 	ret

00009a40 <strcmp>:
    9a40:	20800003 	ldbu	r2,0(r4)
    9a44:	10c03fcc 	andi	r3,r2,255
    9a48:	18c0201c 	xori	r3,r3,128
    9a4c:	18ffe004 	addi	r3,r3,-128
    9a50:	18000526 	beq	r3,zero,9a68 <strcmp+0x28>
    9a54:	29800007 	ldb	r6,0(r5)
    9a58:	1980031e 	bne	r3,r6,9a68 <strcmp+0x28>
    9a5c:	21000044 	addi	r4,r4,1
    9a60:	29400044 	addi	r5,r5,1
    9a64:	003ff606 	br	9a40 <__alt_mem_epcs_flash_controller+0xfe000a40>
    9a68:	28c00003 	ldbu	r3,0(r5)
    9a6c:	10803fcc 	andi	r2,r2,255
    9a70:	10c5c83a 	sub	r2,r2,r3
    9a74:	f800283a 	ret

00009a78 <strcpy>:
    9a78:	2005883a 	mov	r2,r4
    9a7c:	200d883a 	mov	r6,r4
    9a80:	28c00003 	ldbu	r3,0(r5)
    9a84:	31800044 	addi	r6,r6,1
    9a88:	29400044 	addi	r5,r5,1
    9a8c:	30ffffc5 	stb	r3,-1(r6)
    9a90:	18c03fcc 	andi	r3,r3,255
    9a94:	18c0201c 	xori	r3,r3,128
    9a98:	18ffe004 	addi	r3,r3,-128
    9a9c:	183ff81e 	bne	r3,zero,9a80 <__alt_mem_epcs_flash_controller+0xfe000a80>
    9aa0:	f800283a 	ret

00009aa4 <strlen>:
    9aa4:	2005883a 	mov	r2,r4
    9aa8:	10c00007 	ldb	r3,0(r2)
    9aac:	18000226 	beq	r3,zero,9ab8 <strlen+0x14>
    9ab0:	10800044 	addi	r2,r2,1
    9ab4:	003ffc06 	br	9aa8 <__alt_mem_epcs_flash_controller+0xfe000aa8>
    9ab8:	1105c83a 	sub	r2,r2,r4
    9abc:	f800283a 	ret

00009ac0 <time>:
    9ac0:	00800074 	movhi	r2,1
    9ac4:	defffc04 	addi	sp,sp,-16
    9ac8:	109fee04 	addi	r2,r2,32696
    9acc:	dc000215 	stw	r16,8(sp)
    9ad0:	2021883a 	mov	r16,r4
    9ad4:	11000017 	ldw	r4,0(r2)
    9ad8:	000d883a 	mov	r6,zero
    9adc:	d80b883a 	mov	r5,sp
    9ae0:	dfc00315 	stw	ra,12(sp)
    9ae4:	000a17c0 	call	a17c <_gettimeofday_r>
    9ae8:	10000416 	blt	r2,zero,9afc <time+0x3c>
    9aec:	d8800017 	ldw	r2,0(sp)
    9af0:	80000326 	beq	r16,zero,9b00 <time+0x40>
    9af4:	80800015 	stw	r2,0(r16)
    9af8:	00000106 	br	9b00 <time+0x40>
    9afc:	00bfffc4 	movi	r2,-1
    9b00:	dfc00317 	ldw	ra,12(sp)
    9b04:	dc000217 	ldw	r16,8(sp)
    9b08:	dec00404 	addi	sp,sp,16
    9b0c:	f800283a 	ret

00009b10 <print_repeat>:
    9b10:	defffb04 	addi	sp,sp,-20
    9b14:	dc800315 	stw	r18,12(sp)
    9b18:	dc400215 	stw	r17,8(sp)
    9b1c:	dc000115 	stw	r16,4(sp)
    9b20:	dfc00415 	stw	ra,16(sp)
    9b24:	2025883a 	mov	r18,r4
    9b28:	2823883a 	mov	r17,r5
    9b2c:	d9800005 	stb	r6,0(sp)
    9b30:	3821883a 	mov	r16,r7
    9b34:	04000a0e 	bge	zero,r16,9b60 <print_repeat+0x50>
    9b38:	88800117 	ldw	r2,4(r17)
    9b3c:	01c00044 	movi	r7,1
    9b40:	d80d883a 	mov	r6,sp
    9b44:	880b883a 	mov	r5,r17
    9b48:	9009883a 	mov	r4,r18
    9b4c:	103ee83a 	callr	r2
    9b50:	843fffc4 	addi	r16,r16,-1
    9b54:	103ff726 	beq	r2,zero,9b34 <__alt_mem_epcs_flash_controller+0xfe000b34>
    9b58:	00bfffc4 	movi	r2,-1
    9b5c:	00000106 	br	9b64 <print_repeat+0x54>
    9b60:	0005883a 	mov	r2,zero
    9b64:	dfc00417 	ldw	ra,16(sp)
    9b68:	dc800317 	ldw	r18,12(sp)
    9b6c:	dc400217 	ldw	r17,8(sp)
    9b70:	dc000117 	ldw	r16,4(sp)
    9b74:	dec00504 	addi	sp,sp,20
    9b78:	f800283a 	ret

00009b7c <___vfprintf_internal_r>:
    9b7c:	deffe504 	addi	sp,sp,-108
    9b80:	d8c00804 	addi	r3,sp,32
    9b84:	ddc01815 	stw	r23,96(sp)
    9b88:	dd801715 	stw	r22,92(sp)
    9b8c:	dd401615 	stw	r21,88(sp)
    9b90:	dd001515 	stw	r20,84(sp)
    9b94:	dcc01415 	stw	r19,80(sp)
    9b98:	dc801315 	stw	r18,76(sp)
    9b9c:	dc401215 	stw	r17,72(sp)
    9ba0:	dc001115 	stw	r16,68(sp)
    9ba4:	dfc01a15 	stw	ra,104(sp)
    9ba8:	df001915 	stw	fp,100(sp)
    9bac:	2029883a 	mov	r20,r4
    9bb0:	2823883a 	mov	r17,r5
    9bb4:	382d883a 	mov	r22,r7
    9bb8:	d9800f15 	stw	r6,60(sp)
    9bbc:	0021883a 	mov	r16,zero
    9bc0:	d8000e15 	stw	zero,56(sp)
    9bc4:	d8000a15 	stw	zero,40(sp)
    9bc8:	002b883a 	mov	r21,zero
    9bcc:	0027883a 	mov	r19,zero
    9bd0:	0025883a 	mov	r18,zero
    9bd4:	d8000c15 	stw	zero,48(sp)
    9bd8:	d8000b15 	stw	zero,44(sp)
    9bdc:	002f883a 	mov	r23,zero
    9be0:	d8c00915 	stw	r3,36(sp)
    9be4:	d8c00f17 	ldw	r3,60(sp)
    9be8:	19000003 	ldbu	r4,0(r3)
    9bec:	20803fcc 	andi	r2,r4,255
    9bf0:	1080201c 	xori	r2,r2,128
    9bf4:	10bfe004 	addi	r2,r2,-128
    9bf8:	10011e26 	beq	r2,zero,a074 <___vfprintf_internal_r+0x4f8>
    9bfc:	00c00044 	movi	r3,1
    9c00:	b8c01426 	beq	r23,r3,9c54 <___vfprintf_internal_r+0xd8>
    9c04:	1dc00216 	blt	r3,r23,9c10 <___vfprintf_internal_r+0x94>
    9c08:	b8000626 	beq	r23,zero,9c24 <___vfprintf_internal_r+0xa8>
    9c0c:	00011506 	br	a064 <___vfprintf_internal_r+0x4e8>
    9c10:	01400084 	movi	r5,2
    9c14:	b9401d26 	beq	r23,r5,9c8c <___vfprintf_internal_r+0x110>
    9c18:	014000c4 	movi	r5,3
    9c1c:	b9402b26 	beq	r23,r5,9ccc <___vfprintf_internal_r+0x150>
    9c20:	00011006 	br	a064 <___vfprintf_internal_r+0x4e8>
    9c24:	01400944 	movi	r5,37
    9c28:	1140fc26 	beq	r2,r5,a01c <___vfprintf_internal_r+0x4a0>
    9c2c:	88800117 	ldw	r2,4(r17)
    9c30:	d9000005 	stb	r4,0(sp)
    9c34:	01c00044 	movi	r7,1
    9c38:	d80d883a 	mov	r6,sp
    9c3c:	880b883a 	mov	r5,r17
    9c40:	a009883a 	mov	r4,r20
    9c44:	103ee83a 	callr	r2
    9c48:	1000d81e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9c4c:	84000044 	addi	r16,r16,1
    9c50:	00010406 	br	a064 <___vfprintf_internal_r+0x4e8>
    9c54:	01400c04 	movi	r5,48
    9c58:	1140fa26 	beq	r2,r5,a044 <___vfprintf_internal_r+0x4c8>
    9c5c:	01400944 	movi	r5,37
    9c60:	11400a1e 	bne	r2,r5,9c8c <___vfprintf_internal_r+0x110>
    9c64:	d8800005 	stb	r2,0(sp)
    9c68:	88800117 	ldw	r2,4(r17)
    9c6c:	b80f883a 	mov	r7,r23
    9c70:	d80d883a 	mov	r6,sp
    9c74:	880b883a 	mov	r5,r17
    9c78:	a009883a 	mov	r4,r20
    9c7c:	103ee83a 	callr	r2
    9c80:	1000ca1e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9c84:	84000044 	addi	r16,r16,1
    9c88:	0000f506 	br	a060 <___vfprintf_internal_r+0x4e4>
    9c8c:	25fff404 	addi	r23,r4,-48
    9c90:	bdc03fcc 	andi	r23,r23,255
    9c94:	00c00244 	movi	r3,9
    9c98:	1dc00936 	bltu	r3,r23,9cc0 <___vfprintf_internal_r+0x144>
    9c9c:	00bfffc4 	movi	r2,-1
    9ca0:	90800426 	beq	r18,r2,9cb4 <___vfprintf_internal_r+0x138>
    9ca4:	01400284 	movi	r5,10
    9ca8:	9009883a 	mov	r4,r18
    9cac:	000958c0 	call	958c <__mulsi3>
    9cb0:	00000106 	br	9cb8 <___vfprintf_internal_r+0x13c>
    9cb4:	0005883a 	mov	r2,zero
    9cb8:	b8a5883a 	add	r18,r23,r2
    9cbc:	0000e206 	br	a048 <___vfprintf_internal_r+0x4cc>
    9cc0:	01400b84 	movi	r5,46
    9cc4:	1140e426 	beq	r2,r5,a058 <___vfprintf_internal_r+0x4dc>
    9cc8:	05c00084 	movi	r23,2
    9ccc:	213ff404 	addi	r4,r4,-48
    9cd0:	27003fcc 	andi	fp,r4,255
    9cd4:	00c00244 	movi	r3,9
    9cd8:	1f000936 	bltu	r3,fp,9d00 <___vfprintf_internal_r+0x184>
    9cdc:	00bfffc4 	movi	r2,-1
    9ce0:	98800426 	beq	r19,r2,9cf4 <___vfprintf_internal_r+0x178>
    9ce4:	01400284 	movi	r5,10
    9ce8:	9809883a 	mov	r4,r19
    9cec:	000958c0 	call	958c <__mulsi3>
    9cf0:	00000106 	br	9cf8 <___vfprintf_internal_r+0x17c>
    9cf4:	0005883a 	mov	r2,zero
    9cf8:	e0a7883a 	add	r19,fp,r2
    9cfc:	0000d906 	br	a064 <___vfprintf_internal_r+0x4e8>
    9d00:	00c01b04 	movi	r3,108
    9d04:	10c0d226 	beq	r2,r3,a050 <___vfprintf_internal_r+0x4d4>
    9d08:	013fffc4 	movi	r4,-1
    9d0c:	99000226 	beq	r19,r4,9d18 <___vfprintf_internal_r+0x19c>
    9d10:	d8000b15 	stw	zero,44(sp)
    9d14:	00000106 	br	9d1c <___vfprintf_internal_r+0x1a0>
    9d18:	04c00044 	movi	r19,1
    9d1c:	01001a44 	movi	r4,105
    9d20:	11001626 	beq	r2,r4,9d7c <___vfprintf_internal_r+0x200>
    9d24:	20800916 	blt	r4,r2,9d4c <___vfprintf_internal_r+0x1d0>
    9d28:	010018c4 	movi	r4,99
    9d2c:	11008826 	beq	r2,r4,9f50 <___vfprintf_internal_r+0x3d4>
    9d30:	01001904 	movi	r4,100
    9d34:	11001126 	beq	r2,r4,9d7c <___vfprintf_internal_r+0x200>
    9d38:	01001604 	movi	r4,88
    9d3c:	1100c81e 	bne	r2,r4,a060 <___vfprintf_internal_r+0x4e4>
    9d40:	00c00044 	movi	r3,1
    9d44:	d8c00e15 	stw	r3,56(sp)
    9d48:	00001506 	br	9da0 <___vfprintf_internal_r+0x224>
    9d4c:	01001cc4 	movi	r4,115
    9d50:	11009826 	beq	r2,r4,9fb4 <___vfprintf_internal_r+0x438>
    9d54:	20800416 	blt	r4,r2,9d68 <___vfprintf_internal_r+0x1ec>
    9d58:	01001bc4 	movi	r4,111
    9d5c:	1100c01e 	bne	r2,r4,a060 <___vfprintf_internal_r+0x4e4>
    9d60:	05400204 	movi	r21,8
    9d64:	00000f06 	br	9da4 <___vfprintf_internal_r+0x228>
    9d68:	01001d44 	movi	r4,117
    9d6c:	11000d26 	beq	r2,r4,9da4 <___vfprintf_internal_r+0x228>
    9d70:	01001e04 	movi	r4,120
    9d74:	11000a26 	beq	r2,r4,9da0 <___vfprintf_internal_r+0x224>
    9d78:	0000b906 	br	a060 <___vfprintf_internal_r+0x4e4>
    9d7c:	d8c00a17 	ldw	r3,40(sp)
    9d80:	b7000104 	addi	fp,r22,4
    9d84:	18000726 	beq	r3,zero,9da4 <___vfprintf_internal_r+0x228>
    9d88:	df000d15 	stw	fp,52(sp)
    9d8c:	b5c00017 	ldw	r23,0(r22)
    9d90:	b800080e 	bge	r23,zero,9db4 <___vfprintf_internal_r+0x238>
    9d94:	05efc83a 	sub	r23,zero,r23
    9d98:	02400044 	movi	r9,1
    9d9c:	00000606 	br	9db8 <___vfprintf_internal_r+0x23c>
    9da0:	05400404 	movi	r21,16
    9da4:	b0c00104 	addi	r3,r22,4
    9da8:	d8c00d15 	stw	r3,52(sp)
    9dac:	b5c00017 	ldw	r23,0(r22)
    9db0:	d8000a15 	stw	zero,40(sp)
    9db4:	0013883a 	mov	r9,zero
    9db8:	d839883a 	mov	fp,sp
    9dbc:	b8001726 	beq	r23,zero,9e1c <___vfprintf_internal_r+0x2a0>
    9dc0:	a80b883a 	mov	r5,r21
    9dc4:	b809883a 	mov	r4,r23
    9dc8:	da401015 	stw	r9,64(sp)
    9dcc:	000a42c0 	call	a42c <__udivsi3>
    9dd0:	a80b883a 	mov	r5,r21
    9dd4:	1009883a 	mov	r4,r2
    9dd8:	102d883a 	mov	r22,r2
    9ddc:	000958c0 	call	958c <__mulsi3>
    9de0:	b885c83a 	sub	r2,r23,r2
    9de4:	00c00244 	movi	r3,9
    9de8:	da401017 	ldw	r9,64(sp)
    9dec:	18800216 	blt	r3,r2,9df8 <___vfprintf_internal_r+0x27c>
    9df0:	10800c04 	addi	r2,r2,48
    9df4:	00000506 	br	9e0c <___vfprintf_internal_r+0x290>
    9df8:	d8c00e17 	ldw	r3,56(sp)
    9dfc:	18000226 	beq	r3,zero,9e08 <___vfprintf_internal_r+0x28c>
    9e00:	10800dc4 	addi	r2,r2,55
    9e04:	00000106 	br	9e0c <___vfprintf_internal_r+0x290>
    9e08:	108015c4 	addi	r2,r2,87
    9e0c:	e0800005 	stb	r2,0(fp)
    9e10:	b02f883a 	mov	r23,r22
    9e14:	e7000044 	addi	fp,fp,1
    9e18:	003fe806 	br	9dbc <__alt_mem_epcs_flash_controller+0xfe000dbc>
    9e1c:	e6efc83a 	sub	r23,fp,sp
    9e20:	9dc5c83a 	sub	r2,r19,r23
    9e24:	0080090e 	bge	zero,r2,9e4c <___vfprintf_internal_r+0x2d0>
    9e28:	e085883a 	add	r2,fp,r2
    9e2c:	01400c04 	movi	r5,48
    9e30:	d8c00917 	ldw	r3,36(sp)
    9e34:	e009883a 	mov	r4,fp
    9e38:	e0c0032e 	bgeu	fp,r3,9e48 <___vfprintf_internal_r+0x2cc>
    9e3c:	e7000044 	addi	fp,fp,1
    9e40:	21400005 	stb	r5,0(r4)
    9e44:	e0bffa1e 	bne	fp,r2,9e30 <__alt_mem_epcs_flash_controller+0xfe000e30>
    9e48:	e6efc83a 	sub	r23,fp,sp
    9e4c:	d8c00b17 	ldw	r3,44(sp)
    9e50:	4dd1883a 	add	r8,r9,r23
    9e54:	922dc83a 	sub	r22,r18,r8
    9e58:	18001626 	beq	r3,zero,9eb4 <___vfprintf_internal_r+0x338>
    9e5c:	48000a26 	beq	r9,zero,9e88 <___vfprintf_internal_r+0x30c>
    9e60:	00800b44 	movi	r2,45
    9e64:	d8800805 	stb	r2,32(sp)
    9e68:	88800117 	ldw	r2,4(r17)
    9e6c:	01c00044 	movi	r7,1
    9e70:	d9800804 	addi	r6,sp,32
    9e74:	880b883a 	mov	r5,r17
    9e78:	a009883a 	mov	r4,r20
    9e7c:	103ee83a 	callr	r2
    9e80:	10004a1e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9e84:	84000044 	addi	r16,r16,1
    9e88:	0580070e 	bge	zero,r22,9ea8 <___vfprintf_internal_r+0x32c>
    9e8c:	b00f883a 	mov	r7,r22
    9e90:	01800c04 	movi	r6,48
    9e94:	880b883a 	mov	r5,r17
    9e98:	a009883a 	mov	r4,r20
    9e9c:	0009b100 	call	9b10 <print_repeat>
    9ea0:	1000421e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9ea4:	85a1883a 	add	r16,r16,r22
    9ea8:	e02d883a 	mov	r22,fp
    9eac:	bf2fc83a 	sub	r23,r23,fp
    9eb0:	00002006 	br	9f34 <___vfprintf_internal_r+0x3b8>
    9eb4:	0580090e 	bge	zero,r22,9edc <___vfprintf_internal_r+0x360>
    9eb8:	b00f883a 	mov	r7,r22
    9ebc:	01800804 	movi	r6,32
    9ec0:	880b883a 	mov	r5,r17
    9ec4:	a009883a 	mov	r4,r20
    9ec8:	da401015 	stw	r9,64(sp)
    9ecc:	0009b100 	call	9b10 <print_repeat>
    9ed0:	da401017 	ldw	r9,64(sp)
    9ed4:	1000351e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9ed8:	85a1883a 	add	r16,r16,r22
    9edc:	483ff226 	beq	r9,zero,9ea8 <__alt_mem_epcs_flash_controller+0xfe000ea8>
    9ee0:	00800b44 	movi	r2,45
    9ee4:	d8800805 	stb	r2,32(sp)
    9ee8:	88800117 	ldw	r2,4(r17)
    9eec:	01c00044 	movi	r7,1
    9ef0:	d9800804 	addi	r6,sp,32
    9ef4:	880b883a 	mov	r5,r17
    9ef8:	a009883a 	mov	r4,r20
    9efc:	103ee83a 	callr	r2
    9f00:	10002a1e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9f04:	84000044 	addi	r16,r16,1
    9f08:	003fe706 	br	9ea8 <__alt_mem_epcs_flash_controller+0xfe000ea8>
    9f0c:	b5bfffc4 	addi	r22,r22,-1
    9f10:	b0800003 	ldbu	r2,0(r22)
    9f14:	01c00044 	movi	r7,1
    9f18:	d9800804 	addi	r6,sp,32
    9f1c:	d8800805 	stb	r2,32(sp)
    9f20:	88800117 	ldw	r2,4(r17)
    9f24:	880b883a 	mov	r5,r17
    9f28:	a009883a 	mov	r4,r20
    9f2c:	103ee83a 	callr	r2
    9f30:	10001e1e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9f34:	8585c83a 	sub	r2,r16,r22
    9f38:	b5c9883a 	add	r4,r22,r23
    9f3c:	e085883a 	add	r2,fp,r2
    9f40:	013ff216 	blt	zero,r4,9f0c <__alt_mem_epcs_flash_controller+0xfe000f0c>
    9f44:	1021883a 	mov	r16,r2
    9f48:	dd800d17 	ldw	r22,52(sp)
    9f4c:	00004406 	br	a060 <___vfprintf_internal_r+0x4e4>
    9f50:	00800044 	movi	r2,1
    9f54:	1480080e 	bge	r2,r18,9f78 <___vfprintf_internal_r+0x3fc>
    9f58:	95ffffc4 	addi	r23,r18,-1
    9f5c:	b80f883a 	mov	r7,r23
    9f60:	01800804 	movi	r6,32
    9f64:	880b883a 	mov	r5,r17
    9f68:	a009883a 	mov	r4,r20
    9f6c:	0009b100 	call	9b10 <print_repeat>
    9f70:	10000e1e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9f74:	85e1883a 	add	r16,r16,r23
    9f78:	b0800017 	ldw	r2,0(r22)
    9f7c:	01c00044 	movi	r7,1
    9f80:	d80d883a 	mov	r6,sp
    9f84:	d8800005 	stb	r2,0(sp)
    9f88:	88800117 	ldw	r2,4(r17)
    9f8c:	880b883a 	mov	r5,r17
    9f90:	a009883a 	mov	r4,r20
    9f94:	b5c00104 	addi	r23,r22,4
    9f98:	103ee83a 	callr	r2
    9f9c:	1000031e 	bne	r2,zero,9fac <___vfprintf_internal_r+0x430>
    9fa0:	84000044 	addi	r16,r16,1
    9fa4:	b82d883a 	mov	r22,r23
    9fa8:	00002d06 	br	a060 <___vfprintf_internal_r+0x4e4>
    9fac:	00bfffc4 	movi	r2,-1
    9fb0:	00003106 	br	a078 <___vfprintf_internal_r+0x4fc>
    9fb4:	b5c00017 	ldw	r23,0(r22)
    9fb8:	b7000104 	addi	fp,r22,4
    9fbc:	b809883a 	mov	r4,r23
    9fc0:	0009aa40 	call	9aa4 <strlen>
    9fc4:	9091c83a 	sub	r8,r18,r2
    9fc8:	102d883a 	mov	r22,r2
    9fcc:	0200090e 	bge	zero,r8,9ff4 <___vfprintf_internal_r+0x478>
    9fd0:	400f883a 	mov	r7,r8
    9fd4:	01800804 	movi	r6,32
    9fd8:	880b883a 	mov	r5,r17
    9fdc:	a009883a 	mov	r4,r20
    9fe0:	da001015 	stw	r8,64(sp)
    9fe4:	0009b100 	call	9b10 <print_repeat>
    9fe8:	da001017 	ldw	r8,64(sp)
    9fec:	103fef1e 	bne	r2,zero,9fac <__alt_mem_epcs_flash_controller+0xfe000fac>
    9ff0:	8221883a 	add	r16,r16,r8
    9ff4:	88800117 	ldw	r2,4(r17)
    9ff8:	b00f883a 	mov	r7,r22
    9ffc:	b80d883a 	mov	r6,r23
    a000:	880b883a 	mov	r5,r17
    a004:	a009883a 	mov	r4,r20
    a008:	103ee83a 	callr	r2
    a00c:	103fe71e 	bne	r2,zero,9fac <__alt_mem_epcs_flash_controller+0xfe000fac>
    a010:	85a1883a 	add	r16,r16,r22
    a014:	e02d883a 	mov	r22,fp
    a018:	00001106 	br	a060 <___vfprintf_internal_r+0x4e4>
    a01c:	00c00044 	movi	r3,1
    a020:	04ffffc4 	movi	r19,-1
    a024:	d8000e15 	stw	zero,56(sp)
    a028:	d8c00a15 	stw	r3,40(sp)
    a02c:	05400284 	movi	r21,10
    a030:	9825883a 	mov	r18,r19
    a034:	d8000c15 	stw	zero,48(sp)
    a038:	d8000b15 	stw	zero,44(sp)
    a03c:	182f883a 	mov	r23,r3
    a040:	00000806 	br	a064 <___vfprintf_internal_r+0x4e8>
    a044:	ddc00b15 	stw	r23,44(sp)
    a048:	05c00084 	movi	r23,2
    a04c:	00000506 	br	a064 <___vfprintf_internal_r+0x4e8>
    a050:	00c00044 	movi	r3,1
    a054:	d8c00c15 	stw	r3,48(sp)
    a058:	05c000c4 	movi	r23,3
    a05c:	00000106 	br	a064 <___vfprintf_internal_r+0x4e8>
    a060:	002f883a 	mov	r23,zero
    a064:	d8c00f17 	ldw	r3,60(sp)
    a068:	18c00044 	addi	r3,r3,1
    a06c:	d8c00f15 	stw	r3,60(sp)
    a070:	003edc06 	br	9be4 <__alt_mem_epcs_flash_controller+0xfe000be4>
    a074:	8005883a 	mov	r2,r16
    a078:	dfc01a17 	ldw	ra,104(sp)
    a07c:	df001917 	ldw	fp,100(sp)
    a080:	ddc01817 	ldw	r23,96(sp)
    a084:	dd801717 	ldw	r22,92(sp)
    a088:	dd401617 	ldw	r21,88(sp)
    a08c:	dd001517 	ldw	r20,84(sp)
    a090:	dcc01417 	ldw	r19,80(sp)
    a094:	dc801317 	ldw	r18,76(sp)
    a098:	dc401217 	ldw	r17,72(sp)
    a09c:	dc001117 	ldw	r16,68(sp)
    a0a0:	dec01b04 	addi	sp,sp,108
    a0a4:	f800283a 	ret

0000a0a8 <__vfprintf_internal>:
    a0a8:	00800074 	movhi	r2,1
    a0ac:	109fee04 	addi	r2,r2,32696
    a0b0:	300f883a 	mov	r7,r6
    a0b4:	280d883a 	mov	r6,r5
    a0b8:	200b883a 	mov	r5,r4
    a0bc:	11000017 	ldw	r4,0(r2)
    a0c0:	0009b7c1 	jmpi	9b7c <___vfprintf_internal_r>

0000a0c4 <__sfvwrite_small_dev>:
    a0c4:	2880000b 	ldhu	r2,0(r5)
    a0c8:	1080020c 	andi	r2,r2,8
    a0cc:	10002126 	beq	r2,zero,a154 <__sfvwrite_small_dev+0x90>
    a0d0:	2880008f 	ldh	r2,2(r5)
    a0d4:	defffa04 	addi	sp,sp,-24
    a0d8:	dc000015 	stw	r16,0(sp)
    a0dc:	dfc00515 	stw	ra,20(sp)
    a0e0:	dd000415 	stw	r20,16(sp)
    a0e4:	dcc00315 	stw	r19,12(sp)
    a0e8:	dc800215 	stw	r18,8(sp)
    a0ec:	dc400115 	stw	r17,4(sp)
    a0f0:	2821883a 	mov	r16,r5
    a0f4:	10001216 	blt	r2,zero,a140 <__sfvwrite_small_dev+0x7c>
    a0f8:	2027883a 	mov	r19,r4
    a0fc:	3025883a 	mov	r18,r6
    a100:	3823883a 	mov	r17,r7
    a104:	05010004 	movi	r20,1024
    a108:	04400b0e 	bge	zero,r17,a138 <__sfvwrite_small_dev+0x74>
    a10c:	880f883a 	mov	r7,r17
    a110:	a440010e 	bge	r20,r17,a118 <__sfvwrite_small_dev+0x54>
    a114:	01c10004 	movi	r7,1024
    a118:	8140008f 	ldh	r5,2(r16)
    a11c:	900d883a 	mov	r6,r18
    a120:	9809883a 	mov	r4,r19
    a124:	000a1d00 	call	a1d0 <_write_r>
    a128:	0080050e 	bge	zero,r2,a140 <__sfvwrite_small_dev+0x7c>
    a12c:	88a3c83a 	sub	r17,r17,r2
    a130:	90a5883a 	add	r18,r18,r2
    a134:	003ff406 	br	a108 <__alt_mem_epcs_flash_controller+0xfe001108>
    a138:	0005883a 	mov	r2,zero
    a13c:	00000706 	br	a15c <__sfvwrite_small_dev+0x98>
    a140:	8080000b 	ldhu	r2,0(r16)
    a144:	10801014 	ori	r2,r2,64
    a148:	8080000d 	sth	r2,0(r16)
    a14c:	00bfffc4 	movi	r2,-1
    a150:	00000206 	br	a15c <__sfvwrite_small_dev+0x98>
    a154:	00bfffc4 	movi	r2,-1
    a158:	f800283a 	ret
    a15c:	dfc00517 	ldw	ra,20(sp)
    a160:	dd000417 	ldw	r20,16(sp)
    a164:	dcc00317 	ldw	r19,12(sp)
    a168:	dc800217 	ldw	r18,8(sp)
    a16c:	dc400117 	ldw	r17,4(sp)
    a170:	dc000017 	ldw	r16,0(sp)
    a174:	dec00604 	addi	sp,sp,24
    a178:	f800283a 	ret

0000a17c <_gettimeofday_r>:
    a17c:	defffd04 	addi	sp,sp,-12
    a180:	dc000015 	stw	r16,0(sp)
    a184:	040000b4 	movhi	r16,2
    a188:	dc400115 	stw	r17,4(sp)
    a18c:	8424fd04 	addi	r16,r16,-27660
    a190:	2023883a 	mov	r17,r4
    a194:	2809883a 	mov	r4,r5
    a198:	300b883a 	mov	r5,r6
    a19c:	dfc00215 	stw	ra,8(sp)
    a1a0:	80000015 	stw	zero,0(r16)
    a1a4:	000a4e80 	call	a4e8 <gettimeofday>
    a1a8:	00ffffc4 	movi	r3,-1
    a1ac:	10c0031e 	bne	r2,r3,a1bc <_gettimeofday_r+0x40>
    a1b0:	80c00017 	ldw	r3,0(r16)
    a1b4:	18000126 	beq	r3,zero,a1bc <_gettimeofday_r+0x40>
    a1b8:	88c00015 	stw	r3,0(r17)
    a1bc:	dfc00217 	ldw	ra,8(sp)
    a1c0:	dc400117 	ldw	r17,4(sp)
    a1c4:	dc000017 	ldw	r16,0(sp)
    a1c8:	dec00304 	addi	sp,sp,12
    a1cc:	f800283a 	ret

0000a1d0 <_write_r>:
    a1d0:	defffd04 	addi	sp,sp,-12
    a1d4:	dc000015 	stw	r16,0(sp)
    a1d8:	040000b4 	movhi	r16,2
    a1dc:	dc400115 	stw	r17,4(sp)
    a1e0:	8424fd04 	addi	r16,r16,-27660
    a1e4:	2023883a 	mov	r17,r4
    a1e8:	2809883a 	mov	r4,r5
    a1ec:	300b883a 	mov	r5,r6
    a1f0:	380d883a 	mov	r6,r7
    a1f4:	dfc00215 	stw	ra,8(sp)
    a1f8:	80000015 	stw	zero,0(r16)
    a1fc:	000aad40 	call	aad4 <write>
    a200:	00ffffc4 	movi	r3,-1
    a204:	10c0031e 	bne	r2,r3,a214 <_write_r+0x44>
    a208:	80c00017 	ldw	r3,0(r16)
    a20c:	18000126 	beq	r3,zero,a214 <_write_r+0x44>
    a210:	88c00015 	stw	r3,0(r17)
    a214:	dfc00217 	ldw	ra,8(sp)
    a218:	dc400117 	ldw	r17,4(sp)
    a21c:	dc000017 	ldw	r16,0(sp)
    a220:	dec00304 	addi	sp,sp,12
    a224:	f800283a 	ret

0000a228 <__muldi3>:
    a228:	defff604 	addi	sp,sp,-40
    a22c:	dd800615 	stw	r22,24(sp)
    a230:	dd400515 	stw	r21,20(sp)
    a234:	dc400115 	stw	r17,4(sp)
    a238:	357fffcc 	andi	r21,r6,65535
    a23c:	2022d43a 	srli	r17,r4,16
    a240:	25bfffcc 	andi	r22,r4,65535
    a244:	dcc00315 	stw	r19,12(sp)
    a248:	dc800215 	stw	r18,8(sp)
    a24c:	2027883a 	mov	r19,r4
    a250:	2825883a 	mov	r18,r5
    a254:	b009883a 	mov	r4,r22
    a258:	a80b883a 	mov	r5,r21
    a25c:	dfc00915 	stw	ra,36(sp)
    a260:	df000815 	stw	fp,32(sp)
    a264:	ddc00715 	stw	r23,28(sp)
    a268:	3839883a 	mov	fp,r7
    a26c:	302ed43a 	srli	r23,r6,16
    a270:	dd000415 	stw	r20,16(sp)
    a274:	dc000015 	stw	r16,0(sp)
    a278:	3029883a 	mov	r20,r6
    a27c:	000958c0 	call	958c <__mulsi3>
    a280:	a80b883a 	mov	r5,r21
    a284:	8809883a 	mov	r4,r17
    a288:	1021883a 	mov	r16,r2
    a28c:	000958c0 	call	958c <__mulsi3>
    a290:	8809883a 	mov	r4,r17
    a294:	b80b883a 	mov	r5,r23
    a298:	102b883a 	mov	r21,r2
    a29c:	000958c0 	call	958c <__mulsi3>
    a2a0:	b80b883a 	mov	r5,r23
    a2a4:	b009883a 	mov	r4,r22
    a2a8:	1023883a 	mov	r17,r2
    a2ac:	000958c0 	call	958c <__mulsi3>
    a2b0:	8006d43a 	srli	r3,r16,16
    a2b4:	1545883a 	add	r2,r2,r21
    a2b8:	1885883a 	add	r2,r3,r2
    a2bc:	1540022e 	bgeu	r2,r21,a2c8 <__muldi3+0xa0>
    a2c0:	00c00074 	movhi	r3,1
    a2c4:	88e3883a 	add	r17,r17,r3
    a2c8:	1006d43a 	srli	r3,r2,16
    a2cc:	1004943a 	slli	r2,r2,16
    a2d0:	e00b883a 	mov	r5,fp
    a2d4:	9809883a 	mov	r4,r19
    a2d8:	843fffcc 	andi	r16,r16,65535
    a2dc:	1c63883a 	add	r17,r3,r17
    a2e0:	1421883a 	add	r16,r2,r16
    a2e4:	000958c0 	call	958c <__mulsi3>
    a2e8:	900b883a 	mov	r5,r18
    a2ec:	a009883a 	mov	r4,r20
    a2f0:	1027883a 	mov	r19,r2
    a2f4:	000958c0 	call	958c <__mulsi3>
    a2f8:	9885883a 	add	r2,r19,r2
    a2fc:	1447883a 	add	r3,r2,r17
    a300:	8005883a 	mov	r2,r16
    a304:	dfc00917 	ldw	ra,36(sp)
    a308:	df000817 	ldw	fp,32(sp)
    a30c:	ddc00717 	ldw	r23,28(sp)
    a310:	dd800617 	ldw	r22,24(sp)
    a314:	dd400517 	ldw	r21,20(sp)
    a318:	dd000417 	ldw	r20,16(sp)
    a31c:	dcc00317 	ldw	r19,12(sp)
    a320:	dc800217 	ldw	r18,8(sp)
    a324:	dc400117 	ldw	r17,4(sp)
    a328:	dc000017 	ldw	r16,0(sp)
    a32c:	dec00a04 	addi	sp,sp,40
    a330:	f800283a 	ret

0000a334 <__divsi3>:
    a334:	20001b16 	blt	r4,zero,a3a4 <__divsi3+0x70>
    a338:	000f883a 	mov	r7,zero
    a33c:	28001616 	blt	r5,zero,a398 <__divsi3+0x64>
    a340:	200d883a 	mov	r6,r4
    a344:	29001a2e 	bgeu	r5,r4,a3b0 <__divsi3+0x7c>
    a348:	00800804 	movi	r2,32
    a34c:	00c00044 	movi	r3,1
    a350:	00000106 	br	a358 <__divsi3+0x24>
    a354:	10000d26 	beq	r2,zero,a38c <__divsi3+0x58>
    a358:	294b883a 	add	r5,r5,r5
    a35c:	10bfffc4 	addi	r2,r2,-1
    a360:	18c7883a 	add	r3,r3,r3
    a364:	293ffb36 	bltu	r5,r4,a354 <__alt_mem_epcs_flash_controller+0xfe001354>
    a368:	0005883a 	mov	r2,zero
    a36c:	18000726 	beq	r3,zero,a38c <__divsi3+0x58>
    a370:	0005883a 	mov	r2,zero
    a374:	31400236 	bltu	r6,r5,a380 <__divsi3+0x4c>
    a378:	314dc83a 	sub	r6,r6,r5
    a37c:	10c4b03a 	or	r2,r2,r3
    a380:	1806d07a 	srli	r3,r3,1
    a384:	280ad07a 	srli	r5,r5,1
    a388:	183ffa1e 	bne	r3,zero,a374 <__alt_mem_epcs_flash_controller+0xfe001374>
    a38c:	38000126 	beq	r7,zero,a394 <__divsi3+0x60>
    a390:	0085c83a 	sub	r2,zero,r2
    a394:	f800283a 	ret
    a398:	014bc83a 	sub	r5,zero,r5
    a39c:	39c0005c 	xori	r7,r7,1
    a3a0:	003fe706 	br	a340 <__alt_mem_epcs_flash_controller+0xfe001340>
    a3a4:	0109c83a 	sub	r4,zero,r4
    a3a8:	01c00044 	movi	r7,1
    a3ac:	003fe306 	br	a33c <__alt_mem_epcs_flash_controller+0xfe00133c>
    a3b0:	00c00044 	movi	r3,1
    a3b4:	003fee06 	br	a370 <__alt_mem_epcs_flash_controller+0xfe001370>

0000a3b8 <__modsi3>:
    a3b8:	20001716 	blt	r4,zero,a418 <__modsi3+0x60>
    a3bc:	000f883a 	mov	r7,zero
    a3c0:	2005883a 	mov	r2,r4
    a3c4:	28001216 	blt	r5,zero,a410 <__modsi3+0x58>
    a3c8:	2900162e 	bgeu	r5,r4,a424 <__modsi3+0x6c>
    a3cc:	01800804 	movi	r6,32
    a3d0:	00c00044 	movi	r3,1
    a3d4:	00000106 	br	a3dc <__modsi3+0x24>
    a3d8:	30000a26 	beq	r6,zero,a404 <__modsi3+0x4c>
    a3dc:	294b883a 	add	r5,r5,r5
    a3e0:	31bfffc4 	addi	r6,r6,-1
    a3e4:	18c7883a 	add	r3,r3,r3
    a3e8:	293ffb36 	bltu	r5,r4,a3d8 <__alt_mem_epcs_flash_controller+0xfe0013d8>
    a3ec:	18000526 	beq	r3,zero,a404 <__modsi3+0x4c>
    a3f0:	1806d07a 	srli	r3,r3,1
    a3f4:	11400136 	bltu	r2,r5,a3fc <__modsi3+0x44>
    a3f8:	1145c83a 	sub	r2,r2,r5
    a3fc:	280ad07a 	srli	r5,r5,1
    a400:	183ffb1e 	bne	r3,zero,a3f0 <__alt_mem_epcs_flash_controller+0xfe0013f0>
    a404:	38000126 	beq	r7,zero,a40c <__modsi3+0x54>
    a408:	0085c83a 	sub	r2,zero,r2
    a40c:	f800283a 	ret
    a410:	014bc83a 	sub	r5,zero,r5
    a414:	003fec06 	br	a3c8 <__alt_mem_epcs_flash_controller+0xfe0013c8>
    a418:	0109c83a 	sub	r4,zero,r4
    a41c:	01c00044 	movi	r7,1
    a420:	003fe706 	br	a3c0 <__alt_mem_epcs_flash_controller+0xfe0013c0>
    a424:	00c00044 	movi	r3,1
    a428:	003ff106 	br	a3f0 <__alt_mem_epcs_flash_controller+0xfe0013f0>

0000a42c <__udivsi3>:
    a42c:	200d883a 	mov	r6,r4
    a430:	2900152e 	bgeu	r5,r4,a488 <__udivsi3+0x5c>
    a434:	28001416 	blt	r5,zero,a488 <__udivsi3+0x5c>
    a438:	00800804 	movi	r2,32
    a43c:	00c00044 	movi	r3,1
    a440:	00000206 	br	a44c <__udivsi3+0x20>
    a444:	10000e26 	beq	r2,zero,a480 <__udivsi3+0x54>
    a448:	28000516 	blt	r5,zero,a460 <__udivsi3+0x34>
    a44c:	294b883a 	add	r5,r5,r5
    a450:	10bfffc4 	addi	r2,r2,-1
    a454:	18c7883a 	add	r3,r3,r3
    a458:	293ffa36 	bltu	r5,r4,a444 <__alt_mem_epcs_flash_controller+0xfe001444>
    a45c:	18000826 	beq	r3,zero,a480 <__udivsi3+0x54>
    a460:	0005883a 	mov	r2,zero
    a464:	31400236 	bltu	r6,r5,a470 <__udivsi3+0x44>
    a468:	314dc83a 	sub	r6,r6,r5
    a46c:	10c4b03a 	or	r2,r2,r3
    a470:	1806d07a 	srli	r3,r3,1
    a474:	280ad07a 	srli	r5,r5,1
    a478:	183ffa1e 	bne	r3,zero,a464 <__alt_mem_epcs_flash_controller+0xfe001464>
    a47c:	f800283a 	ret
    a480:	0005883a 	mov	r2,zero
    a484:	f800283a 	ret
    a488:	00c00044 	movi	r3,1
    a48c:	003ff406 	br	a460 <__alt_mem_epcs_flash_controller+0xfe001460>

0000a490 <__umodsi3>:
    a490:	2005883a 	mov	r2,r4
    a494:	2900122e 	bgeu	r5,r4,a4e0 <__umodsi3+0x50>
    a498:	28001116 	blt	r5,zero,a4e0 <__umodsi3+0x50>
    a49c:	01800804 	movi	r6,32
    a4a0:	00c00044 	movi	r3,1
    a4a4:	00000206 	br	a4b0 <__umodsi3+0x20>
    a4a8:	30000c26 	beq	r6,zero,a4dc <__umodsi3+0x4c>
    a4ac:	28000516 	blt	r5,zero,a4c4 <__umodsi3+0x34>
    a4b0:	294b883a 	add	r5,r5,r5
    a4b4:	31bfffc4 	addi	r6,r6,-1
    a4b8:	18c7883a 	add	r3,r3,r3
    a4bc:	293ffa36 	bltu	r5,r4,a4a8 <__alt_mem_epcs_flash_controller+0xfe0014a8>
    a4c0:	18000626 	beq	r3,zero,a4dc <__umodsi3+0x4c>
    a4c4:	1806d07a 	srli	r3,r3,1
    a4c8:	11400136 	bltu	r2,r5,a4d0 <__umodsi3+0x40>
    a4cc:	1145c83a 	sub	r2,r2,r5
    a4d0:	280ad07a 	srli	r5,r5,1
    a4d4:	183ffb1e 	bne	r3,zero,a4c4 <__alt_mem_epcs_flash_controller+0xfe0014c4>
    a4d8:	f800283a 	ret
    a4dc:	f800283a 	ret
    a4e0:	00c00044 	movi	r3,1
    a4e4:	003ff706 	br	a4c4 <__alt_mem_epcs_flash_controller+0xfe0014c4>

0000a4e8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    a4e8:	defff404 	addi	sp,sp,-48
    a4ec:	dfc00b15 	stw	ra,44(sp)
    a4f0:	df000a15 	stw	fp,40(sp)
    a4f4:	dd000915 	stw	r20,36(sp)
    a4f8:	dcc00815 	stw	r19,32(sp)
    a4fc:	dc800715 	stw	r18,28(sp)
    a500:	dc400615 	stw	r17,24(sp)
    a504:	dc000515 	stw	r16,20(sp)
    a508:	df000a04 	addi	fp,sp,40
    a50c:	e13ff915 	stw	r4,-28(fp)
    a510:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    a514:	e0bffa17 	ldw	r2,-24(fp)
    a518:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    a51c:	d0a51a17 	ldw	r2,-27544(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    a520:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a524:	d0a51917 	ldw	r2,-27548(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    a528:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    a52c:	e0bff817 	ldw	r2,-32(fp)
    a530:	10005f26 	beq	r2,zero,a6b0 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    a534:	d0a51417 	ldw	r2,-27568(gp)
    a538:	1029883a 	mov	r20,r2
    a53c:	e17ff817 	ldw	r5,-32(fp)
    a540:	e13ff717 	ldw	r4,-36(fp)
    a544:	000a42c0 	call	a42c <__udivsi3>
    a548:	a085883a 	add	r2,r20,r2
    a54c:	1007883a 	mov	r3,r2
    a550:	e0bff917 	ldw	r2,-28(fp)
    a554:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    a558:	d0a51517 	ldw	r2,-27564(gp)
    a55c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    a560:	e0bff717 	ldw	r2,-36(fp)
    a564:	1021883a 	mov	r16,r2
    a568:	0023883a 	mov	r17,zero
    a56c:	e17ff817 	ldw	r5,-32(fp)
    a570:	010003f4 	movhi	r4,15
    a574:	21109004 	addi	r4,r4,16960
    a578:	000a42c0 	call	a42c <__udivsi3>
    a57c:	1025883a 	mov	r18,r2
    a580:	0027883a 	mov	r19,zero
    a584:	900d883a 	mov	r6,r18
    a588:	980f883a 	mov	r7,r19
    a58c:	8009883a 	mov	r4,r16
    a590:	880b883a 	mov	r5,r17
    a594:	000a2280 	call	a228 <__muldi3>
    a598:	1009883a 	mov	r4,r2
    a59c:	180b883a 	mov	r5,r3
    a5a0:	2005883a 	mov	r2,r4
    a5a4:	2807883a 	mov	r3,r5
    a5a8:	018003f4 	movhi	r6,15
    a5ac:	31909004 	addi	r6,r6,16960
    a5b0:	000f883a 	mov	r7,zero
    a5b4:	1009883a 	mov	r4,r2
    a5b8:	180b883a 	mov	r5,r3
    a5bc:	000dcac0 	call	dcac <__umoddi3>
    a5c0:	1009883a 	mov	r4,r2
    a5c4:	180b883a 	mov	r5,r3
    a5c8:	2005883a 	mov	r2,r4
    a5cc:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    a5d0:	a085883a 	add	r2,r20,r2
    a5d4:	1007883a 	mov	r3,r2
    a5d8:	e0bff917 	ldw	r2,-28(fp)
    a5dc:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    a5e0:	00001406 	br	a634 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
    a5e4:	e0bff917 	ldw	r2,-28(fp)
    a5e8:	10800017 	ldw	r2,0(r2)
    a5ec:	00800516 	blt	zero,r2,a604 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
    a5f0:	e0bff917 	ldw	r2,-28(fp)
    a5f4:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    a5f8:	e0bff917 	ldw	r2,-28(fp)
    a5fc:	10000115 	stw	zero,4(r2)
          break;
    a600:	00000f06 	br	a640 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
    a604:	e0bff917 	ldw	r2,-28(fp)
    a608:	10800017 	ldw	r2,0(r2)
    a60c:	10ffffc4 	addi	r3,r2,-1
    a610:	e0bff917 	ldw	r2,-28(fp)
    a614:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    a618:	e0bff917 	ldw	r2,-28(fp)
    a61c:	10c00117 	ldw	r3,4(r2)
    a620:	008003f4 	movhi	r2,15
    a624:	10909004 	addi	r2,r2,16960
    a628:	1887883a 	add	r3,r3,r2
    a62c:	e0bff917 	ldw	r2,-28(fp)
    a630:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    a634:	e0bff917 	ldw	r2,-28(fp)
    a638:	10800117 	ldw	r2,4(r2)
    a63c:	103fe916 	blt	r2,zero,a5e4 <__alt_mem_epcs_flash_controller+0xfe0015e4>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    a640:	00000c06 	br	a674 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
    a644:	e0bff917 	ldw	r2,-28(fp)
    a648:	10800017 	ldw	r2,0(r2)
    a64c:	10c00044 	addi	r3,r2,1
    a650:	e0bff917 	ldw	r2,-28(fp)
    a654:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    a658:	e0bff917 	ldw	r2,-28(fp)
    a65c:	10c00117 	ldw	r3,4(r2)
    a660:	00bffc74 	movhi	r2,65521
    a664:	10af7004 	addi	r2,r2,-16960
    a668:	1887883a 	add	r3,r3,r2
    a66c:	e0bff917 	ldw	r2,-28(fp)
    a670:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    a674:	e0bff917 	ldw	r2,-28(fp)
    a678:	10c00117 	ldw	r3,4(r2)
    a67c:	008003f4 	movhi	r2,15
    a680:	10908fc4 	addi	r2,r2,16959
    a684:	10ffef16 	blt	r2,r3,a644 <__alt_mem_epcs_flash_controller+0xfe001644>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    a688:	e0bff617 	ldw	r2,-40(fp)
    a68c:	10000626 	beq	r2,zero,a6a8 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    a690:	d0e51217 	ldw	r3,-27576(gp)
    a694:	e0bff617 	ldw	r2,-40(fp)
    a698:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    a69c:	d0e51317 	ldw	r3,-27572(gp)
    a6a0:	e0bff617 	ldw	r2,-40(fp)
    a6a4:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    a6a8:	0005883a 	mov	r2,zero
    a6ac:	00000106 	br	a6b4 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
    a6b0:	00bfde84 	movi	r2,-134
}
    a6b4:	e6fffb04 	addi	sp,fp,-20
    a6b8:	dfc00617 	ldw	ra,24(sp)
    a6bc:	df000517 	ldw	fp,20(sp)
    a6c0:	dd000417 	ldw	r20,16(sp)
    a6c4:	dcc00317 	ldw	r19,12(sp)
    a6c8:	dc800217 	ldw	r18,8(sp)
    a6cc:	dc400117 	ldw	r17,4(sp)
    a6d0:	dc000017 	ldw	r16,0(sp)
    a6d4:	dec00704 	addi	sp,sp,28
    a6d8:	f800283a 	ret

0000a6dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a6dc:	defffc04 	addi	sp,sp,-16
    a6e0:	df000315 	stw	fp,12(sp)
    a6e4:	df000304 	addi	fp,sp,12
    a6e8:	e13ffd15 	stw	r4,-12(fp)
    a6ec:	e17ffe15 	stw	r5,-8(fp)
    a6f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a6f4:	e0fffe17 	ldw	r3,-8(fp)
    a6f8:	e0bffd17 	ldw	r2,-12(fp)
    a6fc:	18800c26 	beq	r3,r2,a730 <alt_load_section+0x54>
  {
    while( to != end )
    a700:	00000806 	br	a724 <alt_load_section+0x48>
    {
      *to++ = *from++;
    a704:	e0bffe17 	ldw	r2,-8(fp)
    a708:	10c00104 	addi	r3,r2,4
    a70c:	e0fffe15 	stw	r3,-8(fp)
    a710:	e0fffd17 	ldw	r3,-12(fp)
    a714:	19000104 	addi	r4,r3,4
    a718:	e13ffd15 	stw	r4,-12(fp)
    a71c:	18c00017 	ldw	r3,0(r3)
    a720:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a724:	e0fffe17 	ldw	r3,-8(fp)
    a728:	e0bfff17 	ldw	r2,-4(fp)
    a72c:	18bff51e 	bne	r3,r2,a704 <__alt_mem_epcs_flash_controller+0xfe001704>
    {
      *to++ = *from++;
    }
  }
}
    a730:	0001883a 	nop
    a734:	e037883a 	mov	sp,fp
    a738:	df000017 	ldw	fp,0(sp)
    a73c:	dec00104 	addi	sp,sp,4
    a740:	f800283a 	ret

0000a744 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a744:	defffe04 	addi	sp,sp,-8
    a748:	dfc00115 	stw	ra,4(sp)
    a74c:	df000015 	stw	fp,0(sp)
    a750:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a754:	01800074 	movhi	r6,1
    a758:	319ffb04 	addi	r6,r6,32748
    a75c:	01400074 	movhi	r5,1
    a760:	295aff04 	addi	r5,r5,27644
    a764:	01000074 	movhi	r4,1
    a768:	211ffb04 	addi	r4,r4,32748
    a76c:	000a6dc0 	call	a6dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a770:	01800034 	movhi	r6,0
    a774:	31808c04 	addi	r6,r6,560
    a778:	01400034 	movhi	r5,0
    a77c:	29400804 	addi	r5,r5,32
    a780:	01000034 	movhi	r4,0
    a784:	21000804 	addi	r4,r4,32
    a788:	000a6dc0 	call	a6dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a78c:	01800074 	movhi	r6,1
    a790:	319aff04 	addi	r6,r6,27644
    a794:	01400074 	movhi	r5,1
    a798:	2978a904 	addi	r5,r5,-7516
    a79c:	01000074 	movhi	r4,1
    a7a0:	2138a904 	addi	r4,r4,-7516
    a7a4:	000a6dc0 	call	a6dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a7a8:	000ca780 	call	ca78 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a7ac:	000cd200 	call	cd20 <alt_icache_flush_all>
}
    a7b0:	0001883a 	nop
    a7b4:	e037883a 	mov	sp,fp
    a7b8:	dfc00117 	ldw	ra,4(sp)
    a7bc:	df000017 	ldw	fp,0(sp)
    a7c0:	dec00204 	addi	sp,sp,8
    a7c4:	f800283a 	ret

0000a7c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a7c8:	defffd04 	addi	sp,sp,-12
    a7cc:	dfc00215 	stw	ra,8(sp)
    a7d0:	df000115 	stw	fp,4(sp)
    a7d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a7d8:	0009883a 	mov	r4,zero
    a7dc:	000ac080 	call	ac08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    a7e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a7e4:	000ac400 	call	ac40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a7e8:	01800074 	movhi	r6,1
    a7ec:	319aad04 	addi	r6,r6,27316
    a7f0:	01400074 	movhi	r5,1
    a7f4:	295aad04 	addi	r5,r5,27316
    a7f8:	01000074 	movhi	r4,1
    a7fc:	211aad04 	addi	r4,r4,27316
    a800:	000d0c40 	call	d0c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a804:	000cba40 	call	cba4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a808:	01000074 	movhi	r4,1
    a80c:	21330104 	addi	r4,r4,-13308
    a810:	000d9600 	call	d960 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a814:	d0a51617 	ldw	r2,-27560(gp)
    a818:	d0e51717 	ldw	r3,-27556(gp)
    a81c:	d1251817 	ldw	r4,-27552(gp)
    a820:	200d883a 	mov	r6,r4
    a824:	180b883a 	mov	r5,r3
    a828:	1009883a 	mov	r4,r2
    a82c:	00094180 	call	9418 <main>
    a830:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a834:	01000044 	movi	r4,1
    a838:	000c9a00 	call	c9a0 <close>
  exit (result);
    a83c:	e13fff17 	ldw	r4,-4(fp)
    a840:	000d9740 	call	d974 <exit>

0000a844 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a844:	defff904 	addi	sp,sp,-28
    a848:	df000615 	stw	fp,24(sp)
    a84c:	df000604 	addi	fp,sp,24
    a850:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a854:	0005303a 	rdctl	r2,status
    a858:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a85c:	e0fffe17 	ldw	r3,-8(fp)
    a860:	00bfff84 	movi	r2,-2
    a864:	1884703a 	and	r2,r3,r2
    a868:	1001703a 	wrctl	status,r2
  
  return context;
    a86c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a870:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a874:	d0a00317 	ldw	r2,-32756(gp)
    a878:	10c000c4 	addi	r3,r2,3
    a87c:	00bfff04 	movi	r2,-4
    a880:	1884703a 	and	r2,r3,r2
    a884:	d0a00315 	stw	r2,-32756(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a888:	d0e00317 	ldw	r3,-32756(gp)
    a88c:	e0bfff17 	ldw	r2,-4(fp)
    a890:	1887883a 	add	r3,r3,r2
    a894:	00808034 	movhi	r2,512
    a898:	10800004 	addi	r2,r2,0
    a89c:	10c0062e 	bgeu	r2,r3,a8b8 <sbrk+0x74>
    a8a0:	e0bffb17 	ldw	r2,-20(fp)
    a8a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8a8:	e0bffa17 	ldw	r2,-24(fp)
    a8ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a8b0:	00bfffc4 	movi	r2,-1
    a8b4:	00000b06 	br	a8e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    a8b8:	d0a00317 	ldw	r2,-32756(gp)
    a8bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    a8c0:	d0e00317 	ldw	r3,-32756(gp)
    a8c4:	e0bfff17 	ldw	r2,-4(fp)
    a8c8:	1885883a 	add	r2,r3,r2
    a8cc:	d0a00315 	stw	r2,-32756(gp)
    a8d0:	e0bffb17 	ldw	r2,-20(fp)
    a8d4:	e0bffc15 	stw	r2,-16(fp)
    a8d8:	e0bffc17 	ldw	r2,-16(fp)
    a8dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a8e0:	e0bffd17 	ldw	r2,-12(fp)
} 
    a8e4:	e037883a 	mov	sp,fp
    a8e8:	df000017 	ldw	fp,0(sp)
    a8ec:	dec00104 	addi	sp,sp,4
    a8f0:	f800283a 	ret

0000a8f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a8f4:	defffa04 	addi	sp,sp,-24
    a8f8:	df000515 	stw	fp,20(sp)
    a8fc:	df000504 	addi	fp,sp,20
    a900:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a904:	0005303a 	rdctl	r2,status
    a908:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a90c:	e0fffc17 	ldw	r3,-16(fp)
    a910:	00bfff84 	movi	r2,-2
    a914:	1884703a 	and	r2,r3,r2
    a918:	1001703a 	wrctl	status,r2
  
  return context;
    a91c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a920:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a924:	e0bfff17 	ldw	r2,-4(fp)
    a928:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a92c:	e0bffd17 	ldw	r2,-12(fp)
    a930:	10800017 	ldw	r2,0(r2)
    a934:	e0fffd17 	ldw	r3,-12(fp)
    a938:	18c00117 	ldw	r3,4(r3)
    a93c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a940:	e0bffd17 	ldw	r2,-12(fp)
    a944:	10800117 	ldw	r2,4(r2)
    a948:	e0fffd17 	ldw	r3,-12(fp)
    a94c:	18c00017 	ldw	r3,0(r3)
    a950:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a954:	e0bffd17 	ldw	r2,-12(fp)
    a958:	e0fffd17 	ldw	r3,-12(fp)
    a95c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a960:	e0bffd17 	ldw	r2,-12(fp)
    a964:	e0fffd17 	ldw	r3,-12(fp)
    a968:	10c00015 	stw	r3,0(r2)
    a96c:	e0bffb17 	ldw	r2,-20(fp)
    a970:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a974:	e0bffe17 	ldw	r2,-8(fp)
    a978:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a97c:	0001883a 	nop
    a980:	e037883a 	mov	sp,fp
    a984:	df000017 	ldw	fp,0(sp)
    a988:	dec00104 	addi	sp,sp,4
    a98c:	f800283a 	ret

0000a990 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a990:	defffb04 	addi	sp,sp,-20
    a994:	dfc00415 	stw	ra,16(sp)
    a998:	df000315 	stw	fp,12(sp)
    a99c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a9a0:	d0a00417 	ldw	r2,-32752(gp)
    a9a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a9a8:	d0a51a17 	ldw	r2,-27544(gp)
    a9ac:	10800044 	addi	r2,r2,1
    a9b0:	d0a51a15 	stw	r2,-27544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a9b4:	00002e06 	br	aa70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a9b8:	e0bffd17 	ldw	r2,-12(fp)
    a9bc:	10800017 	ldw	r2,0(r2)
    a9c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a9c4:	e0bffd17 	ldw	r2,-12(fp)
    a9c8:	10800403 	ldbu	r2,16(r2)
    a9cc:	10803fcc 	andi	r2,r2,255
    a9d0:	10000426 	beq	r2,zero,a9e4 <alt_tick+0x54>
    a9d4:	d0a51a17 	ldw	r2,-27544(gp)
    a9d8:	1000021e 	bne	r2,zero,a9e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a9dc:	e0bffd17 	ldw	r2,-12(fp)
    a9e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a9e4:	e0bffd17 	ldw	r2,-12(fp)
    a9e8:	10800217 	ldw	r2,8(r2)
    a9ec:	d0e51a17 	ldw	r3,-27544(gp)
    a9f0:	18801d36 	bltu	r3,r2,aa68 <alt_tick+0xd8>
    a9f4:	e0bffd17 	ldw	r2,-12(fp)
    a9f8:	10800403 	ldbu	r2,16(r2)
    a9fc:	10803fcc 	andi	r2,r2,255
    aa00:	1000191e 	bne	r2,zero,aa68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    aa04:	e0bffd17 	ldw	r2,-12(fp)
    aa08:	10800317 	ldw	r2,12(r2)
    aa0c:	e0fffd17 	ldw	r3,-12(fp)
    aa10:	18c00517 	ldw	r3,20(r3)
    aa14:	1809883a 	mov	r4,r3
    aa18:	103ee83a 	callr	r2
    aa1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    aa20:	e0bfff17 	ldw	r2,-4(fp)
    aa24:	1000031e 	bne	r2,zero,aa34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    aa28:	e13ffd17 	ldw	r4,-12(fp)
    aa2c:	000a8f40 	call	a8f4 <alt_alarm_stop>
    aa30:	00000d06 	br	aa68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    aa34:	e0bffd17 	ldw	r2,-12(fp)
    aa38:	10c00217 	ldw	r3,8(r2)
    aa3c:	e0bfff17 	ldw	r2,-4(fp)
    aa40:	1887883a 	add	r3,r3,r2
    aa44:	e0bffd17 	ldw	r2,-12(fp)
    aa48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    aa4c:	e0bffd17 	ldw	r2,-12(fp)
    aa50:	10c00217 	ldw	r3,8(r2)
    aa54:	d0a51a17 	ldw	r2,-27544(gp)
    aa58:	1880032e 	bgeu	r3,r2,aa68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    aa5c:	e0bffd17 	ldw	r2,-12(fp)
    aa60:	00c00044 	movi	r3,1
    aa64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    aa68:	e0bffe17 	ldw	r2,-8(fp)
    aa6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    aa70:	e0fffd17 	ldw	r3,-12(fp)
    aa74:	d0a00404 	addi	r2,gp,-32752
    aa78:	18bfcf1e 	bne	r3,r2,a9b8 <__alt_mem_epcs_flash_controller+0xfe0019b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    aa7c:	0001883a 	nop
}
    aa80:	0001883a 	nop
    aa84:	e037883a 	mov	sp,fp
    aa88:	dfc00117 	ldw	ra,4(sp)
    aa8c:	df000017 	ldw	fp,0(sp)
    aa90:	dec00204 	addi	sp,sp,8
    aa94:	f800283a 	ret

0000aa98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aa98:	defffe04 	addi	sp,sp,-8
    aa9c:	dfc00115 	stw	ra,4(sp)
    aaa0:	df000015 	stw	fp,0(sp)
    aaa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aaa8:	d0a00b17 	ldw	r2,-32724(gp)
    aaac:	10000326 	beq	r2,zero,aabc <alt_get_errno+0x24>
    aab0:	d0a00b17 	ldw	r2,-32724(gp)
    aab4:	103ee83a 	callr	r2
    aab8:	00000106 	br	aac0 <alt_get_errno+0x28>
    aabc:	d0a51104 	addi	r2,gp,-27580
}
    aac0:	e037883a 	mov	sp,fp
    aac4:	dfc00117 	ldw	ra,4(sp)
    aac8:	df000017 	ldw	fp,0(sp)
    aacc:	dec00204 	addi	sp,sp,8
    aad0:	f800283a 	ret

0000aad4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    aad4:	defff904 	addi	sp,sp,-28
    aad8:	dfc00615 	stw	ra,24(sp)
    aadc:	df000515 	stw	fp,20(sp)
    aae0:	df000504 	addi	fp,sp,20
    aae4:	e13ffd15 	stw	r4,-12(fp)
    aae8:	e17ffe15 	stw	r5,-8(fp)
    aaec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aaf0:	e0bffd17 	ldw	r2,-12(fp)
    aaf4:	10000816 	blt	r2,zero,ab18 <write+0x44>
    aaf8:	01400304 	movi	r5,12
    aafc:	e13ffd17 	ldw	r4,-12(fp)
    ab00:	000958c0 	call	958c <__mulsi3>
    ab04:	1007883a 	mov	r3,r2
    ab08:	00800074 	movhi	r2,1
    ab0c:	109f8c04 	addi	r2,r2,32304
    ab10:	1885883a 	add	r2,r3,r2
    ab14:	00000106 	br	ab1c <write+0x48>
    ab18:	0005883a 	mov	r2,zero
    ab1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ab20:	e0bffb17 	ldw	r2,-20(fp)
    ab24:	10002126 	beq	r2,zero,abac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ab28:	e0bffb17 	ldw	r2,-20(fp)
    ab2c:	10800217 	ldw	r2,8(r2)
    ab30:	108000cc 	andi	r2,r2,3
    ab34:	10001826 	beq	r2,zero,ab98 <write+0xc4>
    ab38:	e0bffb17 	ldw	r2,-20(fp)
    ab3c:	10800017 	ldw	r2,0(r2)
    ab40:	10800617 	ldw	r2,24(r2)
    ab44:	10001426 	beq	r2,zero,ab98 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ab48:	e0bffb17 	ldw	r2,-20(fp)
    ab4c:	10800017 	ldw	r2,0(r2)
    ab50:	10800617 	ldw	r2,24(r2)
    ab54:	e0ffff17 	ldw	r3,-4(fp)
    ab58:	180d883a 	mov	r6,r3
    ab5c:	e17ffe17 	ldw	r5,-8(fp)
    ab60:	e13ffb17 	ldw	r4,-20(fp)
    ab64:	103ee83a 	callr	r2
    ab68:	e0bffc15 	stw	r2,-16(fp)
    ab6c:	e0bffc17 	ldw	r2,-16(fp)
    ab70:	1000070e 	bge	r2,zero,ab90 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    ab74:	000aa980 	call	aa98 <alt_get_errno>
    ab78:	1007883a 	mov	r3,r2
    ab7c:	e0bffc17 	ldw	r2,-16(fp)
    ab80:	0085c83a 	sub	r2,zero,r2
    ab84:	18800015 	stw	r2,0(r3)
        return -1;
    ab88:	00bfffc4 	movi	r2,-1
    ab8c:	00000c06 	br	abc0 <write+0xec>
      }
      return rval;
    ab90:	e0bffc17 	ldw	r2,-16(fp)
    ab94:	00000a06 	br	abc0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ab98:	000aa980 	call	aa98 <alt_get_errno>
    ab9c:	1007883a 	mov	r3,r2
    aba0:	00800344 	movi	r2,13
    aba4:	18800015 	stw	r2,0(r3)
    aba8:	00000406 	br	abbc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    abac:	000aa980 	call	aa98 <alt_get_errno>
    abb0:	1007883a 	mov	r3,r2
    abb4:	00801444 	movi	r2,81
    abb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    abbc:	00bfffc4 	movi	r2,-1
}
    abc0:	e037883a 	mov	sp,fp
    abc4:	dfc00117 	ldw	ra,4(sp)
    abc8:	df000017 	ldw	fp,0(sp)
    abcc:	dec00204 	addi	sp,sp,8
    abd0:	f800283a 	ret

0000abd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    abd4:	defffd04 	addi	sp,sp,-12
    abd8:	dfc00215 	stw	ra,8(sp)
    abdc:	df000115 	stw	fp,4(sp)
    abe0:	df000104 	addi	fp,sp,4
    abe4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    abe8:	d1600804 	addi	r5,gp,-32736
    abec:	e13fff17 	ldw	r4,-4(fp)
    abf0:	000cb000 	call	cb00 <alt_dev_llist_insert>
}
    abf4:	e037883a 	mov	sp,fp
    abf8:	dfc00117 	ldw	ra,4(sp)
    abfc:	df000017 	ldw	fp,0(sp)
    ac00:	dec00204 	addi	sp,sp,8
    ac04:	f800283a 	ret

0000ac08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ac08:	defffd04 	addi	sp,sp,-12
    ac0c:	dfc00215 	stw	ra,8(sp)
    ac10:	df000115 	stw	fp,4(sp)
    ac14:	df000104 	addi	fp,sp,4
    ac18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    ac1c:	000d4480 	call	d448 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ac20:	00800044 	movi	r2,1
    ac24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ac28:	0001883a 	nop
    ac2c:	e037883a 	mov	sp,fp
    ac30:	dfc00117 	ldw	ra,4(sp)
    ac34:	df000017 	ldw	fp,0(sp)
    ac38:	dec00204 	addi	sp,sp,8
    ac3c:	f800283a 	ret

0000ac40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ac40:	defffe04 	addi	sp,sp,-8
    ac44:	dfc00115 	stw	ra,4(sp)
    ac48:	df000015 	stw	fp,0(sp)
    ac4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
    ac50:	01000074 	movhi	r4,1
    ac54:	211b3704 	addi	r4,r4,27868
    ac58:	000accc0 	call	accc <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ac5c:	01800044 	movi	r6,1
    ac60:	000b883a 	mov	r5,zero
    ac64:	01000074 	movhi	r4,1
    ac68:	211b7404 	addi	r4,r4,28112
    ac6c:	000b8f80 	call	b8f8 <altera_avalon_jtag_uart_init>
    ac70:	01000074 	movhi	r4,1
    ac74:	211b6a04 	addi	r4,r4,28072
    ac78:	000abd40 	call	abd4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ac7c:	0001883a 	nop
}
    ac80:	0001883a 	nop
    ac84:	e037883a 	mov	sp,fp
    ac88:	dfc00117 	ldw	ra,4(sp)
    ac8c:	df000017 	ldw	fp,0(sp)
    ac90:	dec00204 	addi	sp,sp,8
    ac94:	f800283a 	ret

0000ac98 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    ac98:	defffd04 	addi	sp,sp,-12
    ac9c:	dfc00215 	stw	ra,8(sp)
    aca0:	df000115 	stw	fp,4(sp)
    aca4:	df000104 	addi	fp,sp,4
    aca8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    acac:	d1600c04 	addi	r5,gp,-32720
    acb0:	e13fff17 	ldw	r4,-4(fp)
    acb4:	000cb000 	call	cb00 <alt_dev_llist_insert>
}
    acb8:	e037883a 	mov	sp,fp
    acbc:	dfc00117 	ldw	ra,4(sp)
    acc0:	df000017 	ldw	fp,0(sp)
    acc4:	dec00204 	addi	sp,sp,8
    acc8:	f800283a 	ret

0000accc <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    accc:	defffc04 	addi	sp,sp,-16
    acd0:	dfc00315 	stw	ra,12(sp)
    acd4:	df000215 	stw	fp,8(sp)
    acd8:	df000204 	addi	fp,sp,8
    acdc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    ace0:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    ace4:	e13fff17 	ldw	r4,-4(fp)
    ace8:	000ad200 	call	ad20 <alt_epcs_flash_query>
    acec:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    acf0:	e0bffe17 	ldw	r2,-8(fp)
    acf4:	1000041e 	bne	r2,zero,ad08 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    acf8:	e0bfff17 	ldw	r2,-4(fp)
    acfc:	1009883a 	mov	r4,r2
    ad00:	000ac980 	call	ac98 <alt_flash_device_register>
    ad04:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    ad08:	e0bffe17 	ldw	r2,-8(fp)
}
    ad0c:	e037883a 	mov	sp,fp
    ad10:	dfc00117 	ldw	ra,4(sp)
    ad14:	df000017 	ldw	fp,0(sp)
    ad18:	dec00204 	addi	sp,sp,8
    ad1c:	f800283a 	ret

0000ad20 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    ad20:	defffc04 	addi	sp,sp,-16
    ad24:	dfc00315 	stw	ra,12(sp)
    ad28:	df000215 	stw	fp,8(sp)
    ad2c:	df000204 	addi	fp,sp,8
    ad30:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    ad34:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    ad38:	e0bfff17 	ldw	r2,-4(fp)
    ad3c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    ad40:	e0bfff17 	ldw	r2,-4(fp)
    ad44:	10802e17 	ldw	r2,184(r2)
    ad48:	1009883a 	mov	r4,r2
    ad4c:	000c6980 	call	c698 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    ad50:	10c03fcc 	andi	r3,r2,255
    ad54:	e0bfff17 	ldw	r2,-4(fp)
    ad58:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    ad5c:	e0bfff17 	ldw	r2,-4(fp)
    ad60:	10803017 	ldw	r2,192(r2)
    ad64:	10800598 	cmpnei	r2,r2,22
    ad68:	10000a1e 	bne	r2,zero,ad94 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    ad6c:	e0bfff17 	ldw	r2,-4(fp)
    ad70:	00c02034 	movhi	r3,128
    ad74:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    ad78:	e0bfff17 	ldw	r2,-4(fp)
    ad7c:	00c02004 	movi	r3,128
    ad80:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    ad84:	e0bfff17 	ldw	r2,-4(fp)
    ad88:	00c00074 	movhi	r3,1
    ad8c:	10c01015 	stw	r3,64(r2)
    ad90:	0000ce06 	br	b0cc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    ad94:	e0bfff17 	ldw	r2,-4(fp)
    ad98:	10803017 	ldw	r2,192(r2)
    ad9c:	10800518 	cmpnei	r2,r2,20
    ada0:	10000a1e 	bne	r2,zero,adcc <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    ada4:	e0bfff17 	ldw	r2,-4(fp)
    ada8:	00c00834 	movhi	r3,32
    adac:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    adb0:	e0bfff17 	ldw	r2,-4(fp)
    adb4:	00c00804 	movi	r3,32
    adb8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    adbc:	e0bfff17 	ldw	r2,-4(fp)
    adc0:	00c00074 	movhi	r3,1
    adc4:	10c01015 	stw	r3,64(r2)
    adc8:	0000c006 	br	b0cc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    adcc:	e0bfff17 	ldw	r2,-4(fp)
    add0:	10803017 	ldw	r2,192(r2)
    add4:	108004d8 	cmpnei	r2,r2,19
    add8:	10000a1e 	bne	r2,zero,ae04 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    addc:	e0bfff17 	ldw	r2,-4(fp)
    ade0:	00c00434 	movhi	r3,16
    ade4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    ade8:	e0bfff17 	ldw	r2,-4(fp)
    adec:	00c00404 	movi	r3,16
    adf0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    adf4:	e0bfff17 	ldw	r2,-4(fp)
    adf8:	00c00074 	movhi	r3,1
    adfc:	10c01015 	stw	r3,64(r2)
    ae00:	0000b206 	br	b0cc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    ae04:	e0bfff17 	ldw	r2,-4(fp)
    ae08:	10803017 	ldw	r2,192(r2)
    ae0c:	10800498 	cmpnei	r2,r2,18
    ae10:	10000a1e 	bne	r2,zero,ae3c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    ae14:	e0bfff17 	ldw	r2,-4(fp)
    ae18:	00c00234 	movhi	r3,8
    ae1c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    ae20:	e0bfff17 	ldw	r2,-4(fp)
    ae24:	00c00204 	movi	r3,8
    ae28:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    ae2c:	e0bfff17 	ldw	r2,-4(fp)
    ae30:	00c00074 	movhi	r3,1
    ae34:	10c01015 	stw	r3,64(r2)
    ae38:	0000a406 	br	b0cc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    ae3c:	e0bfff17 	ldw	r2,-4(fp)
    ae40:	10803017 	ldw	r2,192(r2)
    ae44:	10800418 	cmpnei	r2,r2,16
    ae48:	10000a1e 	bne	r2,zero,ae74 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    ae4c:	e0bfff17 	ldw	r2,-4(fp)
    ae50:	00c000b4 	movhi	r3,2
    ae54:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    ae58:	e0bfff17 	ldw	r2,-4(fp)
    ae5c:	00c00104 	movi	r3,4
    ae60:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    ae64:	e0bfff17 	ldw	r2,-4(fp)
    ae68:	00e00014 	movui	r3,32768
    ae6c:	10c01015 	stw	r3,64(r2)
    ae70:	00009606 	br	b0cc <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    ae74:	e0bfff17 	ldw	r2,-4(fp)
    ae78:	10802e17 	ldw	r2,184(r2)
    ae7c:	1009883a 	mov	r4,r2
    ae80:	000c7000 	call	c700 <epcs_read_device_id>
    ae84:	1007883a 	mov	r3,r2
    ae88:	e0bfff17 	ldw	r2,-4(fp)
    ae8c:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    ae90:	e0bfff17 	ldw	r2,-4(fp)
    ae94:	10c03017 	ldw	r3,192(r2)
    ae98:	00804034 	movhi	r2,256
    ae9c:	10bfffc4 	addi	r2,r2,-1
    aea0:	1886703a 	and	r3,r3,r2
    aea4:	00800874 	movhi	r2,33
    aea8:	10ae8544 	addi	r2,r2,-17899
    aeac:	18800a1e 	bne	r3,r2,aed8 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    aeb0:	e0bfff17 	ldw	r2,-4(fp)
    aeb4:	00c00834 	movhi	r3,32
    aeb8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    aebc:	e0bfff17 	ldw	r2,-4(fp)
    aec0:	00c00804 	movi	r3,32
    aec4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    aec8:	e0bfff17 	ldw	r2,-4(fp)
    aecc:	00c00074 	movhi	r3,1
    aed0:	10c01015 	stw	r3,64(r2)
    aed4:	00007d06 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    aed8:	e0bfff17 	ldw	r2,-4(fp)
    aedc:	10c03017 	ldw	r3,192(r2)
    aee0:	00804034 	movhi	r2,256
    aee4:	10bfffc4 	addi	r2,r2,-1
    aee8:	1886703a 	and	r3,r3,r2
    aeec:	00800874 	movhi	r2,33
    aef0:	10ae8584 	addi	r2,r2,-17898
    aef4:	18800a1e 	bne	r3,r2,af20 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    aef8:	e0bfff17 	ldw	r2,-4(fp)
    aefc:	00c01034 	movhi	r3,64
    af00:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    af04:	e0bfff17 	ldw	r2,-4(fp)
    af08:	00c01004 	movi	r3,64
    af0c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    af10:	e0bfff17 	ldw	r2,-4(fp)
    af14:	00c00074 	movhi	r3,1
    af18:	10c01015 	stw	r3,64(r2)
    af1c:	00006b06 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    af20:	e0bfff17 	ldw	r2,-4(fp)
    af24:	10c03017 	ldw	r3,192(r2)
    af28:	00804034 	movhi	r2,256
    af2c:	10bfffc4 	addi	r2,r2,-1
    af30:	1886703a 	and	r3,r3,r2
    af34:	00800874 	movhi	r2,33
    af38:	10ae85c4 	addi	r2,r2,-17897
    af3c:	18800a1e 	bne	r3,r2,af68 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    af40:	e0bfff17 	ldw	r2,-4(fp)
    af44:	00c02034 	movhi	r3,128
    af48:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    af4c:	e0bfff17 	ldw	r2,-4(fp)
    af50:	00c02004 	movi	r3,128
    af54:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    af58:	e0bfff17 	ldw	r2,-4(fp)
    af5c:	00c00074 	movhi	r3,1
    af60:	10c01015 	stw	r3,64(r2)
    af64:	00005906 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	10c03017 	ldw	r3,192(r2)
    af70:	00804034 	movhi	r2,256
    af74:	10bfffc4 	addi	r2,r2,-1
    af78:	1886703a 	and	r3,r3,r2
    af7c:	00800874 	movhi	r2,33
    af80:	10ae8604 	addi	r2,r2,-17896
    af84:	18800a1e 	bne	r3,r2,afb0 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    af88:	e0bfff17 	ldw	r2,-4(fp)
    af8c:	00c04034 	movhi	r3,256
    af90:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    af94:	e0bfff17 	ldw	r2,-4(fp)
    af98:	00c04004 	movi	r3,256
    af9c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    afa0:	e0bfff17 	ldw	r2,-4(fp)
    afa4:	00c00074 	movhi	r3,1
    afa8:	10c01015 	stw	r3,64(r2)
    afac:	00004706 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    afb0:	e0bfff17 	ldw	r2,-4(fp)
    afb4:	10803017 	ldw	r2,192(r2)
    afb8:	10803fcc 	andi	r2,r2,255
    afbc:	10800618 	cmpnei	r2,r2,24
    afc0:	10000a1e 	bne	r2,zero,afec <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    afc4:	e0bfff17 	ldw	r2,-4(fp)
    afc8:	00c04034 	movhi	r3,256
    afcc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    afd0:	e0bfff17 	ldw	r2,-4(fp)
    afd4:	00c01004 	movi	r3,64
    afd8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    afdc:	e0bfff17 	ldw	r2,-4(fp)
    afe0:	00c00134 	movhi	r3,4
    afe4:	10c01015 	stw	r3,64(r2)
    afe8:	00003806 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    afec:	e0bfff17 	ldw	r2,-4(fp)
    aff0:	10803017 	ldw	r2,192(r2)
    aff4:	10803fcc 	andi	r2,r2,255
    aff8:	10800658 	cmpnei	r2,r2,25
    affc:	10000d1e 	bne	r2,zero,b034 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    b000:	e0bfff17 	ldw	r2,-4(fp)
    b004:	00c08034 	movhi	r3,512
    b008:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    b00c:	e0bfff17 	ldw	r2,-4(fp)
    b010:	00c08004 	movi	r3,512
    b014:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    b018:	e0bfff17 	ldw	r2,-4(fp)
    b01c:	00c00074 	movhi	r3,1
    b020:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    b024:	e0bfff17 	ldw	r2,-4(fp)
    b028:	00c00044 	movi	r3,1
    b02c:	10c03215 	stw	r3,200(r2)
    b030:	00002606 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    b034:	e0bfff17 	ldw	r2,-4(fp)
    b038:	10803017 	ldw	r2,192(r2)
    b03c:	10803fcc 	andi	r2,r2,255
    b040:	10800818 	cmpnei	r2,r2,32
    b044:	10000d1e 	bne	r2,zero,b07c <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    b048:	e0bfff17 	ldw	r2,-4(fp)
    b04c:	00c10034 	movhi	r3,1024
    b050:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    b054:	e0bfff17 	ldw	r2,-4(fp)
    b058:	00c10004 	movi	r3,1024
    b05c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    b060:	e0bfff17 	ldw	r2,-4(fp)
    b064:	00c00074 	movhi	r3,1
    b068:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    b06c:	e0bfff17 	ldw	r2,-4(fp)
    b070:	00c00044 	movi	r3,1
    b074:	10c03215 	stw	r3,200(r2)
    b078:	00001406 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    b07c:	e0bfff17 	ldw	r2,-4(fp)
    b080:	10803017 	ldw	r2,192(r2)
    b084:	10803fcc 	andi	r2,r2,255
    b088:	10800858 	cmpnei	r2,r2,33
    b08c:	10000d1e 	bne	r2,zero,b0c4 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    b090:	e0bfff17 	ldw	r2,-4(fp)
    b094:	00c20034 	movhi	r3,2048
    b098:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    b09c:	e0bfff17 	ldw	r2,-4(fp)
    b0a0:	00c20004 	movi	r3,2048
    b0a4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    b0a8:	e0bfff17 	ldw	r2,-4(fp)
    b0ac:	00c00074 	movhi	r3,1
    b0b0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    b0b4:	e0bfff17 	ldw	r2,-4(fp)
    b0b8:	00c00044 	movi	r3,1
    b0bc:	10c03215 	stw	r3,200(r2)
    b0c0:	00000206 	br	b0cc <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    b0c4:	00bffb44 	movi	r2,-19
    b0c8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    b0cc:	e0bfff17 	ldw	r2,-4(fp)
    b0d0:	10800e17 	ldw	r2,56(r2)
    b0d4:	1007883a 	mov	r3,r2
    b0d8:	e0bfff17 	ldw	r2,-4(fp)
    b0dc:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    b0e0:	e0bfff17 	ldw	r2,-4(fp)
    b0e4:	00c00044 	movi	r3,1
    b0e8:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    b0ec:	e0bfff17 	ldw	r2,-4(fp)
    b0f0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    b0f4:	e0bfff17 	ldw	r2,-4(fp)
    b0f8:	00c04004 	movi	r3,256
    b0fc:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    b100:	e0bffe17 	ldw	r2,-8(fp)
}
    b104:	e037883a 	mov	sp,fp
    b108:	dfc00117 	ldw	ra,4(sp)
    b10c:	df000017 	ldw	fp,0(sp)
    b110:	dec00204 	addi	sp,sp,8
    b114:	f800283a 	ret

0000b118 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    b118:	deffee04 	addi	sp,sp,-72
    b11c:	dfc01115 	stw	ra,68(sp)
    b120:	df001015 	stw	fp,64(sp)
    b124:	df001004 	addi	fp,sp,64
    b128:	e13ffc15 	stw	r4,-16(fp)
    b12c:	e17ffd15 	stw	r5,-12(fp)
    b130:	e1bffe15 	stw	r6,-8(fp)
    b134:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    b138:	00800804 	movi	r2,32
    b13c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    b140:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    b144:	00002706 	br	b1e4 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    b148:	e0fff117 	ldw	r3,-60(fp)
    b14c:	e0bfff17 	ldw	r2,-4(fp)
    b150:	1880012e 	bgeu	r3,r2,b158 <alt_epcs_flash_memcmp+0x40>
    b154:	1805883a 	mov	r2,r3
    b158:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    b15c:	e0fffe17 	ldw	r3,-8(fp)
    b160:	e0bff017 	ldw	r2,-64(fp)
    b164:	1885883a 	add	r2,r3,r2
    b168:	e0fff404 	addi	r3,fp,-48
    b16c:	e1fff217 	ldw	r7,-56(fp)
    b170:	180d883a 	mov	r6,r3
    b174:	100b883a 	mov	r5,r2
    b178:	e13ffc17 	ldw	r4,-16(fp)
    b17c:	000b6fc0 	call	b6fc <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    b180:	1000020e 	bge	r2,zero,b18c <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    b184:	00bfffc4 	movi	r2,-1
    b188:	00001906 	br	b1f0 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    b18c:	e0bff017 	ldw	r2,-64(fp)
    b190:	e0fffd17 	ldw	r3,-12(fp)
    b194:	1885883a 	add	r2,r3,r2
    b198:	e13ff217 	ldw	r4,-56(fp)
    b19c:	e0fff404 	addi	r3,fp,-48
    b1a0:	200d883a 	mov	r6,r4
    b1a4:	180b883a 	mov	r5,r3
    b1a8:	1009883a 	mov	r4,r2
    b1ac:	000d9940 	call	d994 <memcmp>
    b1b0:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    b1b4:	e0bff317 	ldw	r2,-52(fp)
    b1b8:	10000226 	beq	r2,zero,b1c4 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
    b1bc:	e0bff317 	ldw	r2,-52(fp)
    b1c0:	00000b06 	br	b1f0 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
    b1c4:	e0bff217 	ldw	r2,-56(fp)
    b1c8:	e0ffff17 	ldw	r3,-4(fp)
    b1cc:	1885c83a 	sub	r2,r3,r2
    b1d0:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    b1d4:	e0fff017 	ldw	r3,-64(fp)
    b1d8:	e0bff217 	ldw	r2,-56(fp)
    b1dc:	1885883a 	add	r2,r3,r2
    b1e0:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    b1e4:	e0bfff17 	ldw	r2,-4(fp)
    b1e8:	103fd71e 	bne	r2,zero,b148 <__alt_mem_epcs_flash_controller+0xfe002148>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    b1ec:	0005883a 	mov	r2,zero
}
    b1f0:	e037883a 	mov	sp,fp
    b1f4:	dfc00117 	ldw	ra,4(sp)
    b1f8:	df000017 	ldw	fp,0(sp)
    b1fc:	dec00204 	addi	sp,sp,8
    b200:	f800283a 	ret

0000b204 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    b204:	defff404 	addi	sp,sp,-48
    b208:	dfc00b15 	stw	ra,44(sp)
    b20c:	df000a15 	stw	fp,40(sp)
    b210:	df000a04 	addi	fp,sp,40
    b214:	e13ffc15 	stw	r4,-16(fp)
    b218:	e17ffd15 	stw	r5,-12(fp)
    b21c:	e1bffe15 	stw	r6,-8(fp)
    b220:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    b224:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    b228:	e03ff815 	stw	zero,-32(fp)
    b22c:	00008306 	br	b43c <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    b230:	e0fffc17 	ldw	r3,-16(fp)
    b234:	e0bff817 	ldw	r2,-32(fp)
    b238:	1004913a 	slli	r2,r2,4
    b23c:	1885883a 	add	r2,r3,r2
    b240:	10800d04 	addi	r2,r2,52
    b244:	10800017 	ldw	r2,0(r2)
    b248:	e0fffd17 	ldw	r3,-12(fp)
    b24c:	18807816 	blt	r3,r2,b430 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    b250:	e0fffc17 	ldw	r3,-16(fp)
    b254:	e0bff817 	ldw	r2,-32(fp)
    b258:	1004913a 	slli	r2,r2,4
    b25c:	1885883a 	add	r2,r3,r2
    b260:	10800d04 	addi	r2,r2,52
    b264:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    b268:	e13ffc17 	ldw	r4,-16(fp)
    b26c:	e0bff817 	ldw	r2,-32(fp)
    b270:	1004913a 	slli	r2,r2,4
    b274:	2085883a 	add	r2,r4,r2
    b278:	10800e04 	addi	r2,r2,56
    b27c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    b280:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    b284:	e0fffd17 	ldw	r3,-12(fp)
    b288:	1880690e 	bge	r3,r2,b430 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    b28c:	e0fffc17 	ldw	r3,-16(fp)
    b290:	e0bff817 	ldw	r2,-32(fp)
    b294:	1004913a 	slli	r2,r2,4
    b298:	1885883a 	add	r2,r3,r2
    b29c:	10800d04 	addi	r2,r2,52
    b2a0:	10800017 	ldw	r2,0(r2)
    b2a4:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    b2a8:	e03ff915 	stw	zero,-28(fp)
    b2ac:	00005806 	br	b410 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    b2b0:	e0fffd17 	ldw	r3,-12(fp)
    b2b4:	e0bffa17 	ldw	r2,-24(fp)
    b2b8:	18804916 	blt	r3,r2,b3e0 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    b2bc:	e0fffc17 	ldw	r3,-16(fp)
    b2c0:	e0bff817 	ldw	r2,-32(fp)
    b2c4:	10800104 	addi	r2,r2,4
    b2c8:	1004913a 	slli	r2,r2,4
    b2cc:	1885883a 	add	r2,r3,r2
    b2d0:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    b2d4:	e0bffa17 	ldw	r2,-24(fp)
    b2d8:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    b2dc:	e0fffd17 	ldw	r3,-12(fp)
    b2e0:	18803f0e 	bge	r3,r2,b3e0 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    b2e4:	e0fffc17 	ldw	r3,-16(fp)
    b2e8:	e0bff817 	ldw	r2,-32(fp)
    b2ec:	10800104 	addi	r2,r2,4
    b2f0:	1004913a 	slli	r2,r2,4
    b2f4:	1885883a 	add	r2,r3,r2
    b2f8:	10c00017 	ldw	r3,0(r2)
    b2fc:	e0bffa17 	ldw	r2,-24(fp)
    b300:	1887883a 	add	r3,r3,r2
    b304:	e0bffd17 	ldw	r2,-12(fp)
    b308:	1885c83a 	sub	r2,r3,r2
    b30c:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    b310:	e0fffb17 	ldw	r3,-20(fp)
    b314:	e0bfff17 	ldw	r2,-4(fp)
    b318:	1880010e 	bge	r3,r2,b320 <alt_epcs_flash_write+0x11c>
    b31c:	1805883a 	mov	r2,r3
    b320:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    b324:	e0bffb17 	ldw	r2,-20(fp)
    b328:	100f883a 	mov	r7,r2
    b32c:	e1bffd17 	ldw	r6,-12(fp)
    b330:	e17ffe17 	ldw	r5,-8(fp)
    b334:	e13ffc17 	ldw	r4,-16(fp)
    b338:	000b1180 	call	b118 <alt_epcs_flash_memcmp>
    b33c:	10001226 	beq	r2,zero,b388 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    b340:	e0bffc17 	ldw	r2,-16(fp)
    b344:	10800817 	ldw	r2,32(r2)
    b348:	e17ffa17 	ldw	r5,-24(fp)
    b34c:	e13ffc17 	ldw	r4,-16(fp)
    b350:	103ee83a 	callr	r2
    b354:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    b358:	e0bff717 	ldw	r2,-36(fp)
    b35c:	10000a1e 	bne	r2,zero,b388 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    b360:	e0bffc17 	ldw	r2,-16(fp)
    b364:	10800917 	ldw	r2,36(r2)
    b368:	e0fffb17 	ldw	r3,-20(fp)
    b36c:	d8c00015 	stw	r3,0(sp)
    b370:	e1fffe17 	ldw	r7,-8(fp)
    b374:	e1bffd17 	ldw	r6,-12(fp)
    b378:	e17ffa17 	ldw	r5,-24(fp)
    b37c:	e13ffc17 	ldw	r4,-16(fp)
    b380:	103ee83a 	callr	r2
    b384:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    b388:	e0ffff17 	ldw	r3,-4(fp)
    b38c:	e0bffb17 	ldw	r2,-20(fp)
    b390:	18802e26 	beq	r3,r2,b44c <alt_epcs_flash_write+0x248>
    b394:	e0bff717 	ldw	r2,-36(fp)
    b398:	10002c1e 	bne	r2,zero,b44c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    b39c:	e0ffff17 	ldw	r3,-4(fp)
    b3a0:	e0bffb17 	ldw	r2,-20(fp)
    b3a4:	1885c83a 	sub	r2,r3,r2
    b3a8:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    b3ac:	e0fffc17 	ldw	r3,-16(fp)
    b3b0:	e0bff817 	ldw	r2,-32(fp)
    b3b4:	10800104 	addi	r2,r2,4
    b3b8:	1004913a 	slli	r2,r2,4
    b3bc:	1885883a 	add	r2,r3,r2
    b3c0:	10c00017 	ldw	r3,0(r2)
    b3c4:	e0bffa17 	ldw	r2,-24(fp)
    b3c8:	1885883a 	add	r2,r3,r2
    b3cc:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    b3d0:	e0bffb17 	ldw	r2,-20(fp)
    b3d4:	e0fffe17 	ldw	r3,-8(fp)
    b3d8:	1885883a 	add	r2,r3,r2
    b3dc:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    b3e0:	e0fffc17 	ldw	r3,-16(fp)
    b3e4:	e0bff817 	ldw	r2,-32(fp)
    b3e8:	10800104 	addi	r2,r2,4
    b3ec:	1004913a 	slli	r2,r2,4
    b3f0:	1885883a 	add	r2,r3,r2
    b3f4:	10800017 	ldw	r2,0(r2)
    b3f8:	e0fffa17 	ldw	r3,-24(fp)
    b3fc:	1885883a 	add	r2,r3,r2
    b400:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    b404:	e0bff917 	ldw	r2,-28(fp)
    b408:	10800044 	addi	r2,r2,1
    b40c:	e0bff915 	stw	r2,-28(fp)
    b410:	e0fffc17 	ldw	r3,-16(fp)
    b414:	e0bff817 	ldw	r2,-32(fp)
    b418:	1004913a 	slli	r2,r2,4
    b41c:	1885883a 	add	r2,r3,r2
    b420:	10800f04 	addi	r2,r2,60
    b424:	10800017 	ldw	r2,0(r2)
    b428:	e0fff917 	ldw	r3,-28(fp)
    b42c:	18bfa016 	blt	r3,r2,b2b0 <__alt_mem_epcs_flash_controller+0xfe0022b0>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    b430:	e0bff817 	ldw	r2,-32(fp)
    b434:	10800044 	addi	r2,r2,1
    b438:	e0bff815 	stw	r2,-32(fp)
    b43c:	e0bffc17 	ldw	r2,-16(fp)
    b440:	10800c17 	ldw	r2,48(r2)
    b444:	e0fff817 	ldw	r3,-32(fp)
    b448:	18bf7916 	blt	r3,r2,b230 <__alt_mem_epcs_flash_controller+0xfe002230>
      }
    }
  }

finished:
  return ret_code;
    b44c:	e0bff717 	ldw	r2,-36(fp)
}
    b450:	e037883a 	mov	sp,fp
    b454:	dfc00117 	ldw	ra,4(sp)
    b458:	df000017 	ldw	fp,0(sp)
    b45c:	dec00204 	addi	sp,sp,8
    b460:	f800283a 	ret

0000b464 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    b464:	defffa04 	addi	sp,sp,-24
    b468:	df000515 	stw	fp,20(sp)
    b46c:	df000504 	addi	fp,sp,20
    b470:	e13ffd15 	stw	r4,-12(fp)
    b474:	e17ffe15 	stw	r5,-8(fp)
    b478:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    b47c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    b480:	e0bffd17 	ldw	r2,-12(fp)
    b484:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    b488:	e0bffc17 	ldw	r2,-16(fp)
    b48c:	10c00c17 	ldw	r3,48(r2)
    b490:	e0bfff17 	ldw	r2,-4(fp)
    b494:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    b498:	e0bffc17 	ldw	r2,-16(fp)
    b49c:	10800c17 	ldw	r2,48(r2)
    b4a0:	1000031e 	bne	r2,zero,b4b0 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    b4a4:	00bffec4 	movi	r2,-5
    b4a8:	e0bffb15 	stw	r2,-20(fp)
    b4ac:	00000b06 	br	b4dc <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    b4b0:	e0bffc17 	ldw	r2,-16(fp)
    b4b4:	10800c17 	ldw	r2,48(r2)
    b4b8:	10800250 	cmplti	r2,r2,9
    b4bc:	1000031e 	bne	r2,zero,b4cc <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    b4c0:	00bffd04 	movi	r2,-12
    b4c4:	e0bffb15 	stw	r2,-20(fp)
    b4c8:	00000406 	br	b4dc <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    b4cc:	e0bffc17 	ldw	r2,-16(fp)
    b4d0:	10c00d04 	addi	r3,r2,52
    b4d4:	e0bffe17 	ldw	r2,-8(fp)
    b4d8:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    b4dc:	e0bffb17 	ldw	r2,-20(fp)
}
    b4e0:	e037883a 	mov	sp,fp
    b4e4:	df000017 	ldw	fp,0(sp)
    b4e8:	dec00104 	addi	sp,sp,4
    b4ec:	f800283a 	ret

0000b4f0 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    b4f0:	defff904 	addi	sp,sp,-28
    b4f4:	df000615 	stw	fp,24(sp)
    b4f8:	df000604 	addi	fp,sp,24
    b4fc:	e13ffe15 	stw	r4,-8(fp)
    b500:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    b504:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b508:	e0bffe17 	ldw	r2,-8(fp)
    b50c:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    b510:	e0bffb17 	ldw	r2,-20(fp)
    b514:	10800c17 	ldw	r2,48(r2)
    b518:	10bfffc4 	addi	r2,r2,-1
    b51c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    b520:	e0fffb17 	ldw	r3,-20(fp)
    b524:	e0bffc17 	ldw	r2,-16(fp)
    b528:	1004913a 	slli	r2,r2,4
    b52c:	1885883a 	add	r2,r3,r2
    b530:	10800d04 	addi	r2,r2,52
    b534:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    b538:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    b53c:	e13ffb17 	ldw	r4,-20(fp)
    b540:	e0bffc17 	ldw	r2,-16(fp)
    b544:	1004913a 	slli	r2,r2,4
    b548:	2085883a 	add	r2,r4,r2
    b54c:	10800e04 	addi	r2,r2,56
    b550:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    b554:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    b558:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    b55c:	e0bfff17 	ldw	r2,-4(fp)
    b560:	e0fffd17 	ldw	r3,-12(fp)
    b564:	1880022e 	bgeu	r3,r2,b570 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    b568:	00bffec4 	movi	r2,-5
    b56c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    b570:	e0bffa17 	ldw	r2,-24(fp)
}
    b574:	e037883a 	mov	sp,fp
    b578:	df000017 	ldw	fp,0(sp)
    b57c:	dec00104 	addi	sp,sp,4
    b580:	f800283a 	ret

0000b584 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    b584:	defffa04 	addi	sp,sp,-24
    b588:	dfc00515 	stw	ra,20(sp)
    b58c:	df000415 	stw	fp,16(sp)
    b590:	df000404 	addi	fp,sp,16
    b594:	e13ffe15 	stw	r4,-8(fp)
    b598:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    b59c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b5a0:	e0bffe17 	ldw	r2,-8(fp)
    b5a4:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    b5a8:	e17fff17 	ldw	r5,-4(fp)
    b5ac:	e13ffe17 	ldw	r4,-8(fp)
    b5b0:	000b4f00 	call	b4f0 <alt_epcs_test_address>
    b5b4:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    b5b8:	e0bffc17 	ldw	r2,-16(fp)
    b5bc:	10000916 	blt	r2,zero,b5e4 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    b5c0:	e0bffd17 	ldw	r2,-12(fp)
    b5c4:	10c02e17 	ldw	r3,184(r2)
    b5c8:	e13fff17 	ldw	r4,-4(fp)
    b5cc:	e0bffd17 	ldw	r2,-12(fp)
    b5d0:	10803217 	ldw	r2,200(r2)
    b5d4:	100d883a 	mov	r6,r2
    b5d8:	200b883a 	mov	r5,r4
    b5dc:	1809883a 	mov	r4,r3
    b5e0:	000c2cc0 	call	c2cc <epcs_sector_erase>
  }
  return ret_code;
    b5e4:	e0bffc17 	ldw	r2,-16(fp)
}
    b5e8:	e037883a 	mov	sp,fp
    b5ec:	dfc00117 	ldw	ra,4(sp)
    b5f0:	df000017 	ldw	fp,0(sp)
    b5f4:	dec00204 	addi	sp,sp,8
    b5f8:	f800283a 	ret

0000b5fc <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    b5fc:	defff404 	addi	sp,sp,-48
    b600:	dfc00b15 	stw	ra,44(sp)
    b604:	df000a15 	stw	fp,40(sp)
    b608:	df000a04 	addi	fp,sp,40
    b60c:	e13ffc15 	stw	r4,-16(fp)
    b610:	e17ffd15 	stw	r5,-12(fp)
    b614:	e1bffe15 	stw	r6,-8(fp)
    b618:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b61c:	e0bffc17 	ldw	r2,-16(fp)
    b620:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    b624:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    b628:	e17ffe17 	ldw	r5,-8(fp)
    b62c:	e13ffc17 	ldw	r4,-16(fp)
    b630:	000b4f00 	call	b4f0 <alt_epcs_test_address>
    b634:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    b638:	e0bff917 	ldw	r2,-28(fp)
    b63c:	10002916 	blt	r2,zero,b6e4 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    b640:	00002606 	br	b6dc <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    b644:	e0bff817 	ldw	r2,-32(fp)
    b648:	10c03117 	ldw	r3,196(r2)
    b64c:	e0bffe17 	ldw	r2,-8(fp)
    b650:	1887883a 	add	r3,r3,r2
    b654:	e0bff817 	ldw	r2,-32(fp)
    b658:	10803117 	ldw	r2,196(r2)
    b65c:	0085c83a 	sub	r2,zero,r2
    b660:	1884703a 	and	r2,r3,r2
    b664:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    b668:	e0fffa17 	ldw	r3,-24(fp)
    b66c:	e0bffe17 	ldw	r2,-8(fp)
    b670:	1885c83a 	sub	r2,r3,r2
    b674:	e0c00217 	ldw	r3,8(fp)
    b678:	1880010e 	bge	r3,r2,b680 <alt_epcs_flash_write_block+0x84>
    b67c:	1805883a 	mov	r2,r3
    b680:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    b684:	e0bff817 	ldw	r2,-32(fp)
    b688:	11002e17 	ldw	r4,184(r2)
    b68c:	e0bff717 	ldw	r2,-36(fp)
    b690:	e0ffff17 	ldw	r3,-4(fp)
    b694:	1887883a 	add	r3,r3,r2
    b698:	e0bff817 	ldw	r2,-32(fp)
    b69c:	10803217 	ldw	r2,200(r2)
    b6a0:	d8800015 	stw	r2,0(sp)
    b6a4:	e1fffb17 	ldw	r7,-20(fp)
    b6a8:	180d883a 	mov	r6,r3
    b6ac:	e17ffe17 	ldw	r5,-8(fp)
    b6b0:	000c57c0 	call	c57c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    b6b4:	e0c00217 	ldw	r3,8(fp)
    b6b8:	e0bffb17 	ldw	r2,-20(fp)
    b6bc:	1885c83a 	sub	r2,r3,r2
    b6c0:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    b6c4:	e0fff717 	ldw	r3,-36(fp)
    b6c8:	e0bffb17 	ldw	r2,-20(fp)
    b6cc:	1885883a 	add	r2,r3,r2
    b6d0:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    b6d4:	e0bffa17 	ldw	r2,-24(fp)
    b6d8:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    b6dc:	e0800217 	ldw	r2,8(fp)
    b6e0:	103fd81e 	bne	r2,zero,b644 <__alt_mem_epcs_flash_controller+0xfe002644>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    b6e4:	e0bff917 	ldw	r2,-28(fp)
}
    b6e8:	e037883a 	mov	sp,fp
    b6ec:	dfc00117 	ldw	ra,4(sp)
    b6f0:	df000017 	ldw	fp,0(sp)
    b6f4:	dec00204 	addi	sp,sp,8
    b6f8:	f800283a 	ret

0000b6fc <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    b6fc:	defff704 	addi	sp,sp,-36
    b700:	dfc00815 	stw	ra,32(sp)
    b704:	df000715 	stw	fp,28(sp)
    b708:	df000704 	addi	fp,sp,28
    b70c:	e13ffc15 	stw	r4,-16(fp)
    b710:	e17ffd15 	stw	r5,-12(fp)
    b714:	e1bffe15 	stw	r6,-8(fp)
    b718:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    b71c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    b720:	e0bffc17 	ldw	r2,-16(fp)
    b724:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    b728:	e17ffd17 	ldw	r5,-12(fp)
    b72c:	e13ffc17 	ldw	r4,-16(fp)
    b730:	000b4f00 	call	b4f0 <alt_epcs_test_address>
    b734:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    b738:	e0bffa17 	ldw	r2,-24(fp)
    b73c:	10000f16 	blt	r2,zero,b77c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    b740:	e0bffb17 	ldw	r2,-20(fp)
    b744:	10c02e17 	ldw	r3,184(r2)
    b748:	e0bffb17 	ldw	r2,-20(fp)
    b74c:	10803217 	ldw	r2,200(r2)
    b750:	d8800015 	stw	r2,0(sp)
    b754:	e1ffff17 	ldw	r7,-4(fp)
    b758:	e1bffe17 	ldw	r6,-8(fp)
    b75c:	e17ffd17 	ldw	r5,-12(fp)
    b760:	1809883a 	mov	r4,r3
    b764:	000c3c80 	call	c3c8 <epcs_read_buffer>
    b768:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    b76c:	e0fffa17 	ldw	r3,-24(fp)
    b770:	e0bfff17 	ldw	r2,-4(fp)
    b774:	1880011e 	bne	r3,r2,b77c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    b778:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    b77c:	e0bffa17 	ldw	r2,-24(fp)
}
    b780:	e037883a 	mov	sp,fp
    b784:	dfc00117 	ldw	ra,4(sp)
    b788:	df000017 	ldw	fp,0(sp)
    b78c:	dec00204 	addi	sp,sp,8
    b790:	f800283a 	ret

0000b794 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b794:	defffa04 	addi	sp,sp,-24
    b798:	dfc00515 	stw	ra,20(sp)
    b79c:	df000415 	stw	fp,16(sp)
    b7a0:	df000404 	addi	fp,sp,16
    b7a4:	e13ffd15 	stw	r4,-12(fp)
    b7a8:	e17ffe15 	stw	r5,-8(fp)
    b7ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b7b0:	e0bffd17 	ldw	r2,-12(fp)
    b7b4:	10800017 	ldw	r2,0(r2)
    b7b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b7bc:	e0bffc17 	ldw	r2,-16(fp)
    b7c0:	10c00a04 	addi	r3,r2,40
    b7c4:	e0bffd17 	ldw	r2,-12(fp)
    b7c8:	10800217 	ldw	r2,8(r2)
    b7cc:	100f883a 	mov	r7,r2
    b7d0:	e1bfff17 	ldw	r6,-4(fp)
    b7d4:	e17ffe17 	ldw	r5,-8(fp)
    b7d8:	1809883a 	mov	r4,r3
    b7dc:	000bdbc0 	call	bdbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b7e0:	e037883a 	mov	sp,fp
    b7e4:	dfc00117 	ldw	ra,4(sp)
    b7e8:	df000017 	ldw	fp,0(sp)
    b7ec:	dec00204 	addi	sp,sp,8
    b7f0:	f800283a 	ret

0000b7f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b7f4:	defffa04 	addi	sp,sp,-24
    b7f8:	dfc00515 	stw	ra,20(sp)
    b7fc:	df000415 	stw	fp,16(sp)
    b800:	df000404 	addi	fp,sp,16
    b804:	e13ffd15 	stw	r4,-12(fp)
    b808:	e17ffe15 	stw	r5,-8(fp)
    b80c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b810:	e0bffd17 	ldw	r2,-12(fp)
    b814:	10800017 	ldw	r2,0(r2)
    b818:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b81c:	e0bffc17 	ldw	r2,-16(fp)
    b820:	10c00a04 	addi	r3,r2,40
    b824:	e0bffd17 	ldw	r2,-12(fp)
    b828:	10800217 	ldw	r2,8(r2)
    b82c:	100f883a 	mov	r7,r2
    b830:	e1bfff17 	ldw	r6,-4(fp)
    b834:	e17ffe17 	ldw	r5,-8(fp)
    b838:	1809883a 	mov	r4,r3
    b83c:	000bfd80 	call	bfd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b840:	e037883a 	mov	sp,fp
    b844:	dfc00117 	ldw	ra,4(sp)
    b848:	df000017 	ldw	fp,0(sp)
    b84c:	dec00204 	addi	sp,sp,8
    b850:	f800283a 	ret

0000b854 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b854:	defffc04 	addi	sp,sp,-16
    b858:	dfc00315 	stw	ra,12(sp)
    b85c:	df000215 	stw	fp,8(sp)
    b860:	df000204 	addi	fp,sp,8
    b864:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b868:	e0bfff17 	ldw	r2,-4(fp)
    b86c:	10800017 	ldw	r2,0(r2)
    b870:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b874:	e0bffe17 	ldw	r2,-8(fp)
    b878:	10c00a04 	addi	r3,r2,40
    b87c:	e0bfff17 	ldw	r2,-4(fp)
    b880:	10800217 	ldw	r2,8(r2)
    b884:	100b883a 	mov	r5,r2
    b888:	1809883a 	mov	r4,r3
    b88c:	000bc640 	call	bc64 <altera_avalon_jtag_uart_close>
}
    b890:	e037883a 	mov	sp,fp
    b894:	dfc00117 	ldw	ra,4(sp)
    b898:	df000017 	ldw	fp,0(sp)
    b89c:	dec00204 	addi	sp,sp,8
    b8a0:	f800283a 	ret

0000b8a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b8a4:	defffa04 	addi	sp,sp,-24
    b8a8:	dfc00515 	stw	ra,20(sp)
    b8ac:	df000415 	stw	fp,16(sp)
    b8b0:	df000404 	addi	fp,sp,16
    b8b4:	e13ffd15 	stw	r4,-12(fp)
    b8b8:	e17ffe15 	stw	r5,-8(fp)
    b8bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b8c0:	e0bffd17 	ldw	r2,-12(fp)
    b8c4:	10800017 	ldw	r2,0(r2)
    b8c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b8cc:	e0bffc17 	ldw	r2,-16(fp)
    b8d0:	10800a04 	addi	r2,r2,40
    b8d4:	e1bfff17 	ldw	r6,-4(fp)
    b8d8:	e17ffe17 	ldw	r5,-8(fp)
    b8dc:	1009883a 	mov	r4,r2
    b8e0:	000bccc0 	call	bccc <altera_avalon_jtag_uart_ioctl>
}
    b8e4:	e037883a 	mov	sp,fp
    b8e8:	dfc00117 	ldw	ra,4(sp)
    b8ec:	df000017 	ldw	fp,0(sp)
    b8f0:	dec00204 	addi	sp,sp,8
    b8f4:	f800283a 	ret

0000b8f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b8f8:	defffa04 	addi	sp,sp,-24
    b8fc:	dfc00515 	stw	ra,20(sp)
    b900:	df000415 	stw	fp,16(sp)
    b904:	df000404 	addi	fp,sp,16
    b908:	e13ffd15 	stw	r4,-12(fp)
    b90c:	e17ffe15 	stw	r5,-8(fp)
    b910:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b914:	e0bffd17 	ldw	r2,-12(fp)
    b918:	00c00044 	movi	r3,1
    b91c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b920:	e0bffd17 	ldw	r2,-12(fp)
    b924:	10800017 	ldw	r2,0(r2)
    b928:	10800104 	addi	r2,r2,4
    b92c:	1007883a 	mov	r3,r2
    b930:	e0bffd17 	ldw	r2,-12(fp)
    b934:	10800817 	ldw	r2,32(r2)
    b938:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b93c:	e0bffe17 	ldw	r2,-8(fp)
    b940:	e0ffff17 	ldw	r3,-4(fp)
    b944:	d8000015 	stw	zero,0(sp)
    b948:	e1fffd17 	ldw	r7,-12(fp)
    b94c:	01800074 	movhi	r6,1
    b950:	31ae6e04 	addi	r6,r6,-17992
    b954:	180b883a 	mov	r5,r3
    b958:	1009883a 	mov	r4,r2
    b95c:	000cd400 	call	cd40 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b960:	e0bffd17 	ldw	r2,-12(fp)
    b964:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b968:	e0bffd17 	ldw	r2,-12(fp)
    b96c:	10800204 	addi	r2,r2,8
    b970:	d0e51917 	ldw	r3,-27548(gp)
    b974:	e1fffd17 	ldw	r7,-12(fp)
    b978:	01800074 	movhi	r6,1
    b97c:	31aef104 	addi	r6,r6,-17468
    b980:	180b883a 	mov	r5,r3
    b984:	1009883a 	mov	r4,r2
    b988:	000c8380 	call	c838 <alt_alarm_start>
    b98c:	1000040e 	bge	r2,zero,b9a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b990:	e0fffd17 	ldw	r3,-12(fp)
    b994:	00a00034 	movhi	r2,32768
    b998:	10bfffc4 	addi	r2,r2,-1
    b99c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b9a0:	0001883a 	nop
    b9a4:	e037883a 	mov	sp,fp
    b9a8:	dfc00117 	ldw	ra,4(sp)
    b9ac:	df000017 	ldw	fp,0(sp)
    b9b0:	dec00204 	addi	sp,sp,8
    b9b4:	f800283a 	ret

0000b9b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b9b8:	defff804 	addi	sp,sp,-32
    b9bc:	df000715 	stw	fp,28(sp)
    b9c0:	df000704 	addi	fp,sp,28
    b9c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b9c8:	e0bfff17 	ldw	r2,-4(fp)
    b9cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    b9d0:	e0bffb17 	ldw	r2,-20(fp)
    b9d4:	10800017 	ldw	r2,0(r2)
    b9d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b9dc:	e0bffc17 	ldw	r2,-16(fp)
    b9e0:	10800104 	addi	r2,r2,4
    b9e4:	10800037 	ldwio	r2,0(r2)
    b9e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b9ec:	e0bffd17 	ldw	r2,-12(fp)
    b9f0:	1080c00c 	andi	r2,r2,768
    b9f4:	10006d26 	beq	r2,zero,bbac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b9f8:	e0bffd17 	ldw	r2,-12(fp)
    b9fc:	1080400c 	andi	r2,r2,256
    ba00:	10003526 	beq	r2,zero,bad8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ba04:	00800074 	movhi	r2,1
    ba08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ba0c:	e0bffb17 	ldw	r2,-20(fp)
    ba10:	10800a17 	ldw	r2,40(r2)
    ba14:	10800044 	addi	r2,r2,1
    ba18:	1081ffcc 	andi	r2,r2,2047
    ba1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    ba20:	e0bffb17 	ldw	r2,-20(fp)
    ba24:	10c00b17 	ldw	r3,44(r2)
    ba28:	e0bffe17 	ldw	r2,-8(fp)
    ba2c:	18801526 	beq	r3,r2,ba84 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ba30:	e0bffc17 	ldw	r2,-16(fp)
    ba34:	10800037 	ldwio	r2,0(r2)
    ba38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ba3c:	e0bff917 	ldw	r2,-28(fp)
    ba40:	10a0000c 	andi	r2,r2,32768
    ba44:	10001126 	beq	r2,zero,ba8c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ba48:	e0bffb17 	ldw	r2,-20(fp)
    ba4c:	10800a17 	ldw	r2,40(r2)
    ba50:	e0fff917 	ldw	r3,-28(fp)
    ba54:	1809883a 	mov	r4,r3
    ba58:	e0fffb17 	ldw	r3,-20(fp)
    ba5c:	1885883a 	add	r2,r3,r2
    ba60:	10800e04 	addi	r2,r2,56
    ba64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ba68:	e0bffb17 	ldw	r2,-20(fp)
    ba6c:	10800a17 	ldw	r2,40(r2)
    ba70:	10800044 	addi	r2,r2,1
    ba74:	10c1ffcc 	andi	r3,r2,2047
    ba78:	e0bffb17 	ldw	r2,-20(fp)
    ba7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ba80:	003fe206 	br	ba0c <__alt_mem_epcs_flash_controller+0xfe002a0c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ba84:	0001883a 	nop
    ba88:	00000106 	br	ba90 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ba8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ba90:	e0bff917 	ldw	r2,-28(fp)
    ba94:	10bfffec 	andhi	r2,r2,65535
    ba98:	10000f26 	beq	r2,zero,bad8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ba9c:	e0bffb17 	ldw	r2,-20(fp)
    baa0:	10c00817 	ldw	r3,32(r2)
    baa4:	00bfff84 	movi	r2,-2
    baa8:	1886703a 	and	r3,r3,r2
    baac:	e0bffb17 	ldw	r2,-20(fp)
    bab0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    bab4:	e0bffc17 	ldw	r2,-16(fp)
    bab8:	10800104 	addi	r2,r2,4
    babc:	1007883a 	mov	r3,r2
    bac0:	e0bffb17 	ldw	r2,-20(fp)
    bac4:	10800817 	ldw	r2,32(r2)
    bac8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bacc:	e0bffc17 	ldw	r2,-16(fp)
    bad0:	10800104 	addi	r2,r2,4
    bad4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    bad8:	e0bffd17 	ldw	r2,-12(fp)
    badc:	1080800c 	andi	r2,r2,512
    bae0:	103fbe26 	beq	r2,zero,b9dc <__alt_mem_epcs_flash_controller+0xfe0029dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    bae4:	e0bffd17 	ldw	r2,-12(fp)
    bae8:	1004d43a 	srli	r2,r2,16
    baec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    baf0:	00001406 	br	bb44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    baf4:	e0bffc17 	ldw	r2,-16(fp)
    baf8:	e0fffb17 	ldw	r3,-20(fp)
    bafc:	18c00d17 	ldw	r3,52(r3)
    bb00:	e13ffb17 	ldw	r4,-20(fp)
    bb04:	20c7883a 	add	r3,r4,r3
    bb08:	18c20e04 	addi	r3,r3,2104
    bb0c:	18c00003 	ldbu	r3,0(r3)
    bb10:	18c03fcc 	andi	r3,r3,255
    bb14:	18c0201c 	xori	r3,r3,128
    bb18:	18ffe004 	addi	r3,r3,-128
    bb1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bb20:	e0bffb17 	ldw	r2,-20(fp)
    bb24:	10800d17 	ldw	r2,52(r2)
    bb28:	10800044 	addi	r2,r2,1
    bb2c:	10c1ffcc 	andi	r3,r2,2047
    bb30:	e0bffb17 	ldw	r2,-20(fp)
    bb34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    bb38:	e0bffa17 	ldw	r2,-24(fp)
    bb3c:	10bfffc4 	addi	r2,r2,-1
    bb40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bb44:	e0bffa17 	ldw	r2,-24(fp)
    bb48:	10000526 	beq	r2,zero,bb60 <altera_avalon_jtag_uart_irq+0x1a8>
    bb4c:	e0bffb17 	ldw	r2,-20(fp)
    bb50:	10c00d17 	ldw	r3,52(r2)
    bb54:	e0bffb17 	ldw	r2,-20(fp)
    bb58:	10800c17 	ldw	r2,48(r2)
    bb5c:	18bfe51e 	bne	r3,r2,baf4 <__alt_mem_epcs_flash_controller+0xfe002af4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bb60:	e0bffa17 	ldw	r2,-24(fp)
    bb64:	103f9d26 	beq	r2,zero,b9dc <__alt_mem_epcs_flash_controller+0xfe0029dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bb68:	e0bffb17 	ldw	r2,-20(fp)
    bb6c:	10c00817 	ldw	r3,32(r2)
    bb70:	00bfff44 	movi	r2,-3
    bb74:	1886703a 	and	r3,r3,r2
    bb78:	e0bffb17 	ldw	r2,-20(fp)
    bb7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bb80:	e0bffb17 	ldw	r2,-20(fp)
    bb84:	10800017 	ldw	r2,0(r2)
    bb88:	10800104 	addi	r2,r2,4
    bb8c:	1007883a 	mov	r3,r2
    bb90:	e0bffb17 	ldw	r2,-20(fp)
    bb94:	10800817 	ldw	r2,32(r2)
    bb98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bb9c:	e0bffc17 	ldw	r2,-16(fp)
    bba0:	10800104 	addi	r2,r2,4
    bba4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    bba8:	003f8c06 	br	b9dc <__alt_mem_epcs_flash_controller+0xfe0029dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    bbac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    bbb0:	0001883a 	nop
    bbb4:	e037883a 	mov	sp,fp
    bbb8:	df000017 	ldw	fp,0(sp)
    bbbc:	dec00104 	addi	sp,sp,4
    bbc0:	f800283a 	ret

0000bbc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    bbc4:	defff804 	addi	sp,sp,-32
    bbc8:	df000715 	stw	fp,28(sp)
    bbcc:	df000704 	addi	fp,sp,28
    bbd0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    bbd4:	e0bffb17 	ldw	r2,-20(fp)
    bbd8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    bbdc:	e0bff917 	ldw	r2,-28(fp)
    bbe0:	10800017 	ldw	r2,0(r2)
    bbe4:	10800104 	addi	r2,r2,4
    bbe8:	10800037 	ldwio	r2,0(r2)
    bbec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    bbf0:	e0bffa17 	ldw	r2,-24(fp)
    bbf4:	1081000c 	andi	r2,r2,1024
    bbf8:	10000b26 	beq	r2,zero,bc28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    bbfc:	e0bff917 	ldw	r2,-28(fp)
    bc00:	10800017 	ldw	r2,0(r2)
    bc04:	10800104 	addi	r2,r2,4
    bc08:	1007883a 	mov	r3,r2
    bc0c:	e0bff917 	ldw	r2,-28(fp)
    bc10:	10800817 	ldw	r2,32(r2)
    bc14:	10810014 	ori	r2,r2,1024
    bc18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    bc1c:	e0bff917 	ldw	r2,-28(fp)
    bc20:	10000915 	stw	zero,36(r2)
    bc24:	00000a06 	br	bc50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    bc28:	e0bff917 	ldw	r2,-28(fp)
    bc2c:	10c00917 	ldw	r3,36(r2)
    bc30:	00a00034 	movhi	r2,32768
    bc34:	10bfff04 	addi	r2,r2,-4
    bc38:	10c00536 	bltu	r2,r3,bc50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    bc3c:	e0bff917 	ldw	r2,-28(fp)
    bc40:	10800917 	ldw	r2,36(r2)
    bc44:	10c00044 	addi	r3,r2,1
    bc48:	e0bff917 	ldw	r2,-28(fp)
    bc4c:	10c00915 	stw	r3,36(r2)
    bc50:	d0a51917 	ldw	r2,-27548(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    bc54:	e037883a 	mov	sp,fp
    bc58:	df000017 	ldw	fp,0(sp)
    bc5c:	dec00104 	addi	sp,sp,4
    bc60:	f800283a 	ret

0000bc64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    bc64:	defffd04 	addi	sp,sp,-12
    bc68:	df000215 	stw	fp,8(sp)
    bc6c:	df000204 	addi	fp,sp,8
    bc70:	e13ffe15 	stw	r4,-8(fp)
    bc74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bc78:	00000506 	br	bc90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    bc7c:	e0bfff17 	ldw	r2,-4(fp)
    bc80:	1090000c 	andi	r2,r2,16384
    bc84:	10000226 	beq	r2,zero,bc90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    bc88:	00bffd44 	movi	r2,-11
    bc8c:	00000b06 	br	bcbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bc90:	e0bffe17 	ldw	r2,-8(fp)
    bc94:	10c00d17 	ldw	r3,52(r2)
    bc98:	e0bffe17 	ldw	r2,-8(fp)
    bc9c:	10800c17 	ldw	r2,48(r2)
    bca0:	18800526 	beq	r3,r2,bcb8 <altera_avalon_jtag_uart_close+0x54>
    bca4:	e0bffe17 	ldw	r2,-8(fp)
    bca8:	10c00917 	ldw	r3,36(r2)
    bcac:	e0bffe17 	ldw	r2,-8(fp)
    bcb0:	10800117 	ldw	r2,4(r2)
    bcb4:	18bff136 	bltu	r3,r2,bc7c <__alt_mem_epcs_flash_controller+0xfe002c7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    bcb8:	0005883a 	mov	r2,zero
}
    bcbc:	e037883a 	mov	sp,fp
    bcc0:	df000017 	ldw	fp,0(sp)
    bcc4:	dec00104 	addi	sp,sp,4
    bcc8:	f800283a 	ret

0000bccc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bccc:	defffa04 	addi	sp,sp,-24
    bcd0:	df000515 	stw	fp,20(sp)
    bcd4:	df000504 	addi	fp,sp,20
    bcd8:	e13ffd15 	stw	r4,-12(fp)
    bcdc:	e17ffe15 	stw	r5,-8(fp)
    bce0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    bce4:	00bff9c4 	movi	r2,-25
    bce8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    bcec:	e0bffe17 	ldw	r2,-8(fp)
    bcf0:	10da8060 	cmpeqi	r3,r2,27137
    bcf4:	1800031e 	bne	r3,zero,bd04 <altera_avalon_jtag_uart_ioctl+0x38>
    bcf8:	109a80a0 	cmpeqi	r2,r2,27138
    bcfc:	1000181e 	bne	r2,zero,bd60 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    bd00:	00002906 	br	bda8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bd04:	e0bffd17 	ldw	r2,-12(fp)
    bd08:	10c00117 	ldw	r3,4(r2)
    bd0c:	00a00034 	movhi	r2,32768
    bd10:	10bfffc4 	addi	r2,r2,-1
    bd14:	18802126 	beq	r3,r2,bd9c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    bd18:	e0bfff17 	ldw	r2,-4(fp)
    bd1c:	10800017 	ldw	r2,0(r2)
    bd20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bd24:	e0bffc17 	ldw	r2,-16(fp)
    bd28:	10800090 	cmplti	r2,r2,2
    bd2c:	1000061e 	bne	r2,zero,bd48 <altera_avalon_jtag_uart_ioctl+0x7c>
    bd30:	e0fffc17 	ldw	r3,-16(fp)
    bd34:	00a00034 	movhi	r2,32768
    bd38:	10bfffc4 	addi	r2,r2,-1
    bd3c:	18800226 	beq	r3,r2,bd48 <altera_avalon_jtag_uart_ioctl+0x7c>
    bd40:	e0bffc17 	ldw	r2,-16(fp)
    bd44:	00000206 	br	bd50 <altera_avalon_jtag_uart_ioctl+0x84>
    bd48:	00a00034 	movhi	r2,32768
    bd4c:	10bfff84 	addi	r2,r2,-2
    bd50:	e0fffd17 	ldw	r3,-12(fp)
    bd54:	18800115 	stw	r2,4(r3)
      rc = 0;
    bd58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    bd5c:	00000f06 	br	bd9c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bd60:	e0bffd17 	ldw	r2,-12(fp)
    bd64:	10c00117 	ldw	r3,4(r2)
    bd68:	00a00034 	movhi	r2,32768
    bd6c:	10bfffc4 	addi	r2,r2,-1
    bd70:	18800c26 	beq	r3,r2,bda4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bd74:	e0bffd17 	ldw	r2,-12(fp)
    bd78:	10c00917 	ldw	r3,36(r2)
    bd7c:	e0bffd17 	ldw	r2,-12(fp)
    bd80:	10800117 	ldw	r2,4(r2)
    bd84:	1885803a 	cmpltu	r2,r3,r2
    bd88:	10c03fcc 	andi	r3,r2,255
    bd8c:	e0bfff17 	ldw	r2,-4(fp)
    bd90:	10c00015 	stw	r3,0(r2)
      rc = 0;
    bd94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    bd98:	00000206 	br	bda4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    bd9c:	0001883a 	nop
    bda0:	00000106 	br	bda8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    bda4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    bda8:	e0bffb17 	ldw	r2,-20(fp)
}
    bdac:	e037883a 	mov	sp,fp
    bdb0:	df000017 	ldw	fp,0(sp)
    bdb4:	dec00104 	addi	sp,sp,4
    bdb8:	f800283a 	ret

0000bdbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    bdbc:	defff304 	addi	sp,sp,-52
    bdc0:	dfc00c15 	stw	ra,48(sp)
    bdc4:	df000b15 	stw	fp,44(sp)
    bdc8:	df000b04 	addi	fp,sp,44
    bdcc:	e13ffc15 	stw	r4,-16(fp)
    bdd0:	e17ffd15 	stw	r5,-12(fp)
    bdd4:	e1bffe15 	stw	r6,-8(fp)
    bdd8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    bddc:	e0bffd17 	ldw	r2,-12(fp)
    bde0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bde4:	00004706 	br	bf04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    bde8:	e0bffc17 	ldw	r2,-16(fp)
    bdec:	10800a17 	ldw	r2,40(r2)
    bdf0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    bdf4:	e0bffc17 	ldw	r2,-16(fp)
    bdf8:	10800b17 	ldw	r2,44(r2)
    bdfc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    be00:	e0fff717 	ldw	r3,-36(fp)
    be04:	e0bff817 	ldw	r2,-32(fp)
    be08:	18800536 	bltu	r3,r2,be20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    be0c:	e0fff717 	ldw	r3,-36(fp)
    be10:	e0bff817 	ldw	r2,-32(fp)
    be14:	1885c83a 	sub	r2,r3,r2
    be18:	e0bff615 	stw	r2,-40(fp)
    be1c:	00000406 	br	be30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    be20:	00c20004 	movi	r3,2048
    be24:	e0bff817 	ldw	r2,-32(fp)
    be28:	1885c83a 	sub	r2,r3,r2
    be2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    be30:	e0bff617 	ldw	r2,-40(fp)
    be34:	10001e26 	beq	r2,zero,beb0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    be38:	e0fffe17 	ldw	r3,-8(fp)
    be3c:	e0bff617 	ldw	r2,-40(fp)
    be40:	1880022e 	bgeu	r3,r2,be4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    be44:	e0bffe17 	ldw	r2,-8(fp)
    be48:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    be4c:	e0bffc17 	ldw	r2,-16(fp)
    be50:	10c00e04 	addi	r3,r2,56
    be54:	e0bff817 	ldw	r2,-32(fp)
    be58:	1885883a 	add	r2,r3,r2
    be5c:	e1bff617 	ldw	r6,-40(fp)
    be60:	100b883a 	mov	r5,r2
    be64:	e13ff517 	ldw	r4,-44(fp)
    be68:	00095dc0 	call	95dc <memcpy>
      ptr   += n;
    be6c:	e0fff517 	ldw	r3,-44(fp)
    be70:	e0bff617 	ldw	r2,-40(fp)
    be74:	1885883a 	add	r2,r3,r2
    be78:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    be7c:	e0fffe17 	ldw	r3,-8(fp)
    be80:	e0bff617 	ldw	r2,-40(fp)
    be84:	1885c83a 	sub	r2,r3,r2
    be88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    be8c:	e0fff817 	ldw	r3,-32(fp)
    be90:	e0bff617 	ldw	r2,-40(fp)
    be94:	1885883a 	add	r2,r3,r2
    be98:	10c1ffcc 	andi	r3,r2,2047
    be9c:	e0bffc17 	ldw	r2,-16(fp)
    bea0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    bea4:	e0bffe17 	ldw	r2,-8(fp)
    bea8:	00bfcf16 	blt	zero,r2,bde8 <__alt_mem_epcs_flash_controller+0xfe002de8>
    beac:	00000106 	br	beb4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    beb0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    beb4:	e0fff517 	ldw	r3,-44(fp)
    beb8:	e0bffd17 	ldw	r2,-12(fp)
    bebc:	1880141e 	bne	r3,r2,bf10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    bec0:	e0bfff17 	ldw	r2,-4(fp)
    bec4:	1090000c 	andi	r2,r2,16384
    bec8:	1000131e 	bne	r2,zero,bf18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    becc:	0001883a 	nop
    bed0:	e0bffc17 	ldw	r2,-16(fp)
    bed4:	10c00a17 	ldw	r3,40(r2)
    bed8:	e0bff717 	ldw	r2,-36(fp)
    bedc:	1880051e 	bne	r3,r2,bef4 <altera_avalon_jtag_uart_read+0x138>
    bee0:	e0bffc17 	ldw	r2,-16(fp)
    bee4:	10c00917 	ldw	r3,36(r2)
    bee8:	e0bffc17 	ldw	r2,-16(fp)
    beec:	10800117 	ldw	r2,4(r2)
    bef0:	18bff736 	bltu	r3,r2,bed0 <__alt_mem_epcs_flash_controller+0xfe002ed0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    bef4:	e0bffc17 	ldw	r2,-16(fp)
    bef8:	10c00a17 	ldw	r3,40(r2)
    befc:	e0bff717 	ldw	r2,-36(fp)
    bf00:	18800726 	beq	r3,r2,bf20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bf04:	e0bffe17 	ldw	r2,-8(fp)
    bf08:	00bfb716 	blt	zero,r2,bde8 <__alt_mem_epcs_flash_controller+0xfe002de8>
    bf0c:	00000506 	br	bf24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    bf10:	0001883a 	nop
    bf14:	00000306 	br	bf24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    bf18:	0001883a 	nop
    bf1c:	00000106 	br	bf24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    bf20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    bf24:	e0fff517 	ldw	r3,-44(fp)
    bf28:	e0bffd17 	ldw	r2,-12(fp)
    bf2c:	18801826 	beq	r3,r2,bf90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf30:	0005303a 	rdctl	r2,status
    bf34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf38:	e0fffb17 	ldw	r3,-20(fp)
    bf3c:	00bfff84 	movi	r2,-2
    bf40:	1884703a 	and	r2,r3,r2
    bf44:	1001703a 	wrctl	status,r2
  
  return context;
    bf48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bf4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bf50:	e0bffc17 	ldw	r2,-16(fp)
    bf54:	10800817 	ldw	r2,32(r2)
    bf58:	10c00054 	ori	r3,r2,1
    bf5c:	e0bffc17 	ldw	r2,-16(fp)
    bf60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bf64:	e0bffc17 	ldw	r2,-16(fp)
    bf68:	10800017 	ldw	r2,0(r2)
    bf6c:	10800104 	addi	r2,r2,4
    bf70:	1007883a 	mov	r3,r2
    bf74:	e0bffc17 	ldw	r2,-16(fp)
    bf78:	10800817 	ldw	r2,32(r2)
    bf7c:	18800035 	stwio	r2,0(r3)
    bf80:	e0bffa17 	ldw	r2,-24(fp)
    bf84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf88:	e0bff917 	ldw	r2,-28(fp)
    bf8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bf90:	e0fff517 	ldw	r3,-44(fp)
    bf94:	e0bffd17 	ldw	r2,-12(fp)
    bf98:	18800426 	beq	r3,r2,bfac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    bf9c:	e0fff517 	ldw	r3,-44(fp)
    bfa0:	e0bffd17 	ldw	r2,-12(fp)
    bfa4:	1885c83a 	sub	r2,r3,r2
    bfa8:	00000606 	br	bfc4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    bfac:	e0bfff17 	ldw	r2,-4(fp)
    bfb0:	1090000c 	andi	r2,r2,16384
    bfb4:	10000226 	beq	r2,zero,bfc0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    bfb8:	00bffd44 	movi	r2,-11
    bfbc:	00000106 	br	bfc4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    bfc0:	00bffec4 	movi	r2,-5
}
    bfc4:	e037883a 	mov	sp,fp
    bfc8:	dfc00117 	ldw	ra,4(sp)
    bfcc:	df000017 	ldw	fp,0(sp)
    bfd0:	dec00204 	addi	sp,sp,8
    bfd4:	f800283a 	ret

0000bfd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bfd8:	defff304 	addi	sp,sp,-52
    bfdc:	dfc00c15 	stw	ra,48(sp)
    bfe0:	df000b15 	stw	fp,44(sp)
    bfe4:	df000b04 	addi	fp,sp,44
    bfe8:	e13ffc15 	stw	r4,-16(fp)
    bfec:	e17ffd15 	stw	r5,-12(fp)
    bff0:	e1bffe15 	stw	r6,-8(fp)
    bff4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bff8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bffc:	e0bffd17 	ldw	r2,-12(fp)
    c000:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c004:	00003706 	br	c0e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c008:	e0bffc17 	ldw	r2,-16(fp)
    c00c:	10800c17 	ldw	r2,48(r2)
    c010:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    c014:	e0bffc17 	ldw	r2,-16(fp)
    c018:	10800d17 	ldw	r2,52(r2)
    c01c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    c020:	e0fff917 	ldw	r3,-28(fp)
    c024:	e0bff517 	ldw	r2,-44(fp)
    c028:	1880062e 	bgeu	r3,r2,c044 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c02c:	e0fff517 	ldw	r3,-44(fp)
    c030:	e0bff917 	ldw	r2,-28(fp)
    c034:	1885c83a 	sub	r2,r3,r2
    c038:	10bfffc4 	addi	r2,r2,-1
    c03c:	e0bff615 	stw	r2,-40(fp)
    c040:	00000b06 	br	c070 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    c044:	e0bff517 	ldw	r2,-44(fp)
    c048:	10000526 	beq	r2,zero,c060 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c04c:	00c20004 	movi	r3,2048
    c050:	e0bff917 	ldw	r2,-28(fp)
    c054:	1885c83a 	sub	r2,r3,r2
    c058:	e0bff615 	stw	r2,-40(fp)
    c05c:	00000406 	br	c070 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c060:	00c1ffc4 	movi	r3,2047
    c064:	e0bff917 	ldw	r2,-28(fp)
    c068:	1885c83a 	sub	r2,r3,r2
    c06c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    c070:	e0bff617 	ldw	r2,-40(fp)
    c074:	10001e26 	beq	r2,zero,c0f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    c078:	e0fffe17 	ldw	r3,-8(fp)
    c07c:	e0bff617 	ldw	r2,-40(fp)
    c080:	1880022e 	bgeu	r3,r2,c08c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    c084:	e0bffe17 	ldw	r2,-8(fp)
    c088:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c08c:	e0bffc17 	ldw	r2,-16(fp)
    c090:	10c20e04 	addi	r3,r2,2104
    c094:	e0bff917 	ldw	r2,-28(fp)
    c098:	1885883a 	add	r2,r3,r2
    c09c:	e1bff617 	ldw	r6,-40(fp)
    c0a0:	e17ffd17 	ldw	r5,-12(fp)
    c0a4:	1009883a 	mov	r4,r2
    c0a8:	00095dc0 	call	95dc <memcpy>
      ptr   += n;
    c0ac:	e0fffd17 	ldw	r3,-12(fp)
    c0b0:	e0bff617 	ldw	r2,-40(fp)
    c0b4:	1885883a 	add	r2,r3,r2
    c0b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    c0bc:	e0fffe17 	ldw	r3,-8(fp)
    c0c0:	e0bff617 	ldw	r2,-40(fp)
    c0c4:	1885c83a 	sub	r2,r3,r2
    c0c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c0cc:	e0fff917 	ldw	r3,-28(fp)
    c0d0:	e0bff617 	ldw	r2,-40(fp)
    c0d4:	1885883a 	add	r2,r3,r2
    c0d8:	10c1ffcc 	andi	r3,r2,2047
    c0dc:	e0bffc17 	ldw	r2,-16(fp)
    c0e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c0e4:	e0bffe17 	ldw	r2,-8(fp)
    c0e8:	00bfc716 	blt	zero,r2,c008 <__alt_mem_epcs_flash_controller+0xfe003008>
    c0ec:	00000106 	br	c0f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    c0f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0f4:	0005303a 	rdctl	r2,status
    c0f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0fc:	e0fffb17 	ldw	r3,-20(fp)
    c100:	00bfff84 	movi	r2,-2
    c104:	1884703a 	and	r2,r3,r2
    c108:	1001703a 	wrctl	status,r2
  
  return context;
    c10c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c110:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c114:	e0bffc17 	ldw	r2,-16(fp)
    c118:	10800817 	ldw	r2,32(r2)
    c11c:	10c00094 	ori	r3,r2,2
    c120:	e0bffc17 	ldw	r2,-16(fp)
    c124:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c128:	e0bffc17 	ldw	r2,-16(fp)
    c12c:	10800017 	ldw	r2,0(r2)
    c130:	10800104 	addi	r2,r2,4
    c134:	1007883a 	mov	r3,r2
    c138:	e0bffc17 	ldw	r2,-16(fp)
    c13c:	10800817 	ldw	r2,32(r2)
    c140:	18800035 	stwio	r2,0(r3)
    c144:	e0bffa17 	ldw	r2,-24(fp)
    c148:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c14c:	e0bff817 	ldw	r2,-32(fp)
    c150:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c154:	e0bffe17 	ldw	r2,-8(fp)
    c158:	0080100e 	bge	zero,r2,c19c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    c15c:	e0bfff17 	ldw	r2,-4(fp)
    c160:	1090000c 	andi	r2,r2,16384
    c164:	1000101e 	bne	r2,zero,c1a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c168:	0001883a 	nop
    c16c:	e0bffc17 	ldw	r2,-16(fp)
    c170:	10c00d17 	ldw	r3,52(r2)
    c174:	e0bff517 	ldw	r2,-44(fp)
    c178:	1880051e 	bne	r3,r2,c190 <altera_avalon_jtag_uart_write+0x1b8>
    c17c:	e0bffc17 	ldw	r2,-16(fp)
    c180:	10c00917 	ldw	r3,36(r2)
    c184:	e0bffc17 	ldw	r2,-16(fp)
    c188:	10800117 	ldw	r2,4(r2)
    c18c:	18bff736 	bltu	r3,r2,c16c <__alt_mem_epcs_flash_controller+0xfe00316c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    c190:	e0bffc17 	ldw	r2,-16(fp)
    c194:	10800917 	ldw	r2,36(r2)
    c198:	1000051e 	bne	r2,zero,c1b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    c19c:	e0bffe17 	ldw	r2,-8(fp)
    c1a0:	00bfd016 	blt	zero,r2,c0e4 <__alt_mem_epcs_flash_controller+0xfe0030e4>
    c1a4:	00000306 	br	c1b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    c1a8:	0001883a 	nop
    c1ac:	00000106 	br	c1b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    c1b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c1b4:	e0fffd17 	ldw	r3,-12(fp)
    c1b8:	e0bff717 	ldw	r2,-36(fp)
    c1bc:	18800426 	beq	r3,r2,c1d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    c1c0:	e0fffd17 	ldw	r3,-12(fp)
    c1c4:	e0bff717 	ldw	r2,-36(fp)
    c1c8:	1885c83a 	sub	r2,r3,r2
    c1cc:	00000606 	br	c1e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    c1d0:	e0bfff17 	ldw	r2,-4(fp)
    c1d4:	1090000c 	andi	r2,r2,16384
    c1d8:	10000226 	beq	r2,zero,c1e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    c1dc:	00bffd44 	movi	r2,-11
    c1e0:	00000106 	br	c1e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    c1e4:	00bffec4 	movi	r2,-5
}
    c1e8:	e037883a 	mov	sp,fp
    c1ec:	dfc00117 	ldw	ra,4(sp)
    c1f0:	df000017 	ldw	fp,0(sp)
    c1f4:	dec00204 	addi	sp,sp,8
    c1f8:	f800283a 	ret

0000c1fc <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    c1fc:	defff904 	addi	sp,sp,-28
    c200:	dfc00615 	stw	ra,24(sp)
    c204:	df000515 	stw	fp,20(sp)
    c208:	df000504 	addi	fp,sp,20
    c20c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    c210:	00800144 	movi	r2,5
    c214:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    c218:	d8000215 	stw	zero,8(sp)
    c21c:	e0bffe44 	addi	r2,fp,-7
    c220:	d8800115 	stw	r2,4(sp)
    c224:	00800044 	movi	r2,1
    c228:	d8800015 	stw	r2,0(sp)
    c22c:	e1fffe04 	addi	r7,fp,-8
    c230:	01800044 	movi	r6,1
    c234:	000b883a 	mov	r5,zero
    c238:	e13fff17 	ldw	r4,-4(fp)
    c23c:	000d46c0 	call	d46c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    c240:	e0bffe43 	ldbu	r2,-7(fp)
}
    c244:	e037883a 	mov	sp,fp
    c248:	dfc00117 	ldw	ra,4(sp)
    c24c:	df000017 	ldw	fp,0(sp)
    c250:	dec00204 	addi	sp,sp,8
    c254:	f800283a 	ret

0000c258 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    c258:	defffd04 	addi	sp,sp,-12
    c25c:	dfc00215 	stw	ra,8(sp)
    c260:	df000115 	stw	fp,4(sp)
    c264:	df000104 	addi	fp,sp,4
    c268:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    c26c:	e13fff17 	ldw	r4,-4(fp)
    c270:	000c1fc0 	call	c1fc <epcs_read_status_register>
    c274:	10803fcc 	andi	r2,r2,255
    c278:	1080004c 	andi	r2,r2,1
}
    c27c:	e037883a 	mov	sp,fp
    c280:	dfc00117 	ldw	ra,4(sp)
    c284:	df000017 	ldw	fp,0(sp)
    c288:	dec00204 	addi	sp,sp,8
    c28c:	f800283a 	ret

0000c290 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    c290:	defffd04 	addi	sp,sp,-12
    c294:	dfc00215 	stw	ra,8(sp)
    c298:	df000115 	stw	fp,4(sp)
    c29c:	df000104 	addi	fp,sp,4
    c2a0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    c2a4:	0001883a 	nop
    c2a8:	e13fff17 	ldw	r4,-4(fp)
    c2ac:	000c2580 	call	c258 <epcs_test_wip>
    c2b0:	103ffd1e 	bne	r2,zero,c2a8 <__alt_mem_epcs_flash_controller+0xfe0032a8>
  {
  }
}
    c2b4:	0001883a 	nop
    c2b8:	e037883a 	mov	sp,fp
    c2bc:	dfc00117 	ldw	ra,4(sp)
    c2c0:	df000017 	ldw	fp,0(sp)
    c2c4:	dec00204 	addi	sp,sp,8
    c2c8:	f800283a 	ret

0000c2cc <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    c2cc:	defff604 	addi	sp,sp,-40
    c2d0:	dfc00915 	stw	ra,36(sp)
    c2d4:	df000815 	stw	fp,32(sp)
    c2d8:	df000804 	addi	fp,sp,32
    c2dc:	e13ffd15 	stw	r4,-12(fp)
    c2e0:	e17ffe15 	stw	r5,-8(fp)
    c2e4:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    c2e8:	e0bfff17 	ldw	r2,-4(fp)
    c2ec:	10001226 	beq	r2,zero,c338 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    c2f0:	00bff604 	movi	r2,-40
    c2f4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    c2f8:	e0bffe17 	ldw	r2,-8(fp)
    c2fc:	1004d63a 	srli	r2,r2,24
    c300:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    c304:	e0bffe17 	ldw	r2,-8(fp)
    c308:	1004d43a 	srli	r2,r2,16
    c30c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    c310:	e0bffe17 	ldw	r2,-8(fp)
    c314:	1004d23a 	srli	r2,r2,8
    c318:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    c31c:	e0bffe17 	ldw	r2,-8(fp)
    c320:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    c324:	00800144 	movi	r2,5
    c328:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    c32c:	e13ffd17 	ldw	r4,-12(fp)
    c330:	000c7800 	call	c780 <epcs_enter_4_bytes_mode>
    c334:	00000c06 	br	c368 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
    c338:	00bff604 	movi	r2,-40
    c33c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    c340:	e0bffe17 	ldw	r2,-8(fp)
    c344:	1004d43a 	srli	r2,r2,16
    c348:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    c34c:	e0bffe17 	ldw	r2,-8(fp)
    c350:	1004d23a 	srli	r2,r2,8
    c354:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    c358:	e0bffe17 	ldw	r2,-8(fp)
    c35c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    c360:	00800104 	movi	r2,4
    c364:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    c368:	e13ffd17 	ldw	r4,-12(fp)
    c36c:	000c4bc0 	call	c4bc <epcs_write_enable>

  alt_avalon_spi_command(
    c370:	e0bffb03 	ldbu	r2,-20(fp)
    c374:	e0fffb44 	addi	r3,fp,-19
    c378:	d8000215 	stw	zero,8(sp)
    c37c:	d8000115 	stw	zero,4(sp)
    c380:	d8000015 	stw	zero,0(sp)
    c384:	180f883a 	mov	r7,r3
    c388:	100d883a 	mov	r6,r2
    c38c:	000b883a 	mov	r5,zero
    c390:	e13ffd17 	ldw	r4,-12(fp)
    c394:	000d46c0 	call	d46c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    c398:	e13ffd17 	ldw	r4,-12(fp)
    c39c:	000c2900 	call	c290 <epcs_await_wip_released>

  if(four_bytes_mode)
    c3a0:	e0bfff17 	ldw	r2,-4(fp)
    c3a4:	10000226 	beq	r2,zero,c3b0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    c3a8:	e13ffd17 	ldw	r4,-12(fp)
    c3ac:	000c7dc0 	call	c7dc <epcs_exit_4_bytes_mode>
  }
}
    c3b0:	0001883a 	nop
    c3b4:	e037883a 	mov	sp,fp
    c3b8:	dfc00117 	ldw	ra,4(sp)
    c3bc:	df000017 	ldw	fp,0(sp)
    c3c0:	dec00204 	addi	sp,sp,8
    c3c4:	f800283a 	ret

0000c3c8 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    c3c8:	defff404 	addi	sp,sp,-48
    c3cc:	dfc00b15 	stw	ra,44(sp)
    c3d0:	df000a15 	stw	fp,40(sp)
    c3d4:	df000a04 	addi	fp,sp,40
    c3d8:	e13ffc15 	stw	r4,-16(fp)
    c3dc:	e17ffd15 	stw	r5,-12(fp)
    c3e0:	e1bffe15 	stw	r6,-8(fp)
    c3e4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    c3e8:	008000c4 	movi	r2,3
    c3ec:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    c3f0:	e0800217 	ldw	r2,8(fp)
    c3f4:	10001026 	beq	r2,zero,c438 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    c3f8:	e0bffd17 	ldw	r2,-12(fp)
    c3fc:	1004d63a 	srli	r2,r2,24
    c400:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    c404:	e0bffd17 	ldw	r2,-12(fp)
    c408:	1005d43a 	srai	r2,r2,16
    c40c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    c410:	e0bffd17 	ldw	r2,-12(fp)
    c414:	1005d23a 	srai	r2,r2,8
    c418:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    c41c:	e0bffd17 	ldw	r2,-12(fp)
    c420:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    c424:	00800144 	movi	r2,5
    c428:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    c42c:	e13ffc17 	ldw	r4,-16(fp)
    c430:	000c7800 	call	c780 <epcs_enter_4_bytes_mode>
    c434:	00000a06 	br	c460 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    c438:	e0bffd17 	ldw	r2,-12(fp)
    c43c:	1005d43a 	srai	r2,r2,16
    c440:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    c444:	e0bffd17 	ldw	r2,-12(fp)
    c448:	1005d23a 	srai	r2,r2,8
    c44c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    c450:	e0bffd17 	ldw	r2,-12(fp)
    c454:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    c458:	00800104 	movi	r2,4
    c45c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    c460:	e13ffc17 	ldw	r4,-16(fp)
    c464:	000c2900 	call	c290 <epcs_await_wip_released>

  alt_avalon_spi_command(
    c468:	e0bfff17 	ldw	r2,-4(fp)
    c46c:	e13ffa04 	addi	r4,fp,-24
    c470:	d8000215 	stw	zero,8(sp)
    c474:	e0fffe17 	ldw	r3,-8(fp)
    c478:	d8c00115 	stw	r3,4(sp)
    c47c:	d8800015 	stw	r2,0(sp)
    c480:	200f883a 	mov	r7,r4
    c484:	e1bff917 	ldw	r6,-28(fp)
    c488:	000b883a 	mov	r5,zero
    c48c:	e13ffc17 	ldw	r4,-16(fp)
    c490:	000d46c0 	call	d46c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    c494:	e0800217 	ldw	r2,8(fp)
    c498:	10000226 	beq	r2,zero,c4a4 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
    c49c:	e13ffc17 	ldw	r4,-16(fp)
    c4a0:	000c7dc0 	call	c7dc <epcs_exit_4_bytes_mode>
  }

  return length;
    c4a4:	e0bfff17 	ldw	r2,-4(fp)
}
    c4a8:	e037883a 	mov	sp,fp
    c4ac:	dfc00117 	ldw	ra,4(sp)
    c4b0:	df000017 	ldw	fp,0(sp)
    c4b4:	dec00204 	addi	sp,sp,8
    c4b8:	f800283a 	ret

0000c4bc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    c4bc:	defff904 	addi	sp,sp,-28
    c4c0:	dfc00615 	stw	ra,24(sp)
    c4c4:	df000515 	stw	fp,20(sp)
    c4c8:	df000504 	addi	fp,sp,20
    c4cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    c4d0:	00800184 	movi	r2,6
    c4d4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    c4d8:	d8000215 	stw	zero,8(sp)
    c4dc:	d8000115 	stw	zero,4(sp)
    c4e0:	d8000015 	stw	zero,0(sp)
    c4e4:	e1fffe04 	addi	r7,fp,-8
    c4e8:	01800044 	movi	r6,1
    c4ec:	000b883a 	mov	r5,zero
    c4f0:	e13fff17 	ldw	r4,-4(fp)
    c4f4:	000d46c0 	call	d46c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    c4f8:	0001883a 	nop
    c4fc:	e037883a 	mov	sp,fp
    c500:	dfc00117 	ldw	ra,4(sp)
    c504:	df000017 	ldw	fp,0(sp)
    c508:	dec00204 	addi	sp,sp,8
    c50c:	f800283a 	ret

0000c510 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    c510:	defff804 	addi	sp,sp,-32
    c514:	dfc00715 	stw	ra,28(sp)
    c518:	df000615 	stw	fp,24(sp)
    c51c:	df000604 	addi	fp,sp,24
    c520:	e13ffe15 	stw	r4,-8(fp)
    c524:	2805883a 	mov	r2,r5
    c528:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    c52c:	00800044 	movi	r2,1
    c530:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    c534:	e0bfff03 	ldbu	r2,-4(fp)
    c538:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    c53c:	d8000215 	stw	zero,8(sp)
    c540:	d8000115 	stw	zero,4(sp)
    c544:	d8000015 	stw	zero,0(sp)
    c548:	e1fffd04 	addi	r7,fp,-12
    c54c:	01800084 	movi	r6,2
    c550:	000b883a 	mov	r5,zero
    c554:	e13ffe17 	ldw	r4,-8(fp)
    c558:	000d46c0 	call	d46c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    c55c:	e13ffe17 	ldw	r4,-8(fp)
    c560:	000c2900 	call	c290 <epcs_await_wip_released>
}
    c564:	0001883a 	nop
    c568:	e037883a 	mov	sp,fp
    c56c:	dfc00117 	ldw	ra,4(sp)
    c570:	df000017 	ldw	fp,0(sp)
    c574:	dec00204 	addi	sp,sp,8
    c578:	f800283a 	ret

0000c57c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    c57c:	defff404 	addi	sp,sp,-48
    c580:	dfc00b15 	stw	ra,44(sp)
    c584:	df000a15 	stw	fp,40(sp)
    c588:	df000a04 	addi	fp,sp,40
    c58c:	e13ffc15 	stw	r4,-16(fp)
    c590:	e17ffd15 	stw	r5,-12(fp)
    c594:	e1bffe15 	stw	r6,-8(fp)
    c598:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    c59c:	00800084 	movi	r2,2
    c5a0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    c5a4:	e0800217 	ldw	r2,8(fp)
    c5a8:	10001026 	beq	r2,zero,c5ec <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
    c5ac:	e0bffd17 	ldw	r2,-12(fp)
    c5b0:	1004d63a 	srli	r2,r2,24
    c5b4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    c5b8:	e0bffd17 	ldw	r2,-12(fp)
    c5bc:	1005d43a 	srai	r2,r2,16
    c5c0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    c5c4:	e0bffd17 	ldw	r2,-12(fp)
    c5c8:	1005d23a 	srai	r2,r2,8
    c5cc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    c5d0:	e0bffd17 	ldw	r2,-12(fp)
    c5d4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    c5d8:	00800144 	movi	r2,5
    c5dc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    c5e0:	e13ffc17 	ldw	r4,-16(fp)
    c5e4:	000c7800 	call	c780 <epcs_enter_4_bytes_mode>
    c5e8:	00000a06 	br	c614 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    c5ec:	e0bffd17 	ldw	r2,-12(fp)
    c5f0:	1005d43a 	srai	r2,r2,16
    c5f4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    c5f8:	e0bffd17 	ldw	r2,-12(fp)
    c5fc:	1005d23a 	srai	r2,r2,8
    c600:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    c604:	e0bffd17 	ldw	r2,-12(fp)
    c608:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    c60c:	00800104 	movi	r2,4
    c610:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    c614:	e13ffc17 	ldw	r4,-16(fp)
    c618:	000c4bc0 	call	c4bc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    c61c:	e0fffa04 	addi	r3,fp,-24
    c620:	00800044 	movi	r2,1
    c624:	d8800215 	stw	r2,8(sp)
    c628:	d8000115 	stw	zero,4(sp)
    c62c:	d8000015 	stw	zero,0(sp)
    c630:	180f883a 	mov	r7,r3
    c634:	e1bff917 	ldw	r6,-28(fp)
    c638:	000b883a 	mov	r5,zero
    c63c:	e13ffc17 	ldw	r4,-16(fp)
    c640:	000d46c0 	call	d46c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    c644:	e0bfff17 	ldw	r2,-4(fp)
    c648:	d8000215 	stw	zero,8(sp)
    c64c:	d8000115 	stw	zero,4(sp)
    c650:	d8000015 	stw	zero,0(sp)
    c654:	e1fffe17 	ldw	r7,-8(fp)
    c658:	100d883a 	mov	r6,r2
    c65c:	000b883a 	mov	r5,zero
    c660:	e13ffc17 	ldw	r4,-16(fp)
    c664:	000d46c0 	call	d46c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    c668:	e13ffc17 	ldw	r4,-16(fp)
    c66c:	000c2900 	call	c290 <epcs_await_wip_released>

  if(four_bytes_mode)
    c670:	e0800217 	ldw	r2,8(fp)
    c674:	10000226 	beq	r2,zero,c680 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
    c678:	e13ffc17 	ldw	r4,-16(fp)
    c67c:	000c7dc0 	call	c7dc <epcs_exit_4_bytes_mode>
  }

  return length;
    c680:	e0bfff17 	ldw	r2,-4(fp)
}
    c684:	e037883a 	mov	sp,fp
    c688:	dfc00117 	ldw	ra,4(sp)
    c68c:	df000017 	ldw	fp,0(sp)
    c690:	dec00204 	addi	sp,sp,8
    c694:	f800283a 	ret

0000c698 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    c698:	defff804 	addi	sp,sp,-32
    c69c:	dfc00715 	stw	ra,28(sp)
    c6a0:	df000615 	stw	fp,24(sp)
    c6a4:	df000604 	addi	fp,sp,24
    c6a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    c6ac:	00bfeac4 	movi	r2,-85
    c6b0:	e0bffd05 	stb	r2,-12(fp)
    c6b4:	e03ffd45 	stb	zero,-11(fp)
    c6b8:	e03ffd85 	stb	zero,-10(fp)
    c6bc:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    c6c0:	d8000215 	stw	zero,8(sp)
    c6c4:	e0bffe04 	addi	r2,fp,-8
    c6c8:	d8800115 	stw	r2,4(sp)
    c6cc:	00800044 	movi	r2,1
    c6d0:	d8800015 	stw	r2,0(sp)
    c6d4:	e1fffd04 	addi	r7,fp,-12
    c6d8:	01800104 	movi	r6,4
    c6dc:	000b883a 	mov	r5,zero
    c6e0:	e13fff17 	ldw	r4,-4(fp)
    c6e4:	000d46c0 	call	d46c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    c6e8:	e0bffe03 	ldbu	r2,-8(fp)
}
    c6ec:	e037883a 	mov	sp,fp
    c6f0:	dfc00117 	ldw	ra,4(sp)
    c6f4:	df000017 	ldw	fp,0(sp)
    c6f8:	dec00204 	addi	sp,sp,8
    c6fc:	f800283a 	ret

0000c700 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    c700:	defff904 	addi	sp,sp,-28
    c704:	dfc00615 	stw	ra,24(sp)
    c708:	df000515 	stw	fp,20(sp)
    c70c:	df000504 	addi	fp,sp,20
    c710:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    c714:	00bfe7c4 	movi	r2,-97
    c718:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    c71c:	d8000215 	stw	zero,8(sp)
    c720:	e0bffe44 	addi	r2,fp,-7
    c724:	d8800115 	stw	r2,4(sp)
    c728:	008000c4 	movi	r2,3
    c72c:	d8800015 	stw	r2,0(sp)
    c730:	e1fffe04 	addi	r7,fp,-8
    c734:	01800044 	movi	r6,1
    c738:	000b883a 	mov	r5,zero
    c73c:	e13fff17 	ldw	r4,-4(fp)
    c740:	000d46c0 	call	d46c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    c744:	e0bffe43 	ldbu	r2,-7(fp)
    c748:	10803fcc 	andi	r2,r2,255
    c74c:	1006943a 	slli	r3,r2,16
    c750:	e0bffe83 	ldbu	r2,-6(fp)
    c754:	10803fcc 	andi	r2,r2,255
    c758:	1004923a 	slli	r2,r2,8
    c75c:	1886b03a 	or	r3,r3,r2
    c760:	e0bffec3 	ldbu	r2,-5(fp)
    c764:	10803fcc 	andi	r2,r2,255
    c768:	1884b03a 	or	r2,r3,r2
}
    c76c:	e037883a 	mov	sp,fp
    c770:	dfc00117 	ldw	ra,4(sp)
    c774:	df000017 	ldw	fp,0(sp)
    c778:	dec00204 	addi	sp,sp,8
    c77c:	f800283a 	ret

0000c780 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    c780:	defff904 	addi	sp,sp,-28
    c784:	dfc00615 	stw	ra,24(sp)
    c788:	df000515 	stw	fp,20(sp)
    c78c:	df000504 	addi	fp,sp,20
    c790:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    c794:	00bfedc4 	movi	r2,-73
    c798:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    c79c:	e13fff17 	ldw	r4,-4(fp)
    c7a0:	000c4bc0 	call	c4bc <epcs_write_enable>

  alt_avalon_spi_command(
    c7a4:	d8000215 	stw	zero,8(sp)
    c7a8:	d8000115 	stw	zero,4(sp)
    c7ac:	d8000015 	stw	zero,0(sp)
    c7b0:	e1fffe04 	addi	r7,fp,-8
    c7b4:	01800044 	movi	r6,1
    c7b8:	000b883a 	mov	r5,zero
    c7bc:	e13fff17 	ldw	r4,-4(fp)
    c7c0:	000d46c0 	call	d46c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    c7c4:	0001883a 	nop
}
    c7c8:	e037883a 	mov	sp,fp
    c7cc:	dfc00117 	ldw	ra,4(sp)
    c7d0:	df000017 	ldw	fp,0(sp)
    c7d4:	dec00204 	addi	sp,sp,8
    c7d8:	f800283a 	ret

0000c7dc <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    c7dc:	defff904 	addi	sp,sp,-28
    c7e0:	dfc00615 	stw	ra,24(sp)
    c7e4:	df000515 	stw	fp,20(sp)
    c7e8:	df000504 	addi	fp,sp,20
    c7ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    c7f0:	00bffa44 	movi	r2,-23
    c7f4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    c7f8:	e13fff17 	ldw	r4,-4(fp)
    c7fc:	000c4bc0 	call	c4bc <epcs_write_enable>

  alt_avalon_spi_command(
    c800:	d8000215 	stw	zero,8(sp)
    c804:	d8000115 	stw	zero,4(sp)
    c808:	d8000015 	stw	zero,0(sp)
    c80c:	e1fffe04 	addi	r7,fp,-8
    c810:	01800044 	movi	r6,1
    c814:	000b883a 	mov	r5,zero
    c818:	e13fff17 	ldw	r4,-4(fp)
    c81c:	000d46c0 	call	d46c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    c820:	0001883a 	nop
}
    c824:	e037883a 	mov	sp,fp
    c828:	dfc00117 	ldw	ra,4(sp)
    c82c:	df000017 	ldw	fp,0(sp)
    c830:	dec00204 	addi	sp,sp,8
    c834:	f800283a 	ret

0000c838 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    c838:	defff504 	addi	sp,sp,-44
    c83c:	df000a15 	stw	fp,40(sp)
    c840:	df000a04 	addi	fp,sp,40
    c844:	e13ffc15 	stw	r4,-16(fp)
    c848:	e17ffd15 	stw	r5,-12(fp)
    c84c:	e1bffe15 	stw	r6,-8(fp)
    c850:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    c854:	e03ff615 	stw	zero,-40(fp)
    c858:	d0a51917 	ldw	r2,-27548(gp)
  
  if (alt_ticks_per_second ())
    c85c:	10003c26 	beq	r2,zero,c950 <alt_alarm_start+0x118>
  {
    if (alarm)
    c860:	e0bffc17 	ldw	r2,-16(fp)
    c864:	10003826 	beq	r2,zero,c948 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    c868:	e0bffc17 	ldw	r2,-16(fp)
    c86c:	e0fffe17 	ldw	r3,-8(fp)
    c870:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    c874:	e0bffc17 	ldw	r2,-16(fp)
    c878:	e0ffff17 	ldw	r3,-4(fp)
    c87c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c880:	0005303a 	rdctl	r2,status
    c884:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c888:	e0fff917 	ldw	r3,-28(fp)
    c88c:	00bfff84 	movi	r2,-2
    c890:	1884703a 	and	r2,r3,r2
    c894:	1001703a 	wrctl	status,r2
  
  return context;
    c898:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    c89c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    c8a0:	d0a51a17 	ldw	r2,-27544(gp)
      
      current_nticks = alt_nticks();
    c8a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    c8a8:	e0fffd17 	ldw	r3,-12(fp)
    c8ac:	e0bff617 	ldw	r2,-40(fp)
    c8b0:	1885883a 	add	r2,r3,r2
    c8b4:	10c00044 	addi	r3,r2,1
    c8b8:	e0bffc17 	ldw	r2,-16(fp)
    c8bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    c8c0:	e0bffc17 	ldw	r2,-16(fp)
    c8c4:	10c00217 	ldw	r3,8(r2)
    c8c8:	e0bff617 	ldw	r2,-40(fp)
    c8cc:	1880042e 	bgeu	r3,r2,c8e0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    c8d0:	e0bffc17 	ldw	r2,-16(fp)
    c8d4:	00c00044 	movi	r3,1
    c8d8:	10c00405 	stb	r3,16(r2)
    c8dc:	00000206 	br	c8e8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    c8e0:	e0bffc17 	ldw	r2,-16(fp)
    c8e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    c8e8:	e0bffc17 	ldw	r2,-16(fp)
    c8ec:	d0e00404 	addi	r3,gp,-32752
    c8f0:	e0fffa15 	stw	r3,-24(fp)
    c8f4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c8f8:	e0bffb17 	ldw	r2,-20(fp)
    c8fc:	e0fffa17 	ldw	r3,-24(fp)
    c900:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c904:	e0bffa17 	ldw	r2,-24(fp)
    c908:	10c00017 	ldw	r3,0(r2)
    c90c:	e0bffb17 	ldw	r2,-20(fp)
    c910:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c914:	e0bffa17 	ldw	r2,-24(fp)
    c918:	10800017 	ldw	r2,0(r2)
    c91c:	e0fffb17 	ldw	r3,-20(fp)
    c920:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c924:	e0bffa17 	ldw	r2,-24(fp)
    c928:	e0fffb17 	ldw	r3,-20(fp)
    c92c:	10c00015 	stw	r3,0(r2)
    c930:	e0bff817 	ldw	r2,-32(fp)
    c934:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c938:	e0bff717 	ldw	r2,-36(fp)
    c93c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    c940:	0005883a 	mov	r2,zero
    c944:	00000306 	br	c954 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    c948:	00bffa84 	movi	r2,-22
    c94c:	00000106 	br	c954 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    c950:	00bfde84 	movi	r2,-134
  }
}
    c954:	e037883a 	mov	sp,fp
    c958:	df000017 	ldw	fp,0(sp)
    c95c:	dec00104 	addi	sp,sp,4
    c960:	f800283a 	ret

0000c964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c964:	defffe04 	addi	sp,sp,-8
    c968:	dfc00115 	stw	ra,4(sp)
    c96c:	df000015 	stw	fp,0(sp)
    c970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c974:	d0a00b17 	ldw	r2,-32724(gp)
    c978:	10000326 	beq	r2,zero,c988 <alt_get_errno+0x24>
    c97c:	d0a00b17 	ldw	r2,-32724(gp)
    c980:	103ee83a 	callr	r2
    c984:	00000106 	br	c98c <alt_get_errno+0x28>
    c988:	d0a51104 	addi	r2,gp,-27580
}
    c98c:	e037883a 	mov	sp,fp
    c990:	dfc00117 	ldw	ra,4(sp)
    c994:	df000017 	ldw	fp,0(sp)
    c998:	dec00204 	addi	sp,sp,8
    c99c:	f800283a 	ret

0000c9a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c9a0:	defffb04 	addi	sp,sp,-20
    c9a4:	dfc00415 	stw	ra,16(sp)
    c9a8:	df000315 	stw	fp,12(sp)
    c9ac:	df000304 	addi	fp,sp,12
    c9b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c9b4:	e0bfff17 	ldw	r2,-4(fp)
    c9b8:	10000816 	blt	r2,zero,c9dc <close+0x3c>
    c9bc:	01400304 	movi	r5,12
    c9c0:	e13fff17 	ldw	r4,-4(fp)
    c9c4:	000958c0 	call	958c <__mulsi3>
    c9c8:	1007883a 	mov	r3,r2
    c9cc:	00800074 	movhi	r2,1
    c9d0:	109f8c04 	addi	r2,r2,32304
    c9d4:	1885883a 	add	r2,r3,r2
    c9d8:	00000106 	br	c9e0 <close+0x40>
    c9dc:	0005883a 	mov	r2,zero
    c9e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c9e4:	e0bffd17 	ldw	r2,-12(fp)
    c9e8:	10001926 	beq	r2,zero,ca50 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c9ec:	e0bffd17 	ldw	r2,-12(fp)
    c9f0:	10800017 	ldw	r2,0(r2)
    c9f4:	10800417 	ldw	r2,16(r2)
    c9f8:	10000626 	beq	r2,zero,ca14 <close+0x74>
    c9fc:	e0bffd17 	ldw	r2,-12(fp)
    ca00:	10800017 	ldw	r2,0(r2)
    ca04:	10800417 	ldw	r2,16(r2)
    ca08:	e13ffd17 	ldw	r4,-12(fp)
    ca0c:	103ee83a 	callr	r2
    ca10:	00000106 	br	ca18 <close+0x78>
    ca14:	0005883a 	mov	r2,zero
    ca18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ca1c:	e13fff17 	ldw	r4,-4(fp)
    ca20:	000d3c40 	call	d3c4 <alt_release_fd>
    if (rval < 0)
    ca24:	e0bffe17 	ldw	r2,-8(fp)
    ca28:	1000070e 	bge	r2,zero,ca48 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    ca2c:	000c9640 	call	c964 <alt_get_errno>
    ca30:	1007883a 	mov	r3,r2
    ca34:	e0bffe17 	ldw	r2,-8(fp)
    ca38:	0085c83a 	sub	r2,zero,r2
    ca3c:	18800015 	stw	r2,0(r3)
      return -1;
    ca40:	00bfffc4 	movi	r2,-1
    ca44:	00000706 	br	ca64 <close+0xc4>
    }
    return 0;
    ca48:	0005883a 	mov	r2,zero
    ca4c:	00000506 	br	ca64 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ca50:	000c9640 	call	c964 <alt_get_errno>
    ca54:	1007883a 	mov	r3,r2
    ca58:	00801444 	movi	r2,81
    ca5c:	18800015 	stw	r2,0(r3)
    return -1;
    ca60:	00bfffc4 	movi	r2,-1
  }
}
    ca64:	e037883a 	mov	sp,fp
    ca68:	dfc00117 	ldw	ra,4(sp)
    ca6c:	df000017 	ldw	fp,0(sp)
    ca70:	dec00204 	addi	sp,sp,8
    ca74:	f800283a 	ret

0000ca78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ca78:	deffff04 	addi	sp,sp,-4
    ca7c:	df000015 	stw	fp,0(sp)
    ca80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ca84:	0001883a 	nop
    ca88:	e037883a 	mov	sp,fp
    ca8c:	df000017 	ldw	fp,0(sp)
    ca90:	dec00104 	addi	sp,sp,4
    ca94:	f800283a 	ret

0000ca98 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ca98:	defffc04 	addi	sp,sp,-16
    ca9c:	df000315 	stw	fp,12(sp)
    caa0:	df000304 	addi	fp,sp,12
    caa4:	e13ffd15 	stw	r4,-12(fp)
    caa8:	e17ffe15 	stw	r5,-8(fp)
    caac:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cab0:	e0bfff17 	ldw	r2,-4(fp)
}
    cab4:	e037883a 	mov	sp,fp
    cab8:	df000017 	ldw	fp,0(sp)
    cabc:	dec00104 	addi	sp,sp,4
    cac0:	f800283a 	ret

0000cac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cac4:	defffe04 	addi	sp,sp,-8
    cac8:	dfc00115 	stw	ra,4(sp)
    cacc:	df000015 	stw	fp,0(sp)
    cad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cad4:	d0a00b17 	ldw	r2,-32724(gp)
    cad8:	10000326 	beq	r2,zero,cae8 <alt_get_errno+0x24>
    cadc:	d0a00b17 	ldw	r2,-32724(gp)
    cae0:	103ee83a 	callr	r2
    cae4:	00000106 	br	caec <alt_get_errno+0x28>
    cae8:	d0a51104 	addi	r2,gp,-27580
}
    caec:	e037883a 	mov	sp,fp
    caf0:	dfc00117 	ldw	ra,4(sp)
    caf4:	df000017 	ldw	fp,0(sp)
    caf8:	dec00204 	addi	sp,sp,8
    cafc:	f800283a 	ret

0000cb00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    cb00:	defffa04 	addi	sp,sp,-24
    cb04:	dfc00515 	stw	ra,20(sp)
    cb08:	df000415 	stw	fp,16(sp)
    cb0c:	df000404 	addi	fp,sp,16
    cb10:	e13ffe15 	stw	r4,-8(fp)
    cb14:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    cb18:	e0bffe17 	ldw	r2,-8(fp)
    cb1c:	10000326 	beq	r2,zero,cb2c <alt_dev_llist_insert+0x2c>
    cb20:	e0bffe17 	ldw	r2,-8(fp)
    cb24:	10800217 	ldw	r2,8(r2)
    cb28:	1000061e 	bne	r2,zero,cb44 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    cb2c:	000cac40 	call	cac4 <alt_get_errno>
    cb30:	1007883a 	mov	r3,r2
    cb34:	00800584 	movi	r2,22
    cb38:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    cb3c:	00bffa84 	movi	r2,-22
    cb40:	00001306 	br	cb90 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cb44:	e0bffe17 	ldw	r2,-8(fp)
    cb48:	e0ffff17 	ldw	r3,-4(fp)
    cb4c:	e0fffc15 	stw	r3,-16(fp)
    cb50:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cb54:	e0bffd17 	ldw	r2,-12(fp)
    cb58:	e0fffc17 	ldw	r3,-16(fp)
    cb5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    cb60:	e0bffc17 	ldw	r2,-16(fp)
    cb64:	10c00017 	ldw	r3,0(r2)
    cb68:	e0bffd17 	ldw	r2,-12(fp)
    cb6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cb70:	e0bffc17 	ldw	r2,-16(fp)
    cb74:	10800017 	ldw	r2,0(r2)
    cb78:	e0fffd17 	ldw	r3,-12(fp)
    cb7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    cb80:	e0bffc17 	ldw	r2,-16(fp)
    cb84:	e0fffd17 	ldw	r3,-12(fp)
    cb88:	10c00015 	stw	r3,0(r2)

  return 0;  
    cb8c:	0005883a 	mov	r2,zero
}
    cb90:	e037883a 	mov	sp,fp
    cb94:	dfc00117 	ldw	ra,4(sp)
    cb98:	df000017 	ldw	fp,0(sp)
    cb9c:	dec00204 	addi	sp,sp,8
    cba0:	f800283a 	ret

0000cba4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    cba4:	defffd04 	addi	sp,sp,-12
    cba8:	dfc00215 	stw	ra,8(sp)
    cbac:	df000115 	stw	fp,4(sp)
    cbb0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cbb4:	00800074 	movhi	r2,1
    cbb8:	10b8a804 	addi	r2,r2,-7520
    cbbc:	e0bfff15 	stw	r2,-4(fp)
    cbc0:	00000606 	br	cbdc <_do_ctors+0x38>
        (*ctor) (); 
    cbc4:	e0bfff17 	ldw	r2,-4(fp)
    cbc8:	10800017 	ldw	r2,0(r2)
    cbcc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cbd0:	e0bfff17 	ldw	r2,-4(fp)
    cbd4:	10bfff04 	addi	r2,r2,-4
    cbd8:	e0bfff15 	stw	r2,-4(fp)
    cbdc:	e0ffff17 	ldw	r3,-4(fp)
    cbe0:	00800074 	movhi	r2,1
    cbe4:	10b8a904 	addi	r2,r2,-7516
    cbe8:	18bff62e 	bgeu	r3,r2,cbc4 <__alt_mem_epcs_flash_controller+0xfe003bc4>
        (*ctor) (); 
}
    cbec:	0001883a 	nop
    cbf0:	e037883a 	mov	sp,fp
    cbf4:	dfc00117 	ldw	ra,4(sp)
    cbf8:	df000017 	ldw	fp,0(sp)
    cbfc:	dec00204 	addi	sp,sp,8
    cc00:	f800283a 	ret

0000cc04 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    cc04:	defffd04 	addi	sp,sp,-12
    cc08:	dfc00215 	stw	ra,8(sp)
    cc0c:	df000115 	stw	fp,4(sp)
    cc10:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cc14:	00800074 	movhi	r2,1
    cc18:	10b8a804 	addi	r2,r2,-7520
    cc1c:	e0bfff15 	stw	r2,-4(fp)
    cc20:	00000606 	br	cc3c <_do_dtors+0x38>
        (*dtor) (); 
    cc24:	e0bfff17 	ldw	r2,-4(fp)
    cc28:	10800017 	ldw	r2,0(r2)
    cc2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cc30:	e0bfff17 	ldw	r2,-4(fp)
    cc34:	10bfff04 	addi	r2,r2,-4
    cc38:	e0bfff15 	stw	r2,-4(fp)
    cc3c:	e0ffff17 	ldw	r3,-4(fp)
    cc40:	00800074 	movhi	r2,1
    cc44:	10b8a904 	addi	r2,r2,-7516
    cc48:	18bff62e 	bgeu	r3,r2,cc24 <__alt_mem_epcs_flash_controller+0xfe003c24>
        (*dtor) (); 
}
    cc4c:	0001883a 	nop
    cc50:	e037883a 	mov	sp,fp
    cc54:	dfc00117 	ldw	ra,4(sp)
    cc58:	df000017 	ldw	fp,0(sp)
    cc5c:	dec00204 	addi	sp,sp,8
    cc60:	f800283a 	ret

0000cc64 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    cc64:	defffc04 	addi	sp,sp,-16
    cc68:	dfc00315 	stw	ra,12(sp)
    cc6c:	df000215 	stw	fp,8(sp)
    cc70:	df000204 	addi	fp,sp,8
    cc74:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    cc78:	d1600c04 	addi	r5,gp,-32720
    cc7c:	e13fff17 	ldw	r4,-4(fp)
    cc80:	000d6680 	call	d668 <alt_find_dev>
    cc84:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
    cc88:	e0bffe17 	ldw	r2,-8(fp)
    cc8c:	10000926 	beq	r2,zero,ccb4 <alt_flash_open_dev+0x50>
    cc90:	e0bffe17 	ldw	r2,-8(fp)
    cc94:	10800317 	ldw	r2,12(r2)
    cc98:	10000626 	beq	r2,zero,ccb4 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
    cc9c:	e0bffe17 	ldw	r2,-8(fp)
    cca0:	10800317 	ldw	r2,12(r2)
    cca4:	e17fff17 	ldw	r5,-4(fp)
    cca8:	e13ffe17 	ldw	r4,-8(fp)
    ccac:	103ee83a 	callr	r2
    ccb0:	00000106 	br	ccb8 <alt_flash_open_dev+0x54>
  }

  return dev;
    ccb4:	e0bffe17 	ldw	r2,-8(fp)
}
    ccb8:	e037883a 	mov	sp,fp
    ccbc:	dfc00117 	ldw	ra,4(sp)
    ccc0:	df000017 	ldw	fp,0(sp)
    ccc4:	dec00204 	addi	sp,sp,8
    ccc8:	f800283a 	ret

0000cccc <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    cccc:	defffd04 	addi	sp,sp,-12
    ccd0:	dfc00215 	stw	ra,8(sp)
    ccd4:	df000115 	stw	fp,4(sp)
    ccd8:	df000104 	addi	fp,sp,4
    ccdc:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    cce0:	e0bfff17 	ldw	r2,-4(fp)
    cce4:	10000826 	beq	r2,zero,cd08 <alt_flash_close_dev+0x3c>
    cce8:	e0bfff17 	ldw	r2,-4(fp)
    ccec:	10800417 	ldw	r2,16(r2)
    ccf0:	10000526 	beq	r2,zero,cd08 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
    ccf4:	e0bfff17 	ldw	r2,-4(fp)
    ccf8:	10800417 	ldw	r2,16(r2)
    ccfc:	e13fff17 	ldw	r4,-4(fp)
    cd00:	103ee83a 	callr	r2
  }
  return;
    cd04:	0001883a 	nop
    cd08:	0001883a 	nop
}
    cd0c:	e037883a 	mov	sp,fp
    cd10:	dfc00117 	ldw	ra,4(sp)
    cd14:	df000017 	ldw	fp,0(sp)
    cd18:	dec00204 	addi	sp,sp,8
    cd1c:	f800283a 	ret

0000cd20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cd20:	deffff04 	addi	sp,sp,-4
    cd24:	df000015 	stw	fp,0(sp)
    cd28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    cd2c:	0001883a 	nop
    cd30:	e037883a 	mov	sp,fp
    cd34:	df000017 	ldw	fp,0(sp)
    cd38:	dec00104 	addi	sp,sp,4
    cd3c:	f800283a 	ret

0000cd40 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cd40:	defff904 	addi	sp,sp,-28
    cd44:	dfc00615 	stw	ra,24(sp)
    cd48:	df000515 	stw	fp,20(sp)
    cd4c:	df000504 	addi	fp,sp,20
    cd50:	e13ffc15 	stw	r4,-16(fp)
    cd54:	e17ffd15 	stw	r5,-12(fp)
    cd58:	e1bffe15 	stw	r6,-8(fp)
    cd5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    cd60:	e0800217 	ldw	r2,8(fp)
    cd64:	d8800015 	stw	r2,0(sp)
    cd68:	e1ffff17 	ldw	r7,-4(fp)
    cd6c:	e1bffe17 	ldw	r6,-8(fp)
    cd70:	e17ffd17 	ldw	r5,-12(fp)
    cd74:	e13ffc17 	ldw	r4,-16(fp)
    cd78:	000cef00 	call	cef0 <alt_iic_isr_register>
}  
    cd7c:	e037883a 	mov	sp,fp
    cd80:	dfc00117 	ldw	ra,4(sp)
    cd84:	df000017 	ldw	fp,0(sp)
    cd88:	dec00204 	addi	sp,sp,8
    cd8c:	f800283a 	ret

0000cd90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    cd90:	defff904 	addi	sp,sp,-28
    cd94:	df000615 	stw	fp,24(sp)
    cd98:	df000604 	addi	fp,sp,24
    cd9c:	e13ffe15 	stw	r4,-8(fp)
    cda0:	e17fff15 	stw	r5,-4(fp)
    cda4:	e0bfff17 	ldw	r2,-4(fp)
    cda8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cdac:	0005303a 	rdctl	r2,status
    cdb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cdb4:	e0fffb17 	ldw	r3,-20(fp)
    cdb8:	00bfff84 	movi	r2,-2
    cdbc:	1884703a 	and	r2,r3,r2
    cdc0:	1001703a 	wrctl	status,r2
  
  return context;
    cdc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cdc8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    cdcc:	00c00044 	movi	r3,1
    cdd0:	e0bffa17 	ldw	r2,-24(fp)
    cdd4:	1884983a 	sll	r2,r3,r2
    cdd8:	1007883a 	mov	r3,r2
    cddc:	d0a51b17 	ldw	r2,-27540(gp)
    cde0:	1884b03a 	or	r2,r3,r2
    cde4:	d0a51b15 	stw	r2,-27540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cde8:	d0a51b17 	ldw	r2,-27540(gp)
    cdec:	100170fa 	wrctl	ienable,r2
    cdf0:	e0bffc17 	ldw	r2,-16(fp)
    cdf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cdf8:	e0bffd17 	ldw	r2,-12(fp)
    cdfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ce00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ce04:	0001883a 	nop
}
    ce08:	e037883a 	mov	sp,fp
    ce0c:	df000017 	ldw	fp,0(sp)
    ce10:	dec00104 	addi	sp,sp,4
    ce14:	f800283a 	ret

0000ce18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ce18:	defff904 	addi	sp,sp,-28
    ce1c:	df000615 	stw	fp,24(sp)
    ce20:	df000604 	addi	fp,sp,24
    ce24:	e13ffe15 	stw	r4,-8(fp)
    ce28:	e17fff15 	stw	r5,-4(fp)
    ce2c:	e0bfff17 	ldw	r2,-4(fp)
    ce30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce34:	0005303a 	rdctl	r2,status
    ce38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce3c:	e0fffb17 	ldw	r3,-20(fp)
    ce40:	00bfff84 	movi	r2,-2
    ce44:	1884703a 	and	r2,r3,r2
    ce48:	1001703a 	wrctl	status,r2
  
  return context;
    ce4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ce50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ce54:	00c00044 	movi	r3,1
    ce58:	e0bffa17 	ldw	r2,-24(fp)
    ce5c:	1884983a 	sll	r2,r3,r2
    ce60:	0084303a 	nor	r2,zero,r2
    ce64:	1007883a 	mov	r3,r2
    ce68:	d0a51b17 	ldw	r2,-27540(gp)
    ce6c:	1884703a 	and	r2,r3,r2
    ce70:	d0a51b15 	stw	r2,-27540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ce74:	d0a51b17 	ldw	r2,-27540(gp)
    ce78:	100170fa 	wrctl	ienable,r2
    ce7c:	e0bffc17 	ldw	r2,-16(fp)
    ce80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce84:	e0bffd17 	ldw	r2,-12(fp)
    ce88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ce8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ce90:	0001883a 	nop
}
    ce94:	e037883a 	mov	sp,fp
    ce98:	df000017 	ldw	fp,0(sp)
    ce9c:	dec00104 	addi	sp,sp,4
    cea0:	f800283a 	ret

0000cea4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    cea4:	defffc04 	addi	sp,sp,-16
    cea8:	df000315 	stw	fp,12(sp)
    ceac:	df000304 	addi	fp,sp,12
    ceb0:	e13ffe15 	stw	r4,-8(fp)
    ceb4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ceb8:	000530fa 	rdctl	r2,ienable
    cebc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    cec0:	00c00044 	movi	r3,1
    cec4:	e0bfff17 	ldw	r2,-4(fp)
    cec8:	1884983a 	sll	r2,r3,r2
    cecc:	1007883a 	mov	r3,r2
    ced0:	e0bffd17 	ldw	r2,-12(fp)
    ced4:	1884703a 	and	r2,r3,r2
    ced8:	1004c03a 	cmpne	r2,r2,zero
    cedc:	10803fcc 	andi	r2,r2,255
}
    cee0:	e037883a 	mov	sp,fp
    cee4:	df000017 	ldw	fp,0(sp)
    cee8:	dec00104 	addi	sp,sp,4
    ceec:	f800283a 	ret

0000cef0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cef0:	defff504 	addi	sp,sp,-44
    cef4:	dfc00a15 	stw	ra,40(sp)
    cef8:	df000915 	stw	fp,36(sp)
    cefc:	df000904 	addi	fp,sp,36
    cf00:	e13ffc15 	stw	r4,-16(fp)
    cf04:	e17ffd15 	stw	r5,-12(fp)
    cf08:	e1bffe15 	stw	r6,-8(fp)
    cf0c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    cf10:	00bffa84 	movi	r2,-22
    cf14:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    cf18:	e0bffd17 	ldw	r2,-12(fp)
    cf1c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cf20:	e0bff817 	ldw	r2,-32(fp)
    cf24:	10800808 	cmpgei	r2,r2,32
    cf28:	1000271e 	bne	r2,zero,cfc8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf2c:	0005303a 	rdctl	r2,status
    cf30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf34:	e0fffb17 	ldw	r3,-20(fp)
    cf38:	00bfff84 	movi	r2,-2
    cf3c:	1884703a 	and	r2,r3,r2
    cf40:	1001703a 	wrctl	status,r2
  
  return context;
    cf44:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    cf48:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    cf4c:	008000b4 	movhi	r2,2
    cf50:	10a7ef04 	addi	r2,r2,-24644
    cf54:	e0fff817 	ldw	r3,-32(fp)
    cf58:	180690fa 	slli	r3,r3,3
    cf5c:	10c5883a 	add	r2,r2,r3
    cf60:	e0fffe17 	ldw	r3,-8(fp)
    cf64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    cf68:	008000b4 	movhi	r2,2
    cf6c:	10a7ef04 	addi	r2,r2,-24644
    cf70:	e0fff817 	ldw	r3,-32(fp)
    cf74:	180690fa 	slli	r3,r3,3
    cf78:	10c5883a 	add	r2,r2,r3
    cf7c:	10800104 	addi	r2,r2,4
    cf80:	e0ffff17 	ldw	r3,-4(fp)
    cf84:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    cf88:	e0bffe17 	ldw	r2,-8(fp)
    cf8c:	10000526 	beq	r2,zero,cfa4 <alt_iic_isr_register+0xb4>
    cf90:	e0bff817 	ldw	r2,-32(fp)
    cf94:	100b883a 	mov	r5,r2
    cf98:	e13ffc17 	ldw	r4,-16(fp)
    cf9c:	000cd900 	call	cd90 <alt_ic_irq_enable>
    cfa0:	00000406 	br	cfb4 <alt_iic_isr_register+0xc4>
    cfa4:	e0bff817 	ldw	r2,-32(fp)
    cfa8:	100b883a 	mov	r5,r2
    cfac:	e13ffc17 	ldw	r4,-16(fp)
    cfb0:	000ce180 	call	ce18 <alt_ic_irq_disable>
    cfb4:	e0bff715 	stw	r2,-36(fp)
    cfb8:	e0bffa17 	ldw	r2,-24(fp)
    cfbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cfc0:	e0bff917 	ldw	r2,-28(fp)
    cfc4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    cfc8:	e0bff717 	ldw	r2,-36(fp)
}
    cfcc:	e037883a 	mov	sp,fp
    cfd0:	dfc00117 	ldw	ra,4(sp)
    cfd4:	df000017 	ldw	fp,0(sp)
    cfd8:	dec00204 	addi	sp,sp,8
    cfdc:	f800283a 	ret

0000cfe0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    cfe0:	defff804 	addi	sp,sp,-32
    cfe4:	dfc00715 	stw	ra,28(sp)
    cfe8:	df000615 	stw	fp,24(sp)
    cfec:	dc000515 	stw	r16,20(sp)
    cff0:	df000604 	addi	fp,sp,24
    cff4:	e13ffb15 	stw	r4,-20(fp)
    cff8:	e17ffc15 	stw	r5,-16(fp)
    cffc:	e1bffd15 	stw	r6,-12(fp)
    d000:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    d004:	e1bffe17 	ldw	r6,-8(fp)
    d008:	e17ffd17 	ldw	r5,-12(fp)
    d00c:	e13ffc17 	ldw	r4,-16(fp)
    d010:	000d2680 	call	d268 <open>
    d014:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    d018:	e0bffa17 	ldw	r2,-24(fp)
    d01c:	10002216 	blt	r2,zero,d0a8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    d020:	04000074 	movhi	r16,1
    d024:	841f8c04 	addi	r16,r16,32304
    d028:	e0bffa17 	ldw	r2,-24(fp)
    d02c:	01400304 	movi	r5,12
    d030:	1009883a 	mov	r4,r2
    d034:	000958c0 	call	958c <__mulsi3>
    d038:	8085883a 	add	r2,r16,r2
    d03c:	10c00017 	ldw	r3,0(r2)
    d040:	e0bffb17 	ldw	r2,-20(fp)
    d044:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d048:	04000074 	movhi	r16,1
    d04c:	841f8c04 	addi	r16,r16,32304
    d050:	e0bffa17 	ldw	r2,-24(fp)
    d054:	01400304 	movi	r5,12
    d058:	1009883a 	mov	r4,r2
    d05c:	000958c0 	call	958c <__mulsi3>
    d060:	8085883a 	add	r2,r16,r2
    d064:	10800104 	addi	r2,r2,4
    d068:	10c00017 	ldw	r3,0(r2)
    d06c:	e0bffb17 	ldw	r2,-20(fp)
    d070:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d074:	04000074 	movhi	r16,1
    d078:	841f8c04 	addi	r16,r16,32304
    d07c:	e0bffa17 	ldw	r2,-24(fp)
    d080:	01400304 	movi	r5,12
    d084:	1009883a 	mov	r4,r2
    d088:	000958c0 	call	958c <__mulsi3>
    d08c:	8085883a 	add	r2,r16,r2
    d090:	10800204 	addi	r2,r2,8
    d094:	10c00017 	ldw	r3,0(r2)
    d098:	e0bffb17 	ldw	r2,-20(fp)
    d09c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d0a0:	e13ffa17 	ldw	r4,-24(fp)
    d0a4:	000d3c40 	call	d3c4 <alt_release_fd>
  }
} 
    d0a8:	0001883a 	nop
    d0ac:	e6ffff04 	addi	sp,fp,-4
    d0b0:	dfc00217 	ldw	ra,8(sp)
    d0b4:	df000117 	ldw	fp,4(sp)
    d0b8:	dc000017 	ldw	r16,0(sp)
    d0bc:	dec00304 	addi	sp,sp,12
    d0c0:	f800283a 	ret

0000d0c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d0c4:	defffb04 	addi	sp,sp,-20
    d0c8:	dfc00415 	stw	ra,16(sp)
    d0cc:	df000315 	stw	fp,12(sp)
    d0d0:	df000304 	addi	fp,sp,12
    d0d4:	e13ffd15 	stw	r4,-12(fp)
    d0d8:	e17ffe15 	stw	r5,-8(fp)
    d0dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d0e0:	01c07fc4 	movi	r7,511
    d0e4:	01800044 	movi	r6,1
    d0e8:	e17ffd17 	ldw	r5,-12(fp)
    d0ec:	01000074 	movhi	r4,1
    d0f0:	211f8f04 	addi	r4,r4,32316
    d0f4:	000cfe00 	call	cfe0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d0f8:	01c07fc4 	movi	r7,511
    d0fc:	000d883a 	mov	r6,zero
    d100:	e17ffe17 	ldw	r5,-8(fp)
    d104:	01000074 	movhi	r4,1
    d108:	211f8c04 	addi	r4,r4,32304
    d10c:	000cfe00 	call	cfe0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d110:	01c07fc4 	movi	r7,511
    d114:	01800044 	movi	r6,1
    d118:	e17fff17 	ldw	r5,-4(fp)
    d11c:	01000074 	movhi	r4,1
    d120:	211f9204 	addi	r4,r4,32328
    d124:	000cfe00 	call	cfe0 <alt_open_fd>
}  
    d128:	0001883a 	nop
    d12c:	e037883a 	mov	sp,fp
    d130:	dfc00117 	ldw	ra,4(sp)
    d134:	df000017 	ldw	fp,0(sp)
    d138:	dec00204 	addi	sp,sp,8
    d13c:	f800283a 	ret

0000d140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d140:	defffe04 	addi	sp,sp,-8
    d144:	dfc00115 	stw	ra,4(sp)
    d148:	df000015 	stw	fp,0(sp)
    d14c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d150:	d0a00b17 	ldw	r2,-32724(gp)
    d154:	10000326 	beq	r2,zero,d164 <alt_get_errno+0x24>
    d158:	d0a00b17 	ldw	r2,-32724(gp)
    d15c:	103ee83a 	callr	r2
    d160:	00000106 	br	d168 <alt_get_errno+0x28>
    d164:	d0a51104 	addi	r2,gp,-27580
}
    d168:	e037883a 	mov	sp,fp
    d16c:	dfc00117 	ldw	ra,4(sp)
    d170:	df000017 	ldw	fp,0(sp)
    d174:	dec00204 	addi	sp,sp,8
    d178:	f800283a 	ret

0000d17c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d17c:	defffb04 	addi	sp,sp,-20
    d180:	dfc00415 	stw	ra,16(sp)
    d184:	df000315 	stw	fp,12(sp)
    d188:	dc000215 	stw	r16,8(sp)
    d18c:	df000304 	addi	fp,sp,12
    d190:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d194:	e0bffe17 	ldw	r2,-8(fp)
    d198:	10800217 	ldw	r2,8(r2)
    d19c:	10d00034 	orhi	r3,r2,16384
    d1a0:	e0bffe17 	ldw	r2,-8(fp)
    d1a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d1a8:	e03ffd15 	stw	zero,-12(fp)
    d1ac:	00002306 	br	d23c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d1b0:	04000074 	movhi	r16,1
    d1b4:	841f8c04 	addi	r16,r16,32304
    d1b8:	e0bffd17 	ldw	r2,-12(fp)
    d1bc:	01400304 	movi	r5,12
    d1c0:	1009883a 	mov	r4,r2
    d1c4:	000958c0 	call	958c <__mulsi3>
    d1c8:	8085883a 	add	r2,r16,r2
    d1cc:	10c00017 	ldw	r3,0(r2)
    d1d0:	e0bffe17 	ldw	r2,-8(fp)
    d1d4:	10800017 	ldw	r2,0(r2)
    d1d8:	1880151e 	bne	r3,r2,d230 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d1dc:	04000074 	movhi	r16,1
    d1e0:	841f8c04 	addi	r16,r16,32304
    d1e4:	e0bffd17 	ldw	r2,-12(fp)
    d1e8:	01400304 	movi	r5,12
    d1ec:	1009883a 	mov	r4,r2
    d1f0:	000958c0 	call	958c <__mulsi3>
    d1f4:	8085883a 	add	r2,r16,r2
    d1f8:	10800204 	addi	r2,r2,8
    d1fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d200:	10000b0e 	bge	r2,zero,d230 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d204:	01400304 	movi	r5,12
    d208:	e13ffd17 	ldw	r4,-12(fp)
    d20c:	000958c0 	call	958c <__mulsi3>
    d210:	1007883a 	mov	r3,r2
    d214:	00800074 	movhi	r2,1
    d218:	109f8c04 	addi	r2,r2,32304
    d21c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d220:	e0bffe17 	ldw	r2,-8(fp)
    d224:	18800226 	beq	r3,r2,d230 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d228:	00bffcc4 	movi	r2,-13
    d22c:	00000806 	br	d250 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d230:	e0bffd17 	ldw	r2,-12(fp)
    d234:	10800044 	addi	r2,r2,1
    d238:	e0bffd15 	stw	r2,-12(fp)
    d23c:	d0a00a17 	ldw	r2,-32728(gp)
    d240:	1007883a 	mov	r3,r2
    d244:	e0bffd17 	ldw	r2,-12(fp)
    d248:	18bfd92e 	bgeu	r3,r2,d1b0 <__alt_mem_epcs_flash_controller+0xfe0041b0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d24c:	0005883a 	mov	r2,zero
}
    d250:	e6ffff04 	addi	sp,fp,-4
    d254:	dfc00217 	ldw	ra,8(sp)
    d258:	df000117 	ldw	fp,4(sp)
    d25c:	dc000017 	ldw	r16,0(sp)
    d260:	dec00304 	addi	sp,sp,12
    d264:	f800283a 	ret

0000d268 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d268:	defff604 	addi	sp,sp,-40
    d26c:	dfc00915 	stw	ra,36(sp)
    d270:	df000815 	stw	fp,32(sp)
    d274:	df000804 	addi	fp,sp,32
    d278:	e13ffd15 	stw	r4,-12(fp)
    d27c:	e17ffe15 	stw	r5,-8(fp)
    d280:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d284:	00bfffc4 	movi	r2,-1
    d288:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d28c:	00bffb44 	movi	r2,-19
    d290:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d294:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d298:	d1600804 	addi	r5,gp,-32736
    d29c:	e13ffd17 	ldw	r4,-12(fp)
    d2a0:	000d6680 	call	d668 <alt_find_dev>
    d2a4:	e0bff815 	stw	r2,-32(fp)
    d2a8:	e0bff817 	ldw	r2,-32(fp)
    d2ac:	1000051e 	bne	r2,zero,d2c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d2b0:	e13ffd17 	ldw	r4,-12(fp)
    d2b4:	000d6f80 	call	d6f8 <alt_find_file>
    d2b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d2bc:	00800044 	movi	r2,1
    d2c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d2c4:	e0bff817 	ldw	r2,-32(fp)
    d2c8:	10002b26 	beq	r2,zero,d378 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d2cc:	e13ff817 	ldw	r4,-32(fp)
    d2d0:	000d8000 	call	d800 <alt_get_fd>
    d2d4:	e0bff915 	stw	r2,-28(fp)
    d2d8:	e0bff917 	ldw	r2,-28(fp)
    d2dc:	1000030e 	bge	r2,zero,d2ec <open+0x84>
    {
      status = index;
    d2e0:	e0bff917 	ldw	r2,-28(fp)
    d2e4:	e0bffa15 	stw	r2,-24(fp)
    d2e8:	00002506 	br	d380 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    d2ec:	01400304 	movi	r5,12
    d2f0:	e13ff917 	ldw	r4,-28(fp)
    d2f4:	000958c0 	call	958c <__mulsi3>
    d2f8:	1007883a 	mov	r3,r2
    d2fc:	00800074 	movhi	r2,1
    d300:	109f8c04 	addi	r2,r2,32304
    d304:	1885883a 	add	r2,r3,r2
    d308:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d30c:	e0fffe17 	ldw	r3,-8(fp)
    d310:	00900034 	movhi	r2,16384
    d314:	10bfffc4 	addi	r2,r2,-1
    d318:	1886703a 	and	r3,r3,r2
    d31c:	e0bffc17 	ldw	r2,-16(fp)
    d320:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d324:	e0bffb17 	ldw	r2,-20(fp)
    d328:	1000051e 	bne	r2,zero,d340 <open+0xd8>
    d32c:	e13ffc17 	ldw	r4,-16(fp)
    d330:	000d17c0 	call	d17c <alt_file_locked>
    d334:	e0bffa15 	stw	r2,-24(fp)
    d338:	e0bffa17 	ldw	r2,-24(fp)
    d33c:	10001016 	blt	r2,zero,d380 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d340:	e0bff817 	ldw	r2,-32(fp)
    d344:	10800317 	ldw	r2,12(r2)
    d348:	10000826 	beq	r2,zero,d36c <open+0x104>
    d34c:	e0bff817 	ldw	r2,-32(fp)
    d350:	10800317 	ldw	r2,12(r2)
    d354:	e1ffff17 	ldw	r7,-4(fp)
    d358:	e1bffe17 	ldw	r6,-8(fp)
    d35c:	e17ffd17 	ldw	r5,-12(fp)
    d360:	e13ffc17 	ldw	r4,-16(fp)
    d364:	103ee83a 	callr	r2
    d368:	00000106 	br	d370 <open+0x108>
    d36c:	0005883a 	mov	r2,zero
    d370:	e0bffa15 	stw	r2,-24(fp)
    d374:	00000206 	br	d380 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d378:	00bffb44 	movi	r2,-19
    d37c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d380:	e0bffa17 	ldw	r2,-24(fp)
    d384:	1000090e 	bge	r2,zero,d3ac <open+0x144>
  {
    alt_release_fd (index);  
    d388:	e13ff917 	ldw	r4,-28(fp)
    d38c:	000d3c40 	call	d3c4 <alt_release_fd>
    ALT_ERRNO = -status;
    d390:	000d1400 	call	d140 <alt_get_errno>
    d394:	1007883a 	mov	r3,r2
    d398:	e0bffa17 	ldw	r2,-24(fp)
    d39c:	0085c83a 	sub	r2,zero,r2
    d3a0:	18800015 	stw	r2,0(r3)
    return -1;
    d3a4:	00bfffc4 	movi	r2,-1
    d3a8:	00000106 	br	d3b0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    d3ac:	e0bff917 	ldw	r2,-28(fp)
}
    d3b0:	e037883a 	mov	sp,fp
    d3b4:	dfc00117 	ldw	ra,4(sp)
    d3b8:	df000017 	ldw	fp,0(sp)
    d3bc:	dec00204 	addi	sp,sp,8
    d3c0:	f800283a 	ret

0000d3c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d3c4:	defffc04 	addi	sp,sp,-16
    d3c8:	dfc00315 	stw	ra,12(sp)
    d3cc:	df000215 	stw	fp,8(sp)
    d3d0:	dc000115 	stw	r16,4(sp)
    d3d4:	df000204 	addi	fp,sp,8
    d3d8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    d3dc:	e0bffe17 	ldw	r2,-8(fp)
    d3e0:	108000d0 	cmplti	r2,r2,3
    d3e4:	1000111e 	bne	r2,zero,d42c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    d3e8:	04000074 	movhi	r16,1
    d3ec:	841f8c04 	addi	r16,r16,32304
    d3f0:	e0bffe17 	ldw	r2,-8(fp)
    d3f4:	01400304 	movi	r5,12
    d3f8:	1009883a 	mov	r4,r2
    d3fc:	000958c0 	call	958c <__mulsi3>
    d400:	8085883a 	add	r2,r16,r2
    d404:	10800204 	addi	r2,r2,8
    d408:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d40c:	04000074 	movhi	r16,1
    d410:	841f8c04 	addi	r16,r16,32304
    d414:	e0bffe17 	ldw	r2,-8(fp)
    d418:	01400304 	movi	r5,12
    d41c:	1009883a 	mov	r4,r2
    d420:	000958c0 	call	958c <__mulsi3>
    d424:	8085883a 	add	r2,r16,r2
    d428:	10000015 	stw	zero,0(r2)
  }
}
    d42c:	0001883a 	nop
    d430:	e6ffff04 	addi	sp,fp,-4
    d434:	dfc00217 	ldw	ra,8(sp)
    d438:	df000117 	ldw	fp,4(sp)
    d43c:	dc000017 	ldw	r16,0(sp)
    d440:	dec00304 	addi	sp,sp,12
    d444:	f800283a 	ret

0000d448 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    d448:	deffff04 	addi	sp,sp,-4
    d44c:	df000015 	stw	fp,0(sp)
    d450:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d454:	000170fa 	wrctl	ienable,zero
}
    d458:	0001883a 	nop
    d45c:	e037883a 	mov	sp,fp
    d460:	df000017 	ldw	fp,0(sp)
    d464:	dec00104 	addi	sp,sp,4
    d468:	f800283a 	ret

0000d46c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    d46c:	defff404 	addi	sp,sp,-48
    d470:	df000b15 	stw	fp,44(sp)
    d474:	df000b04 	addi	fp,sp,44
    d478:	e13ffc15 	stw	r4,-16(fp)
    d47c:	e17ffd15 	stw	r5,-12(fp)
    d480:	e1bffe15 	stw	r6,-8(fp)
    d484:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    d488:	e0ffff17 	ldw	r3,-4(fp)
    d48c:	e0bffe17 	ldw	r2,-8(fp)
    d490:	1885883a 	add	r2,r3,r2
    d494:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    d498:	e0c00217 	ldw	r3,8(fp)
    d49c:	e0800117 	ldw	r2,4(fp)
    d4a0:	1885883a 	add	r2,r3,r2
    d4a4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    d4a8:	e0800117 	ldw	r2,4(fp)
    d4ac:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    d4b0:	e0bffe17 	ldw	r2,-8(fp)
    d4b4:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    d4b8:	00800044 	movi	r2,1
    d4bc:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    d4c0:	e0bffc17 	ldw	r2,-16(fp)
    d4c4:	10800504 	addi	r2,r2,20
    d4c8:	1009883a 	mov	r4,r2
    d4cc:	00c00044 	movi	r3,1
    d4d0:	e0bffd17 	ldw	r2,-12(fp)
    d4d4:	1884983a 	sll	r2,r3,r2
    d4d8:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    d4dc:	e0800317 	ldw	r2,12(fp)
    d4e0:	1080008c 	andi	r2,r2,2
    d4e4:	1000051e 	bne	r2,zero,d4fc <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    d4e8:	e0bffc17 	ldw	r2,-16(fp)
    d4ec:	10800304 	addi	r2,r2,12
    d4f0:	1007883a 	mov	r3,r2
    d4f4:	00810004 	movi	r2,1024
    d4f8:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    d4fc:	e0bffc17 	ldw	r2,-16(fp)
    d500:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    d504:	e0bffc17 	ldw	r2,-16(fp)
    d508:	10800204 	addi	r2,r2,8
    d50c:	10800037 	ldwio	r2,0(r2)
    d510:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    d514:	e0bffa17 	ldw	r2,-24(fp)
    d518:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    d51c:	10000226 	beq	r2,zero,d528 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    d520:	e0bff717 	ldw	r2,-36(fp)
    d524:	1000031e 	bne	r2,zero,d534 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    d528:	e0bffa17 	ldw	r2,-24(fp)
    d52c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    d530:	103ff426 	beq	r2,zero,d504 <__alt_mem_epcs_flash_controller+0xfe004504>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    d534:	e0bffa17 	ldw	r2,-24(fp)
    d538:	1080100c 	andi	r2,r2,64
    d53c:	10001e26 	beq	r2,zero,d5b8 <alt_avalon_spi_command+0x14c>
    d540:	e0bff717 	ldw	r2,-36(fp)
    d544:	00801c0e 	bge	zero,r2,d5b8 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    d548:	e0bff717 	ldw	r2,-36(fp)
    d54c:	10bfffc4 	addi	r2,r2,-1
    d550:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    d554:	e0ffff17 	ldw	r3,-4(fp)
    d558:	e0bff817 	ldw	r2,-32(fp)
    d55c:	18800a2e 	bgeu	r3,r2,d588 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    d560:	e0bffc17 	ldw	r2,-16(fp)
    d564:	10800104 	addi	r2,r2,4
    d568:	1009883a 	mov	r4,r2
    d56c:	e0bfff17 	ldw	r2,-4(fp)
    d570:	10c00044 	addi	r3,r2,1
    d574:	e0ffff15 	stw	r3,-4(fp)
    d578:	10800003 	ldbu	r2,0(r2)
    d57c:	10803fcc 	andi	r2,r2,255
    d580:	20800035 	stwio	r2,0(r4)
    d584:	00000c06 	br	d5b8 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    d588:	e0bff517 	ldw	r2,-44(fp)
    d58c:	10000826 	beq	r2,zero,d5b0 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    d590:	e0bff517 	ldw	r2,-44(fp)
    d594:	10bfffc4 	addi	r2,r2,-1
    d598:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    d59c:	e0bffc17 	ldw	r2,-16(fp)
    d5a0:	10800104 	addi	r2,r2,4
    d5a4:	0007883a 	mov	r3,zero
    d5a8:	10c00035 	stwio	r3,0(r2)
    d5ac:	00000206 	br	d5b8 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    d5b0:	00bf0004 	movi	r2,-1024
    d5b4:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    d5b8:	e0bffa17 	ldw	r2,-24(fp)
    d5bc:	1080200c 	andi	r2,r2,128
    d5c0:	103fd026 	beq	r2,zero,d504 <__alt_mem_epcs_flash_controller+0xfe004504>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    d5c4:	e0bffc17 	ldw	r2,-16(fp)
    d5c8:	10800037 	ldwio	r2,0(r2)
    d5cc:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    d5d0:	e0bff617 	ldw	r2,-40(fp)
    d5d4:	10000426 	beq	r2,zero,d5e8 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    d5d8:	e0bff617 	ldw	r2,-40(fp)
    d5dc:	10bfffc4 	addi	r2,r2,-1
    d5e0:	e0bff615 	stw	r2,-40(fp)
    d5e4:	00000506 	br	d5fc <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    d5e8:	e0800217 	ldw	r2,8(fp)
    d5ec:	10c00044 	addi	r3,r2,1
    d5f0:	e0c00215 	stw	r3,8(fp)
    d5f4:	e0fffb17 	ldw	r3,-20(fp)
    d5f8:	10c00005 	stb	r3,0(r2)
      credits++;
    d5fc:	e0bff717 	ldw	r2,-36(fp)
    d600:	10800044 	addi	r2,r2,1
    d604:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    d608:	e0bff617 	ldw	r2,-40(fp)
    d60c:	103fbd1e 	bne	r2,zero,d504 <__alt_mem_epcs_flash_controller+0xfe004504>
    d610:	e0c00217 	ldw	r3,8(fp)
    d614:	e0bff917 	ldw	r2,-28(fp)
    d618:	18bfba1e 	bne	r3,r2,d504 <__alt_mem_epcs_flash_controller+0xfe004504>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    d61c:	e0bffc17 	ldw	r2,-16(fp)
    d620:	10800204 	addi	r2,r2,8
    d624:	10800037 	ldwio	r2,0(r2)
    d628:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    d62c:	e0bffa17 	ldw	r2,-24(fp)
    d630:	1080080c 	andi	r2,r2,32
    d634:	103ff926 	beq	r2,zero,d61c <__alt_mem_epcs_flash_controller+0xfe00461c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    d638:	e0800317 	ldw	r2,12(fp)
    d63c:	1080004c 	andi	r2,r2,1
    d640:	1000041e 	bne	r2,zero,d654 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    d644:	e0bffc17 	ldw	r2,-16(fp)
    d648:	10800304 	addi	r2,r2,12
    d64c:	0007883a 	mov	r3,zero
    d650:	10c00035 	stwio	r3,0(r2)

  return read_length;
    d654:	e0800117 	ldw	r2,4(fp)
}
    d658:	e037883a 	mov	sp,fp
    d65c:	df000017 	ldw	fp,0(sp)
    d660:	dec00104 	addi	sp,sp,4
    d664:	f800283a 	ret

0000d668 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d668:	defffa04 	addi	sp,sp,-24
    d66c:	dfc00515 	stw	ra,20(sp)
    d670:	df000415 	stw	fp,16(sp)
    d674:	df000404 	addi	fp,sp,16
    d678:	e13ffe15 	stw	r4,-8(fp)
    d67c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d680:	e0bfff17 	ldw	r2,-4(fp)
    d684:	10800017 	ldw	r2,0(r2)
    d688:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d68c:	e13ffe17 	ldw	r4,-8(fp)
    d690:	0009aa40 	call	9aa4 <strlen>
    d694:	10800044 	addi	r2,r2,1
    d698:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d69c:	00000d06 	br	d6d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d6a0:	e0bffc17 	ldw	r2,-16(fp)
    d6a4:	10800217 	ldw	r2,8(r2)
    d6a8:	e0fffd17 	ldw	r3,-12(fp)
    d6ac:	180d883a 	mov	r6,r3
    d6b0:	e17ffe17 	ldw	r5,-8(fp)
    d6b4:	1009883a 	mov	r4,r2
    d6b8:	000d9940 	call	d994 <memcmp>
    d6bc:	1000021e 	bne	r2,zero,d6c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d6c0:	e0bffc17 	ldw	r2,-16(fp)
    d6c4:	00000706 	br	d6e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d6c8:	e0bffc17 	ldw	r2,-16(fp)
    d6cc:	10800017 	ldw	r2,0(r2)
    d6d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d6d4:	e0fffc17 	ldw	r3,-16(fp)
    d6d8:	e0bfff17 	ldw	r2,-4(fp)
    d6dc:	18bff01e 	bne	r3,r2,d6a0 <__alt_mem_epcs_flash_controller+0xfe0046a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d6e0:	0005883a 	mov	r2,zero
}
    d6e4:	e037883a 	mov	sp,fp
    d6e8:	dfc00117 	ldw	ra,4(sp)
    d6ec:	df000017 	ldw	fp,0(sp)
    d6f0:	dec00204 	addi	sp,sp,8
    d6f4:	f800283a 	ret

0000d6f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d6f8:	defffb04 	addi	sp,sp,-20
    d6fc:	dfc00415 	stw	ra,16(sp)
    d700:	df000315 	stw	fp,12(sp)
    d704:	df000304 	addi	fp,sp,12
    d708:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d70c:	d0a00617 	ldw	r2,-32744(gp)
    d710:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d714:	00003106 	br	d7dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    d718:	e0bffd17 	ldw	r2,-12(fp)
    d71c:	10800217 	ldw	r2,8(r2)
    d720:	1009883a 	mov	r4,r2
    d724:	0009aa40 	call	9aa4 <strlen>
    d728:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    d72c:	e0bffd17 	ldw	r2,-12(fp)
    d730:	10c00217 	ldw	r3,8(r2)
    d734:	e0bffe17 	ldw	r2,-8(fp)
    d738:	10bfffc4 	addi	r2,r2,-1
    d73c:	1885883a 	add	r2,r3,r2
    d740:	10800003 	ldbu	r2,0(r2)
    d744:	10803fcc 	andi	r2,r2,255
    d748:	1080201c 	xori	r2,r2,128
    d74c:	10bfe004 	addi	r2,r2,-128
    d750:	10800bd8 	cmpnei	r2,r2,47
    d754:	1000031e 	bne	r2,zero,d764 <alt_find_file+0x6c>
    {
      len -= 1;
    d758:	e0bffe17 	ldw	r2,-8(fp)
    d75c:	10bfffc4 	addi	r2,r2,-1
    d760:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d764:	e0bffe17 	ldw	r2,-8(fp)
    d768:	e0ffff17 	ldw	r3,-4(fp)
    d76c:	1885883a 	add	r2,r3,r2
    d770:	10800003 	ldbu	r2,0(r2)
    d774:	10803fcc 	andi	r2,r2,255
    d778:	1080201c 	xori	r2,r2,128
    d77c:	10bfe004 	addi	r2,r2,-128
    d780:	10800be0 	cmpeqi	r2,r2,47
    d784:	1000081e 	bne	r2,zero,d7a8 <alt_find_file+0xb0>
    d788:	e0bffe17 	ldw	r2,-8(fp)
    d78c:	e0ffff17 	ldw	r3,-4(fp)
    d790:	1885883a 	add	r2,r3,r2
    d794:	10800003 	ldbu	r2,0(r2)
    d798:	10803fcc 	andi	r2,r2,255
    d79c:	1080201c 	xori	r2,r2,128
    d7a0:	10bfe004 	addi	r2,r2,-128
    d7a4:	10000a1e 	bne	r2,zero,d7d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    d7a8:	e0bffd17 	ldw	r2,-12(fp)
    d7ac:	10800217 	ldw	r2,8(r2)
    d7b0:	e0fffe17 	ldw	r3,-8(fp)
    d7b4:	180d883a 	mov	r6,r3
    d7b8:	e17fff17 	ldw	r5,-4(fp)
    d7bc:	1009883a 	mov	r4,r2
    d7c0:	000d9940 	call	d994 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d7c4:	1000021e 	bne	r2,zero,d7d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d7c8:	e0bffd17 	ldw	r2,-12(fp)
    d7cc:	00000706 	br	d7ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    d7d0:	e0bffd17 	ldw	r2,-12(fp)
    d7d4:	10800017 	ldw	r2,0(r2)
    d7d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d7dc:	e0fffd17 	ldw	r3,-12(fp)
    d7e0:	d0a00604 	addi	r2,gp,-32744
    d7e4:	18bfcc1e 	bne	r3,r2,d718 <__alt_mem_epcs_flash_controller+0xfe004718>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d7e8:	0005883a 	mov	r2,zero
}
    d7ec:	e037883a 	mov	sp,fp
    d7f0:	dfc00117 	ldw	ra,4(sp)
    d7f4:	df000017 	ldw	fp,0(sp)
    d7f8:	dec00204 	addi	sp,sp,8
    d7fc:	f800283a 	ret

0000d800 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d800:	defffa04 	addi	sp,sp,-24
    d804:	dfc00515 	stw	ra,20(sp)
    d808:	df000415 	stw	fp,16(sp)
    d80c:	dc000315 	stw	r16,12(sp)
    d810:	df000404 	addi	fp,sp,16
    d814:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    d818:	00bffa04 	movi	r2,-24
    d81c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d820:	e03ffc15 	stw	zero,-16(fp)
    d824:	00001d06 	br	d89c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    d828:	04000074 	movhi	r16,1
    d82c:	841f8c04 	addi	r16,r16,32304
    d830:	e0bffc17 	ldw	r2,-16(fp)
    d834:	01400304 	movi	r5,12
    d838:	1009883a 	mov	r4,r2
    d83c:	000958c0 	call	958c <__mulsi3>
    d840:	8085883a 	add	r2,r16,r2
    d844:	10800017 	ldw	r2,0(r2)
    d848:	1000111e 	bne	r2,zero,d890 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    d84c:	04000074 	movhi	r16,1
    d850:	841f8c04 	addi	r16,r16,32304
    d854:	e0bffc17 	ldw	r2,-16(fp)
    d858:	01400304 	movi	r5,12
    d85c:	1009883a 	mov	r4,r2
    d860:	000958c0 	call	958c <__mulsi3>
    d864:	8085883a 	add	r2,r16,r2
    d868:	e0fffe17 	ldw	r3,-8(fp)
    d86c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    d870:	d0e00a17 	ldw	r3,-32728(gp)
    d874:	e0bffc17 	ldw	r2,-16(fp)
    d878:	1880020e 	bge	r3,r2,d884 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    d87c:	e0bffc17 	ldw	r2,-16(fp)
    d880:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    d884:	e0bffc17 	ldw	r2,-16(fp)
    d888:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    d88c:	00000606 	br	d8a8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d890:	e0bffc17 	ldw	r2,-16(fp)
    d894:	10800044 	addi	r2,r2,1
    d898:	e0bffc15 	stw	r2,-16(fp)
    d89c:	e0bffc17 	ldw	r2,-16(fp)
    d8a0:	10800810 	cmplti	r2,r2,32
    d8a4:	103fe01e 	bne	r2,zero,d828 <__alt_mem_epcs_flash_controller+0xfe004828>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d8a8:	e0bffd17 	ldw	r2,-12(fp)
}
    d8ac:	e6ffff04 	addi	sp,fp,-4
    d8b0:	dfc00217 	ldw	ra,8(sp)
    d8b4:	df000117 	ldw	fp,4(sp)
    d8b8:	dc000017 	ldw	r16,0(sp)
    d8bc:	dec00304 	addi	sp,sp,12
    d8c0:	f800283a 	ret

0000d8c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    d8c4:	defffe04 	addi	sp,sp,-8
    d8c8:	df000115 	stw	fp,4(sp)
    d8cc:	df000104 	addi	fp,sp,4
    d8d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    d8d4:	e0bfff17 	ldw	r2,-4(fp)
    d8d8:	10bffe84 	addi	r2,r2,-6
    d8dc:	10c00428 	cmpgeui	r3,r2,16
    d8e0:	18001a1e 	bne	r3,zero,d94c <alt_exception_cause_generated_bad_addr+0x88>
    d8e4:	100690ba 	slli	r3,r2,2
    d8e8:	00800074 	movhi	r2,1
    d8ec:	10b63f04 	addi	r2,r2,-9988
    d8f0:	1885883a 	add	r2,r3,r2
    d8f4:	10800017 	ldw	r2,0(r2)
    d8f8:	1000683a 	jmp	r2
    d8fc:	0000d93c 	xorhi	zero,zero,868
    d900:	0000d93c 	xorhi	zero,zero,868
    d904:	0000d94c 	andi	zero,zero,869
    d908:	0000d94c 	andi	zero,zero,869
    d90c:	0000d94c 	andi	zero,zero,869
    d910:	0000d93c 	xorhi	zero,zero,868
    d914:	0000d944 	movi	zero,869
    d918:	0000d94c 	andi	zero,zero,869
    d91c:	0000d93c 	xorhi	zero,zero,868
    d920:	0000d93c 	xorhi	zero,zero,868
    d924:	0000d94c 	andi	zero,zero,869
    d928:	0000d93c 	xorhi	zero,zero,868
    d92c:	0000d944 	movi	zero,869
    d930:	0000d94c 	andi	zero,zero,869
    d934:	0000d94c 	andi	zero,zero,869
    d938:	0000d93c 	xorhi	zero,zero,868
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    d93c:	00800044 	movi	r2,1
    d940:	00000306 	br	d950 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    d944:	0005883a 	mov	r2,zero
    d948:	00000106 	br	d950 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    d94c:	0005883a 	mov	r2,zero
  }
}
    d950:	e037883a 	mov	sp,fp
    d954:	df000017 	ldw	fp,0(sp)
    d958:	dec00104 	addi	sp,sp,4
    d95c:	f800283a 	ret

0000d960 <atexit>:
    d960:	200b883a 	mov	r5,r4
    d964:	000f883a 	mov	r7,zero
    d968:	000d883a 	mov	r6,zero
    d96c:	0009883a 	mov	r4,zero
    d970:	000d9c41 	jmpi	d9c4 <__register_exitproc>

0000d974 <exit>:
    d974:	defffe04 	addi	sp,sp,-8
    d978:	000b883a 	mov	r5,zero
    d97c:	dc000015 	stw	r16,0(sp)
    d980:	dfc00115 	stw	ra,4(sp)
    d984:	2021883a 	mov	r16,r4
    d988:	000db1c0 	call	db1c <__call_exitprocs>
    d98c:	8009883a 	mov	r4,r16
    d990:	000e2700 	call	e270 <_exit>

0000d994 <memcmp>:
    d994:	218d883a 	add	r6,r4,r6
    d998:	21800826 	beq	r4,r6,d9bc <memcmp+0x28>
    d99c:	20800003 	ldbu	r2,0(r4)
    d9a0:	28c00003 	ldbu	r3,0(r5)
    d9a4:	10c00226 	beq	r2,r3,d9b0 <memcmp+0x1c>
    d9a8:	10c5c83a 	sub	r2,r2,r3
    d9ac:	f800283a 	ret
    d9b0:	21000044 	addi	r4,r4,1
    d9b4:	29400044 	addi	r5,r5,1
    d9b8:	003ff706 	br	d998 <__alt_mem_epcs_flash_controller+0xfe004998>
    d9bc:	0005883a 	mov	r2,zero
    d9c0:	f800283a 	ret

0000d9c4 <__register_exitproc>:
    d9c4:	00800074 	movhi	r2,1
    d9c8:	109fed04 	addi	r2,r2,32692
    d9cc:	10c00017 	ldw	r3,0(r2)
    d9d0:	defff904 	addi	sp,sp,-28
    d9d4:	dc000015 	stw	r16,0(sp)
    d9d8:	1c000c17 	ldw	r16,48(r3)
    d9dc:	dd400515 	stw	r21,20(sp)
    d9e0:	dd000415 	stw	r20,16(sp)
    d9e4:	dcc00315 	stw	r19,12(sp)
    d9e8:	dc800215 	stw	r18,8(sp)
    d9ec:	dc400115 	stw	r17,4(sp)
    d9f0:	dfc00615 	stw	ra,24(sp)
    d9f4:	202b883a 	mov	r21,r4
    d9f8:	2823883a 	mov	r17,r5
    d9fc:	3027883a 	mov	r19,r6
    da00:	3825883a 	mov	r18,r7
    da04:	1029883a 	mov	r20,r2
    da08:	8000021e 	bne	r16,zero,da14 <__register_exitproc+0x50>
    da0c:	1c000d04 	addi	r16,r3,52
    da10:	1c000c15 	stw	r16,48(r3)
    da14:	80800117 	ldw	r2,4(r16)
    da18:	00c007c4 	movi	r3,31
    da1c:	1880110e 	bge	r3,r2,da64 <__register_exitproc+0xa0>
    da20:	00800074 	movhi	r2,1
    da24:	10a56d04 	addi	r2,r2,-27212
    da28:	1000021e 	bne	r2,zero,da34 <__register_exitproc+0x70>
    da2c:	00bfffc4 	movi	r2,-1
    da30:	00003106 	br	daf8 <__register_exitproc+0x134>
    da34:	01002304 	movi	r4,140
    da38:	00095b40 	call	95b4 <malloc>
    da3c:	1021883a 	mov	r16,r2
    da40:	103ffa26 	beq	r2,zero,da2c <__alt_mem_epcs_flash_controller+0xfe004a2c>
    da44:	10000115 	stw	zero,4(r2)
    da48:	a0800017 	ldw	r2,0(r20)
    da4c:	10c00c17 	ldw	r3,48(r2)
    da50:	80c00015 	stw	r3,0(r16)
    da54:	14000c15 	stw	r16,48(r2)
    da58:	80002215 	stw	zero,136(r16)
    da5c:	a8001d26 	beq	r21,zero,dad4 <__register_exitproc+0x110>
    da60:	00000606 	br	da7c <__register_exitproc+0xb8>
    da64:	a8001b26 	beq	r21,zero,dad4 <__register_exitproc+0x110>
    da68:	80802217 	ldw	r2,136(r16)
    da6c:	1000091e 	bne	r2,zero,da94 <__register_exitproc+0xd0>
    da70:	00800074 	movhi	r2,1
    da74:	10a56d04 	addi	r2,r2,-27212
    da78:	103fec26 	beq	r2,zero,da2c <__alt_mem_epcs_flash_controller+0xfe004a2c>
    da7c:	01004204 	movi	r4,264
    da80:	00095b40 	call	95b4 <malloc>
    da84:	103fe926 	beq	r2,zero,da2c <__alt_mem_epcs_flash_controller+0xfe004a2c>
    da88:	10004015 	stw	zero,256(r2)
    da8c:	10004115 	stw	zero,260(r2)
    da90:	80802215 	stw	r2,136(r16)
    da94:	81400117 	ldw	r5,4(r16)
    da98:	01000044 	movi	r4,1
    da9c:	2947883a 	add	r3,r5,r5
    daa0:	18c7883a 	add	r3,r3,r3
    daa4:	10c7883a 	add	r3,r2,r3
    daa8:	1cc00015 	stw	r19,0(r3)
    daac:	2148983a 	sll	r4,r4,r5
    dab0:	11404017 	ldw	r5,256(r2)
    dab4:	290ab03a 	or	r5,r5,r4
    dab8:	11404015 	stw	r5,256(r2)
    dabc:	1c802015 	stw	r18,128(r3)
    dac0:	00c00084 	movi	r3,2
    dac4:	a8c0031e 	bne	r21,r3,dad4 <__register_exitproc+0x110>
    dac8:	10c04117 	ldw	r3,260(r2)
    dacc:	1908b03a 	or	r4,r3,r4
    dad0:	11004115 	stw	r4,260(r2)
    dad4:	80800117 	ldw	r2,4(r16)
    dad8:	10c00044 	addi	r3,r2,1
    dadc:	10800084 	addi	r2,r2,2
    dae0:	1085883a 	add	r2,r2,r2
    dae4:	1085883a 	add	r2,r2,r2
    dae8:	80c00115 	stw	r3,4(r16)
    daec:	80a1883a 	add	r16,r16,r2
    daf0:	84400015 	stw	r17,0(r16)
    daf4:	0005883a 	mov	r2,zero
    daf8:	dfc00617 	ldw	ra,24(sp)
    dafc:	dd400517 	ldw	r21,20(sp)
    db00:	dd000417 	ldw	r20,16(sp)
    db04:	dcc00317 	ldw	r19,12(sp)
    db08:	dc800217 	ldw	r18,8(sp)
    db0c:	dc400117 	ldw	r17,4(sp)
    db10:	dc000017 	ldw	r16,0(sp)
    db14:	dec00704 	addi	sp,sp,28
    db18:	f800283a 	ret

0000db1c <__call_exitprocs>:
    db1c:	defff504 	addi	sp,sp,-44
    db20:	dd000515 	stw	r20,20(sp)
    db24:	05000074 	movhi	r20,1
    db28:	dc800315 	stw	r18,12(sp)
    db2c:	dfc00a15 	stw	ra,40(sp)
    db30:	df000915 	stw	fp,36(sp)
    db34:	ddc00815 	stw	r23,32(sp)
    db38:	dd800715 	stw	r22,28(sp)
    db3c:	dd400615 	stw	r21,24(sp)
    db40:	dcc00415 	stw	r19,16(sp)
    db44:	dc400215 	stw	r17,8(sp)
    db48:	dc000115 	stw	r16,4(sp)
    db4c:	d9000015 	stw	r4,0(sp)
    db50:	2825883a 	mov	r18,r5
    db54:	a51fed04 	addi	r20,r20,32692
    db58:	a4400017 	ldw	r17,0(r20)
    db5c:	8cc00c17 	ldw	r19,48(r17)
    db60:	8c400c04 	addi	r17,r17,48
    db64:	98004526 	beq	r19,zero,dc7c <__call_exitprocs+0x160>
    db68:	9c000117 	ldw	r16,4(r19)
    db6c:	00900034 	movhi	r2,16384
    db70:	10bfffc4 	addi	r2,r2,-1
    db74:	9d402217 	ldw	r21,136(r19)
    db78:	85bfffc4 	addi	r22,r16,-1
    db7c:	80a1883a 	add	r16,r16,r2
    db80:	8421883a 	add	r16,r16,r16
    db84:	8421883a 	add	r16,r16,r16
    db88:	ac2f883a 	add	r23,r21,r16
    db8c:	84000204 	addi	r16,r16,8
    db90:	9c21883a 	add	r16,r19,r16
    db94:	b0002716 	blt	r22,zero,dc34 <__call_exitprocs+0x118>
    db98:	90000726 	beq	r18,zero,dbb8 <__call_exitprocs+0x9c>
    db9c:	a800041e 	bne	r21,zero,dbb0 <__call_exitprocs+0x94>
    dba0:	b5bfffc4 	addi	r22,r22,-1
    dba4:	bdffff04 	addi	r23,r23,-4
    dba8:	843fff04 	addi	r16,r16,-4
    dbac:	003ff906 	br	db94 <__alt_mem_epcs_flash_controller+0xfe004b94>
    dbb0:	b9002017 	ldw	r4,128(r23)
    dbb4:	913ffa1e 	bne	r18,r4,dba0 <__alt_mem_epcs_flash_controller+0xfe004ba0>
    dbb8:	99000117 	ldw	r4,4(r19)
    dbbc:	82000017 	ldw	r8,0(r16)
    dbc0:	213fffc4 	addi	r4,r4,-1
    dbc4:	b100021e 	bne	r22,r4,dbd0 <__call_exitprocs+0xb4>
    dbc8:	9d800115 	stw	r22,4(r19)
    dbcc:	00000106 	br	dbd4 <__call_exitprocs+0xb8>
    dbd0:	80000015 	stw	zero,0(r16)
    dbd4:	403ff226 	beq	r8,zero,dba0 <__alt_mem_epcs_flash_controller+0xfe004ba0>
    dbd8:	9f000117 	ldw	fp,4(r19)
    dbdc:	a8000526 	beq	r21,zero,dbf4 <__call_exitprocs+0xd8>
    dbe0:	00800044 	movi	r2,1
    dbe4:	1592983a 	sll	r9,r2,r22
    dbe8:	a9404017 	ldw	r5,256(r21)
    dbec:	494a703a 	and	r5,r9,r5
    dbf0:	2800021e 	bne	r5,zero,dbfc <__call_exitprocs+0xe0>
    dbf4:	403ee83a 	callr	r8
    dbf8:	00000906 	br	dc20 <__call_exitprocs+0x104>
    dbfc:	a9004117 	ldw	r4,260(r21)
    dc00:	4908703a 	and	r4,r9,r4
    dc04:	2000041e 	bne	r4,zero,dc18 <__call_exitprocs+0xfc>
    dc08:	b9400017 	ldw	r5,0(r23)
    dc0c:	d9000017 	ldw	r4,0(sp)
    dc10:	403ee83a 	callr	r8
    dc14:	00000206 	br	dc20 <__call_exitprocs+0x104>
    dc18:	b9000017 	ldw	r4,0(r23)
    dc1c:	403ee83a 	callr	r8
    dc20:	99000117 	ldw	r4,4(r19)
    dc24:	e13fcc1e 	bne	fp,r4,db58 <__alt_mem_epcs_flash_controller+0xfe004b58>
    dc28:	89000017 	ldw	r4,0(r17)
    dc2c:	993fdc26 	beq	r19,r4,dba0 <__alt_mem_epcs_flash_controller+0xfe004ba0>
    dc30:	003fc906 	br	db58 <__alt_mem_epcs_flash_controller+0xfe004b58>
    dc34:	00800074 	movhi	r2,1
    dc38:	10a57204 	addi	r2,r2,-27192
    dc3c:	10000f26 	beq	r2,zero,dc7c <__call_exitprocs+0x160>
    dc40:	99400117 	ldw	r5,4(r19)
    dc44:	99000017 	ldw	r4,0(r19)
    dc48:	2800091e 	bne	r5,zero,dc70 <__call_exitprocs+0x154>
    dc4c:	20000826 	beq	r4,zero,dc70 <__call_exitprocs+0x154>
    dc50:	89000015 	stw	r4,0(r17)
    dc54:	a8000226 	beq	r21,zero,dc60 <__call_exitprocs+0x144>
    dc58:	a809883a 	mov	r4,r21
    dc5c:	00095c80 	call	95c8 <free>
    dc60:	9809883a 	mov	r4,r19
    dc64:	00095c80 	call	95c8 <free>
    dc68:	8cc00017 	ldw	r19,0(r17)
    dc6c:	003fbd06 	br	db64 <__alt_mem_epcs_flash_controller+0xfe004b64>
    dc70:	9823883a 	mov	r17,r19
    dc74:	2027883a 	mov	r19,r4
    dc78:	003fba06 	br	db64 <__alt_mem_epcs_flash_controller+0xfe004b64>
    dc7c:	dfc00a17 	ldw	ra,40(sp)
    dc80:	df000917 	ldw	fp,36(sp)
    dc84:	ddc00817 	ldw	r23,32(sp)
    dc88:	dd800717 	ldw	r22,28(sp)
    dc8c:	dd400617 	ldw	r21,24(sp)
    dc90:	dd000517 	ldw	r20,20(sp)
    dc94:	dcc00417 	ldw	r19,16(sp)
    dc98:	dc800317 	ldw	r18,12(sp)
    dc9c:	dc400217 	ldw	r17,8(sp)
    dca0:	dc000117 	ldw	r16,4(sp)
    dca4:	dec00b04 	addi	sp,sp,44
    dca8:	f800283a 	ret

0000dcac <__umoddi3>:
    dcac:	defff304 	addi	sp,sp,-52
    dcb0:	df000b15 	stw	fp,44(sp)
    dcb4:	dc400415 	stw	r17,16(sp)
    dcb8:	dc000315 	stw	r16,12(sp)
    dcbc:	dfc00c15 	stw	ra,48(sp)
    dcc0:	ddc00a15 	stw	r23,40(sp)
    dcc4:	dd800915 	stw	r22,36(sp)
    dcc8:	dd400815 	stw	r21,32(sp)
    dccc:	dd000715 	stw	r20,28(sp)
    dcd0:	dcc00615 	stw	r19,24(sp)
    dcd4:	dc800515 	stw	r18,20(sp)
    dcd8:	2021883a 	mov	r16,r4
    dcdc:	2823883a 	mov	r17,r5
    dce0:	2839883a 	mov	fp,r5
    dce4:	3800401e 	bne	r7,zero,dde8 <__umoddi3+0x13c>
    dce8:	3027883a 	mov	r19,r6
    dcec:	2029883a 	mov	r20,r4
    dcf0:	2980552e 	bgeu	r5,r6,de48 <__umoddi3+0x19c>
    dcf4:	00bfffd4 	movui	r2,65535
    dcf8:	1180a236 	bltu	r2,r6,df84 <__umoddi3+0x2d8>
    dcfc:	01003fc4 	movi	r4,255
    dd00:	2189803a 	cmpltu	r4,r4,r6
    dd04:	200890fa 	slli	r4,r4,3
    dd08:	3104d83a 	srl	r2,r6,r4
    dd0c:	00c00074 	movhi	r3,1
    dd10:	18dabe84 	addi	r3,r3,27386
    dd14:	1885883a 	add	r2,r3,r2
    dd18:	10c00003 	ldbu	r3,0(r2)
    dd1c:	00800804 	movi	r2,32
    dd20:	1909883a 	add	r4,r3,r4
    dd24:	1125c83a 	sub	r18,r2,r4
    dd28:	90000526 	beq	r18,zero,dd40 <__umoddi3+0x94>
    dd2c:	8ca2983a 	sll	r17,r17,r18
    dd30:	8108d83a 	srl	r4,r16,r4
    dd34:	34a6983a 	sll	r19,r6,r18
    dd38:	84a8983a 	sll	r20,r16,r18
    dd3c:	2478b03a 	or	fp,r4,r17
    dd40:	982cd43a 	srli	r22,r19,16
    dd44:	e009883a 	mov	r4,fp
    dd48:	9dffffcc 	andi	r23,r19,65535
    dd4c:	b00b883a 	mov	r5,r22
    dd50:	000a4900 	call	a490 <__umodsi3>
    dd54:	b00b883a 	mov	r5,r22
    dd58:	e009883a 	mov	r4,fp
    dd5c:	102b883a 	mov	r21,r2
    dd60:	000a42c0 	call	a42c <__udivsi3>
    dd64:	100b883a 	mov	r5,r2
    dd68:	b809883a 	mov	r4,r23
    dd6c:	000958c0 	call	958c <__mulsi3>
    dd70:	a82a943a 	slli	r21,r21,16
    dd74:	a006d43a 	srli	r3,r20,16
    dd78:	1d46b03a 	or	r3,r3,r21
    dd7c:	1880032e 	bgeu	r3,r2,dd8c <__umoddi3+0xe0>
    dd80:	1cc7883a 	add	r3,r3,r19
    dd84:	1cc00136 	bltu	r3,r19,dd8c <__umoddi3+0xe0>
    dd88:	18813136 	bltu	r3,r2,e250 <__umoddi3+0x5a4>
    dd8c:	18a1c83a 	sub	r16,r3,r2
    dd90:	b00b883a 	mov	r5,r22
    dd94:	8009883a 	mov	r4,r16
    dd98:	000a4900 	call	a490 <__umodsi3>
    dd9c:	b00b883a 	mov	r5,r22
    dda0:	8009883a 	mov	r4,r16
    dda4:	1023883a 	mov	r17,r2
    dda8:	000a42c0 	call	a42c <__udivsi3>
    ddac:	100b883a 	mov	r5,r2
    ddb0:	b809883a 	mov	r4,r23
    ddb4:	8822943a 	slli	r17,r17,16
    ddb8:	000958c0 	call	958c <__mulsi3>
    ddbc:	a0ffffcc 	andi	r3,r20,65535
    ddc0:	1c46b03a 	or	r3,r3,r17
    ddc4:	1880042e 	bgeu	r3,r2,ddd8 <__umoddi3+0x12c>
    ddc8:	1cc7883a 	add	r3,r3,r19
    ddcc:	1cc00236 	bltu	r3,r19,ddd8 <__umoddi3+0x12c>
    ddd0:	1880012e 	bgeu	r3,r2,ddd8 <__umoddi3+0x12c>
    ddd4:	1cc7883a 	add	r3,r3,r19
    ddd8:	1885c83a 	sub	r2,r3,r2
    dddc:	1484d83a 	srl	r2,r2,r18
    dde0:	0007883a 	mov	r3,zero
    dde4:	00005306 	br	df34 <__umoddi3+0x288>
    dde8:	29c05036 	bltu	r5,r7,df2c <__umoddi3+0x280>
    ddec:	00bfffd4 	movui	r2,65535
    ddf0:	11c05c2e 	bgeu	r2,r7,df64 <__umoddi3+0x2b8>
    ddf4:	00804034 	movhi	r2,256
    ddf8:	10bfffc4 	addi	r2,r2,-1
    ddfc:	11c10636 	bltu	r2,r7,e218 <__umoddi3+0x56c>
    de00:	01000404 	movi	r4,16
    de04:	3904d83a 	srl	r2,r7,r4
    de08:	00c00074 	movhi	r3,1
    de0c:	18dabe84 	addi	r3,r3,27386
    de10:	1885883a 	add	r2,r3,r2
    de14:	14c00003 	ldbu	r19,0(r2)
    de18:	00c00804 	movi	r3,32
    de1c:	9927883a 	add	r19,r19,r4
    de20:	1ce9c83a 	sub	r20,r3,r19
    de24:	a0005c1e 	bne	r20,zero,df98 <__umoddi3+0x2ec>
    de28:	3c400136 	bltu	r7,r17,de30 <__umoddi3+0x184>
    de2c:	81810a36 	bltu	r16,r6,e258 <__umoddi3+0x5ac>
    de30:	8185c83a 	sub	r2,r16,r6
    de34:	89e3c83a 	sub	r17,r17,r7
    de38:	8089803a 	cmpltu	r4,r16,r2
    de3c:	8939c83a 	sub	fp,r17,r4
    de40:	e007883a 	mov	r3,fp
    de44:	00003b06 	br	df34 <__umoddi3+0x288>
    de48:	3000041e 	bne	r6,zero,de5c <__umoddi3+0x1b0>
    de4c:	000b883a 	mov	r5,zero
    de50:	01000044 	movi	r4,1
    de54:	000a42c0 	call	a42c <__udivsi3>
    de58:	1027883a 	mov	r19,r2
    de5c:	00bfffd4 	movui	r2,65535
    de60:	14c0442e 	bgeu	r2,r19,df74 <__umoddi3+0x2c8>
    de64:	00804034 	movhi	r2,256
    de68:	10bfffc4 	addi	r2,r2,-1
    de6c:	14c0ec36 	bltu	r2,r19,e220 <__umoddi3+0x574>
    de70:	00800404 	movi	r2,16
    de74:	9886d83a 	srl	r3,r19,r2
    de78:	01000074 	movhi	r4,1
    de7c:	211abe84 	addi	r4,r4,27386
    de80:	20c7883a 	add	r3,r4,r3
    de84:	18c00003 	ldbu	r3,0(r3)
    de88:	1887883a 	add	r3,r3,r2
    de8c:	00800804 	movi	r2,32
    de90:	10e5c83a 	sub	r18,r2,r3
    de94:	9000ab1e 	bne	r18,zero,e144 <__umoddi3+0x498>
    de98:	982cd43a 	srli	r22,r19,16
    de9c:	8ce3c83a 	sub	r17,r17,r19
    dea0:	9dffffcc 	andi	r23,r19,65535
    dea4:	b00b883a 	mov	r5,r22
    dea8:	8809883a 	mov	r4,r17
    deac:	000a4900 	call	a490 <__umodsi3>
    deb0:	b00b883a 	mov	r5,r22
    deb4:	8809883a 	mov	r4,r17
    deb8:	102b883a 	mov	r21,r2
    debc:	000a42c0 	call	a42c <__udivsi3>
    dec0:	b80b883a 	mov	r5,r23
    dec4:	1009883a 	mov	r4,r2
    dec8:	000958c0 	call	958c <__mulsi3>
    decc:	a82a943a 	slli	r21,r21,16
    ded0:	a006d43a 	srli	r3,r20,16
    ded4:	1d46b03a 	or	r3,r3,r21
    ded8:	1880042e 	bgeu	r3,r2,deec <__umoddi3+0x240>
    dedc:	1cc7883a 	add	r3,r3,r19
    dee0:	1cc00236 	bltu	r3,r19,deec <__umoddi3+0x240>
    dee4:	1880012e 	bgeu	r3,r2,deec <__umoddi3+0x240>
    dee8:	1cc7883a 	add	r3,r3,r19
    deec:	18a1c83a 	sub	r16,r3,r2
    def0:	b00b883a 	mov	r5,r22
    def4:	8009883a 	mov	r4,r16
    def8:	000a4900 	call	a490 <__umodsi3>
    defc:	1023883a 	mov	r17,r2
    df00:	b00b883a 	mov	r5,r22
    df04:	8009883a 	mov	r4,r16
    df08:	000a42c0 	call	a42c <__udivsi3>
    df0c:	8822943a 	slli	r17,r17,16
    df10:	b80b883a 	mov	r5,r23
    df14:	1009883a 	mov	r4,r2
    df18:	000958c0 	call	958c <__mulsi3>
    df1c:	a53fffcc 	andi	r20,r20,65535
    df20:	a446b03a 	or	r3,r20,r17
    df24:	18bfac2e 	bgeu	r3,r2,ddd8 <__alt_mem_epcs_flash_controller+0xfe004dd8>
    df28:	003fa706 	br	ddc8 <__alt_mem_epcs_flash_controller+0xfe004dc8>
    df2c:	2005883a 	mov	r2,r4
    df30:	2807883a 	mov	r3,r5
    df34:	dfc00c17 	ldw	ra,48(sp)
    df38:	df000b17 	ldw	fp,44(sp)
    df3c:	ddc00a17 	ldw	r23,40(sp)
    df40:	dd800917 	ldw	r22,36(sp)
    df44:	dd400817 	ldw	r21,32(sp)
    df48:	dd000717 	ldw	r20,28(sp)
    df4c:	dcc00617 	ldw	r19,24(sp)
    df50:	dc800517 	ldw	r18,20(sp)
    df54:	dc400417 	ldw	r17,16(sp)
    df58:	dc000317 	ldw	r16,12(sp)
    df5c:	dec00d04 	addi	sp,sp,52
    df60:	f800283a 	ret
    df64:	04c03fc4 	movi	r19,255
    df68:	99c9803a 	cmpltu	r4,r19,r7
    df6c:	200890fa 	slli	r4,r4,3
    df70:	003fa406 	br	de04 <__alt_mem_epcs_flash_controller+0xfe004e04>
    df74:	00803fc4 	movi	r2,255
    df78:	14c5803a 	cmpltu	r2,r2,r19
    df7c:	100490fa 	slli	r2,r2,3
    df80:	003fbc06 	br	de74 <__alt_mem_epcs_flash_controller+0xfe004e74>
    df84:	00804034 	movhi	r2,256
    df88:	10bfffc4 	addi	r2,r2,-1
    df8c:	1180a636 	bltu	r2,r6,e228 <__umoddi3+0x57c>
    df90:	01000404 	movi	r4,16
    df94:	003f5c06 	br	dd08 <__alt_mem_epcs_flash_controller+0xfe004d08>
    df98:	3d0e983a 	sll	r7,r7,r20
    df9c:	34ead83a 	srl	r21,r6,r19
    dfa0:	8cc6d83a 	srl	r3,r17,r19
    dfa4:	8d10983a 	sll	r8,r17,r20
    dfa8:	3d6ab03a 	or	r21,r7,r21
    dfac:	a82cd43a 	srli	r22,r21,16
    dfb0:	84e2d83a 	srl	r17,r16,r19
    dfb4:	1809883a 	mov	r4,r3
    dfb8:	b00b883a 	mov	r5,r22
    dfbc:	8a22b03a 	or	r17,r17,r8
    dfc0:	3524983a 	sll	r18,r6,r20
    dfc4:	dc400015 	stw	r17,0(sp)
    dfc8:	d8c00115 	stw	r3,4(sp)
    dfcc:	000a4900 	call	a490 <__umodsi3>
    dfd0:	d8c00117 	ldw	r3,4(sp)
    dfd4:	b00b883a 	mov	r5,r22
    dfd8:	1039883a 	mov	fp,r2
    dfdc:	1809883a 	mov	r4,r3
    dfe0:	000a42c0 	call	a42c <__udivsi3>
    dfe4:	adffffcc 	andi	r23,r21,65535
    dfe8:	100b883a 	mov	r5,r2
    dfec:	b809883a 	mov	r4,r23
    dff0:	1023883a 	mov	r17,r2
    dff4:	000958c0 	call	958c <__mulsi3>
    dff8:	d9400017 	ldw	r5,0(sp)
    dffc:	e008943a 	slli	r4,fp,16
    e000:	8520983a 	sll	r16,r16,r20
    e004:	2806d43a 	srli	r3,r5,16
    e008:	1906b03a 	or	r3,r3,r4
    e00c:	1880042e 	bgeu	r3,r2,e020 <__umoddi3+0x374>
    e010:	1d47883a 	add	r3,r3,r21
    e014:	893fffc4 	addi	r4,r17,-1
    e018:	1d40892e 	bgeu	r3,r21,e240 <__umoddi3+0x594>
    e01c:	2023883a 	mov	r17,r4
    e020:	18b9c83a 	sub	fp,r3,r2
    e024:	b00b883a 	mov	r5,r22
    e028:	e009883a 	mov	r4,fp
    e02c:	000a4900 	call	a490 <__umodsi3>
    e030:	b00b883a 	mov	r5,r22
    e034:	e009883a 	mov	r4,fp
    e038:	d8800215 	stw	r2,8(sp)
    e03c:	000a42c0 	call	a42c <__udivsi3>
    e040:	100b883a 	mov	r5,r2
    e044:	b809883a 	mov	r4,r23
    e048:	102d883a 	mov	r22,r2
    e04c:	000958c0 	call	958c <__mulsi3>
    e050:	d9800217 	ldw	r6,8(sp)
    e054:	d8c00017 	ldw	r3,0(sp)
    e058:	300c943a 	slli	r6,r6,16
    e05c:	1a3fffcc 	andi	r8,r3,65535
    e060:	4190b03a 	or	r8,r8,r6
    e064:	4080042e 	bgeu	r8,r2,e078 <__umoddi3+0x3cc>
    e068:	4551883a 	add	r8,r8,r21
    e06c:	b0ffffc4 	addi	r3,r22,-1
    e070:	45406f2e 	bgeu	r8,r21,e230 <__umoddi3+0x584>
    e074:	182d883a 	mov	r22,r3
    e078:	880e943a 	slli	r7,r17,16
    e07c:	9006d43a 	srli	r3,r18,16
    e080:	91bfffcc 	andi	r6,r18,65535
    e084:	3dacb03a 	or	r22,r7,r22
    e088:	b02ed43a 	srli	r23,r22,16
    e08c:	b5bfffcc 	andi	r22,r22,65535
    e090:	300b883a 	mov	r5,r6
    e094:	b009883a 	mov	r4,r22
    e098:	40a3c83a 	sub	r17,r8,r2
    e09c:	d8c00115 	stw	r3,4(sp)
    e0a0:	d9800215 	stw	r6,8(sp)
    e0a4:	000958c0 	call	958c <__mulsi3>
    e0a8:	d9800217 	ldw	r6,8(sp)
    e0ac:	b809883a 	mov	r4,r23
    e0b0:	1039883a 	mov	fp,r2
    e0b4:	300b883a 	mov	r5,r6
    e0b8:	000958c0 	call	958c <__mulsi3>
    e0bc:	d8c00117 	ldw	r3,4(sp)
    e0c0:	b809883a 	mov	r4,r23
    e0c4:	d8800215 	stw	r2,8(sp)
    e0c8:	180b883a 	mov	r5,r3
    e0cc:	000958c0 	call	958c <__mulsi3>
    e0d0:	d8c00117 	ldw	r3,4(sp)
    e0d4:	b009883a 	mov	r4,r22
    e0d8:	102f883a 	mov	r23,r2
    e0dc:	180b883a 	mov	r5,r3
    e0e0:	000958c0 	call	958c <__mulsi3>
    e0e4:	d9800217 	ldw	r6,8(sp)
    e0e8:	e006d43a 	srli	r3,fp,16
    e0ec:	1185883a 	add	r2,r2,r6
    e0f0:	1885883a 	add	r2,r3,r2
    e0f4:	1180022e 	bgeu	r2,r6,e100 <__umoddi3+0x454>
    e0f8:	00c00074 	movhi	r3,1
    e0fc:	b8ef883a 	add	r23,r23,r3
    e100:	1006d43a 	srli	r3,r2,16
    e104:	1004943a 	slli	r2,r2,16
    e108:	e73fffcc 	andi	fp,fp,65535
    e10c:	1dc7883a 	add	r3,r3,r23
    e110:	1739883a 	add	fp,r2,fp
    e114:	88c03a36 	bltu	r17,r3,e200 <__umoddi3+0x554>
    e118:	88c05126 	beq	r17,r3,e260 <__umoddi3+0x5b4>
    e11c:	88c9c83a 	sub	r4,r17,r3
    e120:	e00f883a 	mov	r7,fp
    e124:	81cfc83a 	sub	r7,r16,r7
    e128:	81c7803a 	cmpltu	r3,r16,r7
    e12c:	20c7c83a 	sub	r3,r4,r3
    e130:	1cc4983a 	sll	r2,r3,r19
    e134:	3d0ed83a 	srl	r7,r7,r20
    e138:	1d06d83a 	srl	r3,r3,r20
    e13c:	11c4b03a 	or	r2,r2,r7
    e140:	003f7c06 	br	df34 <__alt_mem_epcs_flash_controller+0xfe004f34>
    e144:	9ca6983a 	sll	r19,r19,r18
    e148:	88f8d83a 	srl	fp,r17,r3
    e14c:	80c4d83a 	srl	r2,r16,r3
    e150:	982cd43a 	srli	r22,r19,16
    e154:	8ca2983a 	sll	r17,r17,r18
    e158:	e009883a 	mov	r4,fp
    e15c:	b00b883a 	mov	r5,r22
    e160:	146ab03a 	or	r21,r2,r17
    e164:	000a4900 	call	a490 <__umodsi3>
    e168:	b00b883a 	mov	r5,r22
    e16c:	e009883a 	mov	r4,fp
    e170:	1029883a 	mov	r20,r2
    e174:	9dffffcc 	andi	r23,r19,65535
    e178:	000a42c0 	call	a42c <__udivsi3>
    e17c:	b809883a 	mov	r4,r23
    e180:	100b883a 	mov	r5,r2
    e184:	000958c0 	call	958c <__mulsi3>
    e188:	a008943a 	slli	r4,r20,16
    e18c:	a806d43a 	srli	r3,r21,16
    e190:	84a8983a 	sll	r20,r16,r18
    e194:	1906b03a 	or	r3,r3,r4
    e198:	1880042e 	bgeu	r3,r2,e1ac <__umoddi3+0x500>
    e19c:	1cc7883a 	add	r3,r3,r19
    e1a0:	1cc00236 	bltu	r3,r19,e1ac <__umoddi3+0x500>
    e1a4:	1880012e 	bgeu	r3,r2,e1ac <__umoddi3+0x500>
    e1a8:	1cc7883a 	add	r3,r3,r19
    e1ac:	18a3c83a 	sub	r17,r3,r2
    e1b0:	b00b883a 	mov	r5,r22
    e1b4:	8809883a 	mov	r4,r17
    e1b8:	000a4900 	call	a490 <__umodsi3>
    e1bc:	b00b883a 	mov	r5,r22
    e1c0:	8809883a 	mov	r4,r17
    e1c4:	1021883a 	mov	r16,r2
    e1c8:	000a42c0 	call	a42c <__udivsi3>
    e1cc:	100b883a 	mov	r5,r2
    e1d0:	b809883a 	mov	r4,r23
    e1d4:	8020943a 	slli	r16,r16,16
    e1d8:	000958c0 	call	958c <__mulsi3>
    e1dc:	a8ffffcc 	andi	r3,r21,65535
    e1e0:	1c06b03a 	or	r3,r3,r16
    e1e4:	1880042e 	bgeu	r3,r2,e1f8 <__umoddi3+0x54c>
    e1e8:	1cc7883a 	add	r3,r3,r19
    e1ec:	1cc00236 	bltu	r3,r19,e1f8 <__umoddi3+0x54c>
    e1f0:	1880012e 	bgeu	r3,r2,e1f8 <__umoddi3+0x54c>
    e1f4:	1cc7883a 	add	r3,r3,r19
    e1f8:	18a3c83a 	sub	r17,r3,r2
    e1fc:	003f2906 	br	dea4 <__alt_mem_epcs_flash_controller+0xfe004ea4>
    e200:	e48fc83a 	sub	r7,fp,r18
    e204:	1d49c83a 	sub	r4,r3,r21
    e208:	e1f9803a 	cmpltu	fp,fp,r7
    e20c:	2739c83a 	sub	fp,r4,fp
    e210:	8f09c83a 	sub	r4,r17,fp
    e214:	003fc306 	br	e124 <__alt_mem_epcs_flash_controller+0xfe005124>
    e218:	01000604 	movi	r4,24
    e21c:	003ef906 	br	de04 <__alt_mem_epcs_flash_controller+0xfe004e04>
    e220:	00800604 	movi	r2,24
    e224:	003f1306 	br	de74 <__alt_mem_epcs_flash_controller+0xfe004e74>
    e228:	01000604 	movi	r4,24
    e22c:	003eb606 	br	dd08 <__alt_mem_epcs_flash_controller+0xfe004d08>
    e230:	40bf902e 	bgeu	r8,r2,e074 <__alt_mem_epcs_flash_controller+0xfe005074>
    e234:	b5bfff84 	addi	r22,r22,-2
    e238:	4551883a 	add	r8,r8,r21
    e23c:	003f8e06 	br	e078 <__alt_mem_epcs_flash_controller+0xfe005078>
    e240:	18bf762e 	bgeu	r3,r2,e01c <__alt_mem_epcs_flash_controller+0xfe00501c>
    e244:	8c7fff84 	addi	r17,r17,-2
    e248:	1d47883a 	add	r3,r3,r21
    e24c:	003f7406 	br	e020 <__alt_mem_epcs_flash_controller+0xfe005020>
    e250:	1cc7883a 	add	r3,r3,r19
    e254:	003ecd06 	br	dd8c <__alt_mem_epcs_flash_controller+0xfe004d8c>
    e258:	8005883a 	mov	r2,r16
    e25c:	003ef806 	br	de40 <__alt_mem_epcs_flash_controller+0xfe004e40>
    e260:	873fe736 	bltu	r16,fp,e200 <__alt_mem_epcs_flash_controller+0xfe005200>
    e264:	e00f883a 	mov	r7,fp
    e268:	0009883a 	mov	r4,zero
    e26c:	003fad06 	br	e124 <__alt_mem_epcs_flash_controller+0xfe005124>

0000e270 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e270:	defffd04 	addi	sp,sp,-12
    e274:	df000215 	stw	fp,8(sp)
    e278:	df000204 	addi	fp,sp,8
    e27c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    e280:	0001883a 	nop
    e284:	e0bfff17 	ldw	r2,-4(fp)
    e288:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    e28c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e290:	10000226 	beq	r2,zero,e29c <_exit+0x2c>
    ALT_SIM_FAIL();
    e294:	002af070 	cmpltui	zero,zero,43969
    e298:	00000106 	br	e2a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    e29c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e2a0:	003fff06 	br	e2a0 <__alt_mem_epcs_flash_controller+0xfe0052a0>
