#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdbool.h>
#include <assert.h>

/*libbtc includes*/
#include <btc.h>
#include <tx.h>
#include <bip32.h>
#include <base58.h>
#include <ecc.h>
#include <tool.h>
#include <utils.h>

#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_sys_wrappers.h"
#include "alt_types.h"

#include "hashmap.h"
#include "uart_usb.h"
#include "rand.h"
//#include "bip39.h"

#define BUF_SIZE 1024 * 1024

const btc_chainparams* chain = &btc_chainparams_test;

void initialize()
{
	/* initialize hardware random number generator */
	alt_u32 randSeed = 0x12345678;
    initRandom(randSeed);


    /* initialize uart to usb */
    initUart();
}


static bool showError(const char* er)
{
    printf("Error: %s\n", er);
    btc_ecc_stop();
    return 1;
}


void create_priv_key()
{
	size_t sizeout = 128;
	char newprivkey_wif[sizeout];
	char newprivkey_hex[sizeout];

	/* generate a new private key */
	gen_privatekey(chain, newprivkey_wif, sizeout, newprivkey_hex);
	printf("privatekey WIF: %s\n", newprivkey_wif);
	printf("privatekey HEX: %s\n", newprivkey_hex);
	memset(newprivkey_wif, 0, strlen(newprivkey_wif));
	memset(newprivkey_hex, 0, strlen(newprivkey_hex));
}

btc_bool hdgenmaster(char* masterkey, size_t sizeout)
{
	btc_hdnode node;
	alt_u8 seed[32];
	getRandomBuffer(&(seed[0]), 32);
	btc_hdnode_from_seed(seed, 32, &node);
	memset(seed, 0, 32);
	btc_hdnode_serialize_private(&node, chain, masterkey, sizeout);
	memset(&node, 0, sizeof(node));
	return true;
}

btc_bool hd_save_node(const btc_chainparams* chain, const char* nodeser, map_t keymap)
{
	btc_hdnode node;
	if (!btc_hdnode_deserialize(nodeser, chain, &node))
		return false;

	/* Make Public Key */
	size_t strsize = 128;
	char str[strsize];
	btc_hdnode_get_p2pkh_address(&node, chain, str, strsize);

	/* Make Private Key */
	size_t privkey_wif_size_bin = 34;
	uint8_t pkeybase58c[privkey_wif_size_bin];
	pkeybase58c[0] = chain->b58prefix_secret_address;
	pkeybase58c[33] = 1; /* always use compressed keys */
	size_t privkey_wif_size = 128;
	char privkey_wif[privkey_wif_size];
	memcpy(&pkeybase58c[1], node.private_key, BTC_ECKEY_PKEY_LENGTH);
	assert(btc_base58_encode_check(pkeybase58c, privkey_wif_size_bin, privkey_wif, privkey_wif_size) != 0);
	if (btc_hdnode_has_privkey(&node)) {
		printf("privatekey WIF: %s\n", privkey_wif);
		hashmap_put(keymap, str, privkey_wif);
//		if(!valueForKeyInHashTable(ht, str, &value)){
//			addToHashTable(ht, str, privkey_wif);
//		}
//		addToHashTable(ht, str, privkey_wif);
	}
	return true;
}

int hdderive(char* pkey, char* keypath, char* p2pkh_address, map_t keymap)
{
	if (!pkey)
		return showError("Missing extended key (use -p)");
	if (!keypath)
		return showError("Missing keypath (use -m)");
	size_t sizeout = 128;
	char newextkey[sizeout];

	//check if we derive a range of keys
	unsigned int maxlen = 1024;
	int posanum = -1;
	int posbnum = -1;
	int end = -1;
	uint64_t from;
	uint64_t to;

	static char digits[] = "0123456789";
	for (unsigned int i = 0; i<strlen(keypath); i++) {
		if (i > maxlen) {
			break;
		}
		if (posanum > -1 && posbnum == -1) {
			if (keypath[i] == '-') {
				if (i-posanum >= 9) {
					break;
				}
				posbnum = i+1;
				char buf[9] = {0};
				memcpy (buf, &keypath[posanum], i-posanum);
				from = strtoull(buf, NULL, 10);
			}
			else if (!strchr(digits, keypath[i])) {
				posanum = -1;
				break;
			}
		}
		else if (posanum > -1 && posbnum > -1) {
			if (keypath[i] == ']' || keypath[i] == ')') {
				if (i-posbnum >= 9) {
					break;
				}
				char buf[9] = {0};
				memcpy (buf, &keypath[posbnum], i-posbnum);
				to = strtoull(buf, NULL, 10);
				end = i+1;
				break;
			}
			else if (!strchr(digits, keypath[i])) {
				posbnum = -1;
				posanum = -1;
				break;
			}
		}
		if (keypath[i] == '[' || keypath[i] == '(') {
			posanum = i+1;
		}
	}

	if (end > -1 && from <= to) {
		for (uint64_t i = from; i <= to; i++) {
			char keypathnew[strlen(keypath)+16];
			memcpy(keypathnew, keypath, posanum-1);
			char index[9] = {0};
			sprintf(index, "%lld", i);
			memcpy(keypathnew+posanum-1, index, strlen(index));
			memcpy(keypathnew+posanum-1+strlen(index), &keypath[end], strlen(keypath)-end);


			if (!hd_derive(chain, pkey, keypathnew, newextkey, sizeout))
				return showError("Deriving child key failed\n");
			else
				hd_print_node(chain, newextkey, p2pkh_address);
				hd_save_node(chain, newextkey, keymap);
		}
	}
	else {
		if (!hd_derive(chain, pkey, keypath, newextkey, sizeout))
			return showError("Deriving child key failed\n");
		else
			hd_print_node(chain, newextkey, p2pkh_address);
			hd_save_node(chain, newextkey, keymap);
	}
	return 0;
}

int sign_tx(btc_tx *tx, char* txhex, char* scripthex, char* pkey, uint64_t amount, int inputindex, int sighashtype, char* signed_txhex)
{
	if(!txhex || !scripthex) {
		return showError("Missing tx-hex or script-hex (use -x, -s)\n");
	}

	if (strlen(txhex) > 1024*100) { //don't accept tx larger then 100kb
		return showError("tx too large (max 100kb)\n");
	}
//	memset()

	//deserialize transaction
//	btc_tx* tx = btc_tx_new();
	uint8_t* data_bin = btc_malloc(strlen(txhex) / 2 + 1);
	int outlen = 0;
	utils_hex_to_bin(txhex, data_bin, strlen(txhex), &outlen);
	/* Only deserialize on the first iteration of the loop */
	if(inputindex == 0){
		if (!btc_tx_deserialize(data_bin, outlen, tx, NULL, true)) {
			free(data_bin);
			btc_tx_free(tx);
			return showError("Invalid tx hex");
		}
	}
	free(data_bin);

	if ((size_t)inputindex >= tx->vin->len) {
		btc_tx_free(tx);
		return showError("Inputindex out of range");
	}

	btc_tx_in *tx_in = vector_idx(tx->vin, inputindex);

	uint8_t script_data[strlen(scripthex) / 2 + 1];
	utils_hex_to_bin(scripthex, script_data, strlen(scripthex), &outlen);
	cstring* script = cstr_new_buf(script_data, outlen);

	uint256 sighash;
	memset(sighash, 0, sizeof(sighash));
	btc_tx_sighash(tx, script, inputindex, sighashtype, 0, SIGVERSION_BASE, sighash);

	char *hex = utils_uint8_to_hex(sighash, 32);
	utils_reverse_hex(hex, 64);

	enum btc_tx_out_type type = btc_script_classify(script, NULL);
	printf("script: %s\n", scripthex);
	printf("script-type: %s\n", btc_tx_out_type_to_str(type));
	printf("inputindex: %d\n", inputindex);
	printf("sighashtype: %d\n", sighashtype);
	printf("hash: %s\n", hex);

	// sign
	btc_bool sign = false;
	btc_key key;
	btc_privkey_init(&key);
	if (btc_privkey_decode_wif(pkey, chain, &key)) {
		sign = true;
	}
	else {
		if (strlen(pkey) > 50) {
			btc_tx_free(tx);
			cstr_free(script, true);
			return showError("Invalid wif privkey\n");
		}
		printf("No private key provided, signing will not happen\n");
	}
	if (sign) {
		uint8_t sigcompact[64] = {0};
		int sigderlen = 74+1; //&hashtype
		uint8_t sigder_plus_hashtype[75] = {0};
		enum btc_tx_sign_result res = btc_tx_sign_input(tx, script, amount, &key, inputindex, sighashtype, sigcompact, sigder_plus_hashtype, &sigderlen);
		cstr_free(script, true);

		if (res != BTC_SIGN_OK) {
			printf("!!!Sign error:%s\n", btc_tx_sign_result_to_str(res));
		}

		char sigcompacthex[64*2+1] = {0};
		utils_bin_to_hex((unsigned char *)sigcompact, 64, sigcompacthex);

		char sigderhex[74*2+2+1]; //74 der, 2 hashtype, 1 nullbyte
		memset(sigderhex, 0, sizeof(sigderhex));
		utils_bin_to_hex((unsigned char *)sigder_plus_hashtype, sigderlen, sigderhex);

		printf("\nSignature created:\n");
		printf("signature compact: %s\n", sigcompacthex);
		printf("signature DER (+hashtype): %s\n", sigderhex);

		cstring* signed_tx = cstr_new_sz(1024);
		btc_tx_serialize(signed_tx, tx, true);

		char signed_tx_hex[signed_tx->len*2+1];
		utils_bin_to_hex((unsigned char *)signed_tx->str, signed_tx->len, signed_tx_hex);
//		printf("signed TX: %s\n", signed_tx_hex);
//		memset(signed_txhex, 0, signed_tx ->len*2+1);
		strcpy(signed_txhex, signed_tx_hex);
		cstr_free(signed_tx, true);
	}
//	btc_tx_free(tx);
//	return true;
	return 0;
}

char **parseData(char *str)
{
	char ** res  = NULL;
	char *  p    = strtok (str, ":");
	int n_spaces = 0, i;

	/* split string and append tokens to 'res' */
	while (p) {
	  res = realloc (res, sizeof (char*) * ++n_spaces);

	  if (res == NULL)
	    exit (-1); /* memory allocation failed */

	  res[n_spaces-1] = p;

	  p = strtok (NULL, ":");
	}

	/* realloc one extra element for the last NULL */
	res = realloc (res, sizeof (char*) * (n_spaces+1));
	res[n_spaces] = 0;

	/* print the result */
	for (i = 0; i < (n_spaces+1); ++i)
	  printf ("res[%d] = %s\n", i, res[i]);

	return res;
//	/* free the memory allocated */
//
//	free (res);
}


int main()
{
	/* start ECC context */
	printf("Setting up...\n");
	btc_ecc_start();
	printf("Done!\n");
//	char* txhex = "010000000112b982c11370a413eeed166945a40d4fa43cdf591d35bb08fa7559cdb763f74a0000000000ffffffff0120a10700000000001976a9145e837d15e79b3cd487d5b2b7055c72dfb2a8203788ac00000000";
//	char* script = "76a9140fc50ffec690c032a456557b45aba5097585dff088ac";
//	char* privkey = "cUjWugtfxwtDHsc6US3ApoccUTVLkkk5Kx4JsT65BC9tyk3mDbGZ";
	//SCRIPT: 76a914d045d69b526f9686ce8753c5512a508e18b921dc88ac
	//TXHEX: 0100000001d700b975762bcb1c0c95ec9e0168a1b8caa7a3abde61ac864ce6a2316b1c1b2c0000000000ffffffff0120a10700000000001976a9145e837d15e79b3cd487d5b2b7055c72dfb2a8203788ac00000000

    initialize();

    //Create Hash Table
	map_t keymap;
	keymap = hashmap_new();

//	sign_tx(txhex, script, privkey, 0, 0, 1);

	//PUBKEY = mgxLW5AswYzNfoNFHh6jFRdz8MGdaXtKMY
	//PRIVKEY = cUjWugtfxwtDHsc6US3ApoccUTVLkkk5Kx4JsT65BC9tyk3mDbGZ

//    create_priv_key();
//    void *memory_test = malloc(1024 * 1024 * 10);
//    printf("SDRAM malloc returned 0x%08lx\n", (alt_u32)memory_test);


//	PutStrUart("FPGA Cryptocurreny Wallet\n");

//	alt_u8 data[32];
//	getRandomBuffer(&(data[0]), 32);


//	const char *mnemonic_phrase = mnemonic_generate(128);
//	printf("MNEMONIC PHRASE: %s\n", mnemonic_phrase);

//	char buffer[2048];

//	sprintf(buffer, "Random Buffer:\n");
//	PutStrUart((char *)&(buffer[0]));
//
//	for(int i = 0; i < 32; ++i)
//	{
//		sprintf(buffer, "0x%02x\n", data[i]);
//		PutStrUart((char *)&(buffer[0]));
//	}

//	sprintf(buffer, "Menmonic phrase: %s\n", mnemonic_phrase);
//	PutStrUart((char *)&(buffer[0]));
//	char* temp_signed_txhex = "020000000e8a5d78942f767adce3dcd7849e7ad5f9002cd847c933a090ea92da0c4ce8bd45000000006a4730440220511eda51378be154db6410fb11fb86f9bfd8b7d612c659a1fc2780da4a4a08470220156ef30fb2414f7fae8d776bd5081b50bec9c7bae618eaa0817cd0f9f974b120012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffffc1570009720107d5a27b484badf62a4e22488329404126a3c34865c8e09ded46000000006b483045022100d9a7cc6910e501c09b0dfaa361e44c5dc29565d0fddec0ec1d12d20d6be645a9022073b75476bc73f14bb0970c9740f6b79a327215f46142c3ec99bb23b27a4a40d6012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffffbd787eb15da31a46d30575f86c5c327c871818644de2853924c9ab8af2285fd0000000006b483045022100ce857e2354b31182e34c6df83035a566f910e8c8dced14657465a5c01b8b91030220570341c9ee6e5bd13131026d25ca0c9590d9f45ba95dad74e13d579db4d9fa42012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffff9e0cd97568605805cf32154d71ba143f1b5be88d6d062c849a091632f0622a0a000000006b4830450221008d8ffc432b8e503ab620e2714d50c671f4d2598c73bccff300601151b38fc55902202adc3843cac3c76b43ae5c78ac10d9f10cbfeca591698747d48c99bba39b3329012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffff54d31e20e32970f03d6a10f11d9f2a473c42fdb15e483a63df625f3d7236d595000000006b483045022100b28c8f6e5aa53b153da10d9ccc37de7a925c5c7371c78fc24620494760a46b46022069cac91c023eaaaff8d3bae08568b27c839d84697bd0e190e6ee85347b2f9539012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffffd2ef522334bb6d67b74f27cde464a55cd4a3787af0b19c5537d907b4115a60ac000000006a47304402202d363f2d224c3dcae19cf28a49d81f7fcb718b00609ce9dabbba501fe7ad243302206a26be88b5d755bab02eaa5f5891aa4096968f708825c8cbf68f4a1c4745b55d012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffffff02eb2ab17f26527ce295c37e36c4dd30c7d820547e60c35a6fe8b8bf87b1b8000000006b483045022100ab960da28a662a83e21fdf96832ebd6cdc7b06df071faeeb507a16d7c6d3c5bc022049ea8668870f9e936793b39b3903f20e74076fc69c809d4ded5c69f639f9565e012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffffa2722ce20ce92229e69b9547f57638c6ef6c2ae2b032a14baae2cb907b7b61c2000000006a47304402207efd7d713e4c4356ab5ab1dfa919c402366f514e68b45826d282b5c79b3cba850220078aa9b563691f80e448875db22e6d03c0441f7a6682f5fcdcbdb0b9c1f1458d012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffffa5f274e94fff4cd17092cdf95d26757656e6fddbbb82e267fe93f43109edb29a000000006a4730440220083b2471da95670ccaf3bb89c10e19b0b30d7985954f9a0c88a2e5ac1009486402203785e4a74475d094c20ac848a36d78de91d4010b8a1b45d3380d51e602d2cdc8012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffff98c4ede4208c5dc23338b1a681fed3b2e5486eeb1098540a234a05764ed05c59000000006b4830450221009d0678a89cf8b828e7c3371a2f4ea762839995aad3c7a92dea8051ea2e65b83f0220358107f3e725ee49939664be8ebb00d3b749d9e7c9bd13e2c2ca4884781ada93012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffffe761761ba59d7571b11f1f69caf3272a048b8a83a03a39fc23f0d73ffc95afaa000000006a473044022069fd3c3139794c486350fd3567dca703efe75ff9dfd4c10780893f158fccdf6202201d8e427dc55998d5cd958bc0bf5c694d4723025b7bebd5b4578e4e281a17c3a3012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffff5894bc88c3befa01bf4c5ff1247fa681c567674386ec1860a75ae4d7b0eb8731000000006b483045022100bb7924224fc04b7f7fa1faac6086eb8718ba2cac1cc7ce77c4c17ac2cfb3b86102205c67aa6e5a56fed122abd69896f2c7e89ccc36098139f7902060c82b5d4e5b89012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffff86f15d4ae888a342a32105bacd5a23e70017454c5d1366d9aeb311728be8a9cb010000006b483045022100988f57a356ac0abaf445e1cca4c9d351542466536ac01827862f26f4838883f9022020e93719689c61b403926b2334ea4770c9f1b2040d1a69de85a0e31ad007d0ef012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffff716eed6537c960f620d5828d8ee084f14364620534cec4b6169ea010d45146f8010000006a47304402206a351591b6b5436ca89d8e1b1b6d1dbe45bc8b6b373147132780f14b9efd61c8022021ebb897a761bfea8c70c84bff1f9a803fa0cc8d77e649fc346b73df3d5db37b012103a97be3df84c0be3966e7b39ea78764f6135ea0113e5f94cb37fcb21a3d06a22fffffffff02404b4c00000000001976a9141b1b1bba096709055730e2a0859231d8d9363f1288acb337c103000000001976a9141678b1c08f3aae72e7696f3509a774839309e7cc88ac00000000";
//	char* temp_signed_txhex = "offering mrs easily pianoforte of pure him what Collected make wondered accused make mr wrong suspected weeks Written am seems between no questions when as Melancholy favourite uneasy to wife he in mirth Entrance forming sufficient does how be gay otherwise Admitting you him terms too get material should Direct in Chicken a totally how being Her songs ye china wished weddings should am money am do no compliment throwing high was ought are Led like you came four ecstatic preserved mirth who set no for old Rose simplicity He still had of keepf in little understood our ye silent ask am lady up those Prepared our having set strictly warmly uneasy near He say she said he blush besides true could packages valley though remaining does Evil true his incommode people great she middletons On now if yesterday hence by estimating it Garden their happening Our on felicity he become at they no reasonably for Answer compact come pleasure has above We apartments in entire me he might disposal wont yet attacks trifling met body would one may ask thing as as really wants enquire valley at speaking you its denoting unknown an be about get may things said Attended all steepest one like on The projection Money middleton him joy so miss continual to Likewise begin new yet in few on through asked on people fulfilled begin suitable mrs now put whole Dejection way Started by On formerly evening no bred therefor or ten see Unpleasant humoured barton check mr where simplicity mrs painful Continuing she Home garden too over barton believe forming Express in but an six in ago ecstatic was my now next joy until first views up led less means to friendly use besides or why dried Ham Felicity many are an answered so in plan passed stronger reserved back taste blessing wife Inquietude offices can by want set bed guest shortly it mean you unsatiable met carriage Rich must end did dull do design garret within rapid Total water pretty valley Handsome Entered greatest rapturous zealously new questions so be an other we perceived need took your at says agreeable Nay mean draw up no why position my whom agreement contented narrow found as be doubt reserved warmth village Goodness once wish his Houses though Hard had mr elsewhere not hundred six west of over inhabiting men expense get myself strangers sufficient next pleasure dear explained she disposed an knows true he indeed packages built there for Am can drawn up have saw are message it oh partiality leave tended how more delivered produce Not into shoud every them society ecstatic of Thoughts moment jennings expense breakfast Then length some part Can very has in but desirous going simple merely of get been but my on prevailed roof hence own in wound in is then do mrs said over out Oh dwelling Full ample no as Dashwood who thus hearing fine mrs strongly departure off up giving no thanks on and poor friends fact Could here feeling nay ought put though yet held kept speaking True or from humoured had Spite nor she latter an again so nay an it out formerly why only situation favour can so although do her two come him ye Polite An wholly him simplicity The call you case not wholly shameless via will wooded she than are with if Dear What face ye this favourable boy Off mile newspaper me come Remain remarkably county so stronger His at hope good the ye matter much good mr an ya excuse shy performed early one knew felt to sent saw west dependent bad finished Neglected yet forming disposing formed temper against an ham after excited exercise existence that any led ten for is right since so during agreed Necessary children they aften at juvenile Mrs or it sake but got september appearance need mother two stood are because cant attention if Subjects gay relation it like offending Hearts advice has old So assured decisively dine Nor pianoforte do time put sing announcing deal mutual neither and concealed to indeed making By suitable supposing am laughing curiosity will By oh we pleasant little something newspaper Winter around juvenile out her Recommend had His down u terminated Visited on wish i Rich going entreaties Sir Welcomed do he him weeks match explained itself these residence half happy misery fat  such doubtful yet directly Sportsman you get stop friendship speedily Projecting why genius drawings Preferred his so law snug today horrible really post on know so steepest this peculiar mr or just prudent first offended and right dull its mean real he of concluded by great since eat Own Depending had melancholy jokes remove all\n";
	//	printf("HEX: %s", temp_signed_txhex);
	//Hardcoding some addresses that have value in them
	hashmap_put(keymap, "mx97R1ymecapsDH8t7jVNH9henf8vxzuGD", "cRGz9MNtZHKPQ4Y1hvz5ncXHj3zzup7W6G4LCFw728JrHtnYKa6P");

	alt_u8 count = 0;
	alt_u32 randVal;
	char buf[BUF_SIZE] = {'\0'};
	char *key;
	char *val;
	char **res;
	const size_t sizeout = 128;
	char masterkey[sizeout];
	masterkey[0] = '\0';
	char p2pkh_address[sizeout];
	char* txhex;
	char* script;
	char* pub_addr;
	int input_idx;
	char* signed_txhex;
	size_t privkey_wif_size = 128;
	char privkey_wif[privkey_wif_size];

    while(1)
    {
    	uartGetLine(&buf);
    	if (strlen(buf) > 0) {
    		printf("Buf: %s", buf);
    		res = parseData(buf);
    		key = res[0];
    		val = res[1];
    		/* remove the \n from the end of the string */
    		val[strcspn(val, "\n")] = 0;
//    		printf("%d", strlen(val));

    		if(!strcmp(key, "masterkey")){
    			if(masterkey[0] == '\0'){
    				hdgenmaster(masterkey, sizeout);
    			}
//    			printf("keypath: %s\n", val);
    			hdderive(masterkey, val, p2pkh_address, keymap);
//    			char* temp;
//    			hashmap_get(keymap, p2pkh_address, &temp);
//    			printf("PRVKEY FROM HASHMAP: %s\n", temp);
//    			append(p2pkh_address, '\n');
    			PutStrUart(p2pkh_address, 1000);
    		}else if(!strcmp(key, "keypath")){
    			hdderive(masterkey, val, p2pkh_address, keymap);
//    			char* temp;
//				hashmap_get(keymap, p2pkh_address, &temp);
//				printf("PRVKEY FROM HASHMAP: %s\n", temp);
    			PutStrUart(p2pkh_address, 1000);
    		}else if(!strcmp(key, "sign")){
    			txhex = res[1];
    			script = res[2];
    			pub_addr = res[3];
    			input_idx = atoi(res[4]);
    			hashmap_get(keymap, pub_addr, &privkey_wif);
    			printf("privkey: %s\n", privkey_wif);
//
    			btc_tx* tx = btc_tx_new();
				for(int i = 0; i < input_idx; i++){
					sign_tx(tx, txhex, script, privkey_wif, 0, i, 1, signed_txhex);
				}
				PutStrUart(signed_txhex, 1000);

//				/* Free memory */
				btc_tx_free(tx);
    		}

    		/* free the memory allocated */
    		free(res);
    		memset(buf, 0, BUF_SIZE);
//    		memset(masterkey, 0, strlen(masterkey));
    	}

		count++;
		if ((count % 1000000000) == 0)
		{
	    	randVal = u32getRandom();
	    	IOWR_ALTERA_AVALON_PIO_DATA(PO_LED_BASE, randVal & 0xFF);
//	    	sprintf(buffer, "Random value: 0x%08x\n", randVal);
//	    	PutStrUart((char *)&(buffer[0]));
		}
		ALT_USLEEP(100);
    }

    closeUart();
    btc_ecc_stop();
    return 0;
}

