#include "uart_usb.h"

#include <unistd.h>
#include <fcntl.h>
#include <string.h>

#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_uart_regs.h"
#include "altera_avalon_uart.h"


void uartGetLine()
{
	if (!EmptyUart())
	{
		unsigned char c = GetUart();

		switch(c)
		{
		case '\r':
		case '\n':
			PutUart(c);
			break;

		case '\b':
			PutUart('\b');
			PutUart(' ');
			PutUart('\b');
			break;

		default:
			PutUart(c);
		}
	}
}


#if 0
void uartRxChar(char *c)
{
	while (ALTERA_AVALON_UART_STATUS_RRDY_MSK != 0);
	*c = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
}


void uartTxChar(char * c)
{
	while (ALTERA_AVALON_UART_STATUS_TRDY_MSK != 0);
    IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, (*c));
}


void uartTxString(char *str)
{
	static char *txStr;

	txStr = str;

	while(*txStr != 0)
	{
		uartTxChar(txStr);
		txStr++;
	}
}
#endif




#define RX_BUFFER_SIZE 1024
#define TX_BUFFER_SIZE 1024

unsigned short TxHead = 0;
unsigned short TxTail = 0;
unsigned char tx_buffer[TX_BUFFER_SIZE];

unsigned short RxHead = 0;
unsigned short RxTail = 0;
unsigned char rx_buffer[RX_BUFFER_SIZE];


void InitUart(unsigned int BaudRate)
{
	unsigned int divisor = (ALT_CPU_FREQ/BaudRate) +1;

	IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, divisor);
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
}



void IsrUart(void* context, unsigned int id)
{
	int sr = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);

	if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
	{
		rx_buffer[RxHead] = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);

		IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0);

		if (++RxHead > (RX_BUFFER_SIZE - 1))
		{
			RxHead = 0;
		}
	}

	if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
	{
		if(IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK)
		{
			if (TxTail != TxHead)
			{
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, tx_buffer[TxTail]);

				if (++TxTail > (TX_BUFFER_SIZE - 1))
				{
					TxTail = 0;
				}
			}
			else
			{
				IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
			}
		}
	}
}



unsigned char EmptyUart()
{
	if(RxHead == RxTail)
	{
		return 1;
	}
	return 0;
}



unsigned char GetUart(void)
{
	unsigned char rxChar;

	/* buffer is empty */
	rxChar = rx_buffer[RxTail];

	if (++RxTail > (RX_BUFFER_SIZE - 1))
	{
		RxTail = 0;
	}

	return rxChar;
}



unsigned char PutUart(unsigned char in_char)
{
	unsigned short size;
	unsigned int z = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;

	if ((TxHead == TxTail) && z)
	{
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, in_char);
	}
	else
	{
		if (TxHead >= TxTail)
		{
			size = TxHead - TxTail;
		}

		else
		{
			size = ((TX_BUFFER_SIZE - 1) - TxTail) + TxHead;
		}

		if (size > (TX_BUFFER_SIZE - 3))
		{
			return (-1);
		}

		tx_buffer[TxHead] = in_char;

		if (++TxHead > (TX_BUFFER_SIZE - 1))
		{
			TxHead = 0;
		}

		z = IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
		IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, z);
	}
	return(1);
}
